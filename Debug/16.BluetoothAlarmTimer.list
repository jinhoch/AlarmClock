
16.BluetoothAlarmTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008038  08008038  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08008038  08008038  00018038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008040  08008040  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          0000027c  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d0f  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a8  00000000  00000000  00037e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  0003c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028162  00000000  00000000  0003da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6a9  00000000  00000000  00065bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0f09  00000000  00000000  0008026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171174  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b90  00000000  00000000  001711c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e98 	.word	0x08007e98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	08007e98 	.word	0x08007e98

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <I2C_Scan>:





void I2C_Scan() {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <I2C_Scan+0xc0>)
 80005ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	6020      	str	r0, [r4, #0]
 80005bc:	3404      	adds	r4, #4
 80005be:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <I2C_Scan+0xc4>)
 80005d8:	f005 fbc3 	bl	8005d62 <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005e2:	e02f      	b.n	8000644 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b299      	uxth	r1, r3
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	481e      	ldr	r0, [pc, #120]	; (800066c <I2C_Scan+0xc8>)
 80005f2:	f002 fe15 	bl	8003220 <HAL_I2C_IsDeviceReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 80005fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000600:	2b00      	cmp	r3, #0
 8000602:	d113      	bne.n	800062c <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000604:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Scan+0xcc>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f006 fc17 	bl	8006e40 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdeb 	bl	80001f0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <I2C_Scan+0xc4>)
 8000626:	f005 fb9c 	bl	8005d62 <HAL_UART_Transmit>
 800062a:	e006      	b.n	800063a <I2C_Scan+0x96>
					HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <I2C_Scan+0xd0>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <I2C_Scan+0xc4>)
 8000636:	f005 fb94 	bl	8005d62 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800063a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d9cb      	bls.n	80005e4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2202      	movs	r2, #2
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <I2C_Scan+0xd4>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <I2C_Scan+0xc4>)
 8000656:	f005 fb84 	bl	8005d62 <HAL_UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3760      	adds	r7, #96	; 0x60
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	08007ec0 	.word	0x08007ec0
 8000668:	2000032c 	.word	0x2000032c
 800066c:	2000016c 	.word	0x2000016c
 8000670:	08007eb0 	.word	0x08007eb0
 8000674:	08007eb8 	.word	0x08007eb8
 8000678:	08007ebc 	.word	0x08007ebc

0800067c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b299      	uxth	r1, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <LCD_SendInternal+0xa8>)
 800069a:	f002 fdc1 	bl	8003220 <HAL_I2C_IsDeviceReady>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a8:	e7f1      	b.n	800068e <LCD_SendInternal+0x12>
			break;
 80006aa:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f023 030f 	bic.w	r3, r3, #15
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f043 030c 	orr.w	r3, r3, #12
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80006da:	7b7a      	ldrb	r2, [r7, #13]
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f043 030c 	orr.w	r3, r3, #12
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2304      	movs	r3, #4
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <LCD_SendInternal+0xa8>)
 800070c:	f002 fc8a 	bl	8003024 <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000714:	2005      	movs	r0, #5
 8000716:	f001 fc4b 	bl	8001fb0 <HAL_Delay>
	return res;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000016c 	.word	0x2000016c

08000728 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff9c 	bl	800067c <LCD_SendInternal>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 800075c:	79b9      	ldrb	r1, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff8a 	bl	800067c <LCD_SendInternal>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2130      	movs	r1, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffd2 	bl	8000728 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffcd 	bl	8000728 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	210c      	movs	r1, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc8 	bl	8000728 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <LCD_SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80007b6:	e009      	b.n	80007cc <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc3 	bl	800074c <LCD_SendData>
		str++;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
	while (*str) {
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f1      	bne.n	80007b8 <LCD_SendString+0xe>
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <init>:

void init() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	I2C_Scan();
 80007e4:	f7ff fede 	bl	80005a4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ffc1 	bl	8000770 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ff99 	bl	8000728 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " ");
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <init+0x34>)
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ffd6 	bl	80007aa <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007fe:	21c0      	movs	r1, #192	; 0xc0
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ff91 	bl	8000728 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " ");
 8000806:	4903      	ldr	r1, [pc, #12]	; (8000814 <init+0x34>)
 8000808:	204e      	movs	r0, #78	; 0x4e
 800080a:	f7ff ffce 	bl	80007aa <LCD_SendString>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08007ed8 	.word	0x08007ed8

08000818 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_ADC1_Init+0xa0>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800085a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800087c:	f001 fbbc 	bl	8001ff8 <HAL_ADC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000886:	f000 ff99 	bl	80017bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088a:	2303      	movs	r3, #3
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800089c:	f001 fcd0 	bl	8002240 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a6:	f000 ff89 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000124 	.word	0x20000124
 80008b8:	40012000 	.word	0x40012000

080008bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_ADC_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d127      	bne.n	800092e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_ADC_MspInit+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_ADC_MspInit+0x80>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_ADC_MspInit+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000916:	2308      	movs	r3, #8
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_ADC_MspInit+0x84>)
 800092a:	f002 f85b 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012000 	.word	0x40012000
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0xac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xac>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009d0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xb0>)
 80009e2:	f001 ffff 	bl	80029e4 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800

080009f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a36:	f002 f9b1 	bl	8002d9c <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 febc 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a48:	f002 ff21 	bl	800388e <HAL_I2CEx_ConfigAnalogFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a52:	f000 feb3 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a5a:	f002 ff54 	bl	8003906 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a64:	f000 feaa 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000016c 	.word	0x2000016c
 8000a70:	40005400 	.word	0x40005400
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad4:	f001 ff86 	bl	80029e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 8000b10:	1d39      	adds	r1, r7, #4
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	2201      	movs	r2, #1
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <__io_putchar+0x20>)
 8000b1a:	f005 f922 	bl	8005d62 <HAL_UART_Transmit>
	return ch;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000032c 	.word	0x2000032c

08000b2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b32:	f001 f9cb 	bl	8001ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b36:	f000 f853 	bl	8000be0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b3a:	f7ff ff03 	bl	8000944 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000b3e:	f7ff fe6b 	bl	8000818 <MX_ADC1_Init>
	MX_RTC_Init();
 8000b42:	f000 fe41 	bl	80017c8 <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000b46:	f001 f925 	bl	8001d94 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000b4a:	f7ff ff55 	bl	80009f8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000b4e:	f000 ffed 	bl	8001b2c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000b52:	f001 f839 	bl	8001bc8 <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000b56:	f000 f8b5 	bl	8000cc4 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	init();
 8000b5a:	f7ff fe41 	bl	80007e0 <init>
	HAL_TIM_Base_Init(&htim2);
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <main+0xa0>)
 8000b60:	f004 f876 	bl	8004c50 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	4819      	ldr	r0, [pc, #100]	; (8000bcc <main+0xa0>)
 8000b66:	f004 f8c3 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Init(&htim3);
 8000b6a:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <main+0xa4>)
 8000b6c:	f004 f870 	bl	8004c50 <HAL_TIM_Base_Init>
	init_time();
 8000b70:	f000 fa1e 	bl	8000fb0 <init_time>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b74:	210c      	movs	r1, #12
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <main+0xa4>)
 8000b78:	f004 f984 	bl	8004e84 <HAL_TIM_PWM_Start>

	Clock_time buf_time;
	Clock_time now_time;
	Clock_time alarm_time;

	memset(&buf_time,0,sizeof(Clock_time));
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	220e      	movs	r2, #14
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f006 f8dd 	bl	8006d44 <memset>
	memset(&now_time,0,sizeof(Clock_time));
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	220e      	movs	r2, #14
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 f8d6 	bl	8006d44 <memset>
	memset(&alarm_time,0,sizeof(Clock_time));
 8000b98:	463b      	mov	r3, r7
 8000b9a:	220e      	movs	r2, #14
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 f8d0 	bl	8006d44 <memset>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	490b      	ldr	r1, [pc, #44]	; (8000bd4 <main+0xa8>)
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <main+0xac>)
 8000baa:	f003 fe63 	bl	8004874 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	490a      	ldr	r1, [pc, #40]	; (8000bdc <main+0xb0>)
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <main+0xac>)
 8000bb4:	f003 ff40 	bl	8004a38 <HAL_RTC_GetDate>

		clock(&buf_time,&now_time,&alarm_time);
 8000bb8:	463a      	mov	r2, r7
 8000bba:	f107 0110 	add.w	r1, r7, #16
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fafc 	bl	80011c0 <clock>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000bc8:	e7ec      	b.n	8000ba4 <main+0x78>
 8000bca:	bf00      	nop
 8000bcc:	2000029c 	.word	0x2000029c
 8000bd0:	200002e4 	.word	0x200002e4
 8000bd4:	20000224 	.word	0x20000224
 8000bd8:	20000278 	.word	0x20000278
 8000bdc:	20000238 	.word	0x20000238

08000be0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	2230      	movs	r2, #48	; 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f006 f8a8 	bl	8006d44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <SystemClock_Config+0xdc>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <SystemClock_Config+0xdc>)
 8000c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <SystemClock_Config+0xdc>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <SystemClock_Config+0xe0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <SystemClock_Config+0xe0>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <SystemClock_Config+0xe0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000c58:	23b4      	movs	r3, #180	; 0xb4
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fedb 	bl	8003a24 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x98>
		Error_Handler();
 8000c74:	f000 fda2 	bl	80017bc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000c78:	f002 fe84 	bl	8003984 <HAL_PWREx_EnableOverDrive>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xa6>
		Error_Handler();
 8000c82:	f000 fd9b 	bl	80017bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c96:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c9c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 f935 	bl	8003f14 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xd4>
		Error_Handler();
 8000cb0:	f000 fd84 	bl	80017bc <Error_Handler>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3750      	adds	r7, #80	; 0x50
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f001 fdc0 	bl	8002852 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f001 fdd9 	bl	800288a <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	201c      	movs	r0, #28
 8000cde:	f001 fdb8 	bl	8002852 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce2:	201c      	movs	r0, #28
 8000ce4:	f001 fdd1 	bl	800288a <HAL_NVIC_EnableIRQ>
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2027      	movs	r0, #39	; 0x27
 8000cee:	f001 fdb0 	bl	8002852 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf2:	2027      	movs	r0, #39	; 0x27
 8000cf4:	f001 fdc9 	bl	800288a <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f001 fda8 	bl	8002852 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d02:	2028      	movs	r0, #40	; 0x28
 8000d04:	f001 fdc1 	bl	800288a <HAL_NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	int i;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d1c:	f040 8098 	bne.w	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
		current_time = HAL_GetTick();
 8000d20:	f001 f93a 	bl	8001f98 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d28:	6013      	str	r3, [r2, #0]
		time_interval = current_time - last_time;
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x150>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d36:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000d38:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x150>)
 8000d3e:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4847      	ldr	r0, [pc, #284]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d46:	f001 fff9 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	72fb      	strb	r3, [r7, #11]

		if (time_interval <= 2) // noise
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d97c      	bls.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
				{
		} else {

			click[2].time = click[1].time;
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d5c:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d60:	7b1a      	ldrb	r2, [r3, #12]
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d64:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a3f      	ldr	r2, [pc, #252]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d6c:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d70:	791a      	ldrb	r2, [r3, #4]
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d74:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d7e:	601a      	str	r2, [r3, #0]
			click[0].level = pin;
 8000d80:	4a39      	ldr	r2, [pc, #228]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	7113      	strb	r3, [r2, #4]

			if (click[2].level == GPIO_PIN_RESET
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d88:	7d1b      	ldrb	r3, [r3, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d122      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xc8>
					&& click[1].level == GPIO_PIN_SET
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d90:	7b1b      	ldrb	r3, [r3, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11e      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xc8>
					&& click[0].level == GPIO_PIN_RESET) {
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d98:	791b      	ldrb	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xc8>
				for (i = 0; i < 3; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e00e      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0xb6>
					if (click[i].time >= DOUBLE_CLICK_MIN
 8000da4:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dac:	2b13      	cmp	r3, #19
 8000dae:	dd0b      	ble.n	8000dc8 <HAL_GPIO_EXTI_Callback+0xbc>
							&& click[i].time <= DOUBLE_CLICK_MAX) {
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000db8:	2b78      	cmp	r3, #120	; 0x78
 8000dba:	dc05      	bgt.n	8000dc8 <HAL_GPIO_EXTI_Callback+0xbc>
				for (i = 0; i < 3; i++) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	dded      	ble.n	8000da4 <HAL_GPIO_EXTI_Callback+0x98>
						continue;
					} else
						break;
				}
				if (i == 3) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d102      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xc8>
					now_state.mode = MUSIC_SELECT;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	701a      	strb	r2, [r3, #0]
				}
			}

			if (click[0].level== GPIO_PIN_RESET&& click[0].time >=LONG_CLICK_MIN) // long click
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d109      	bne.n	8000df0 <HAL_GPIO_EXTI_Callback+0xe4>
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f240 52db 	movw	r2, #1499	; 0x5db
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd03      	ble.n	8000df0 <HAL_GPIO_EXTI_Callback+0xe4>
					{
				now_state.mode = ALARM_TIME_SETTING;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	701a      	strb	r2, [r3, #0]
			}

		}
	}

}
 8000dee:	e02f      	b.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
			} else if (click[0].level== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12b      	bne.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e00:	4293      	cmp	r3, r2
 8000e02:	dc25      	bgt.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b78      	cmp	r3, #120	; 0x78
 8000e0a:	dd21      	ble.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
				if (now_state.mode == TIME_SETTING
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_EXTI_Callback+0x118>
						|| now_state.mode == ALARM_TIME_SETTING
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_EXTI_Callback+0x118>
						|| now_state.mode == MUSIC_SELECT) mode_flag = 1;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d103      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x120>
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x164>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_EXTI_Callback+0x126>
				else mode_flag = 0;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x164>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
				if (mode_flag == 0) now_state.mode = TIME_SETTING;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x164>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <HAL_GPIO_EXTI_Callback+0x136>
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
}
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
				else if (mode_flag == 1) now_state.mode = NORMAL;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x164>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d102      	bne.n	8000e50 <HAL_GPIO_EXTI_Callback+0x144>
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x160>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000244 	.word	0x20000244
 8000e5c:	20000240 	.word	0x20000240
 8000e60:	20000248 	.word	0x20000248
 8000e64:	40020800 	.word	0x40020800
 8000e68:	2000025c 	.word	0x2000025c
 8000e6c:	20000274 	.word	0x20000274
 8000e70:	2000024d 	.word	0x2000024d

08000e74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d11e      	bne.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x50>
		ADC_button();
 8000e86:	f000 f829 	bl	8000edc <ADC_button>
		timer++;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e92:	6013      	str	r3, [r2, #0]
		if(hfsec_flag == 1){
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d113      	bne.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x50>
			timer_flag++;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ea4:	6013      	str	r3, [r2, #0]
			if(timer_flag % 5 == 0){
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000eac:	fba3 2301 	umull	r2, r3, r3, r1
 8000eb0:	089a      	lsrs	r2, r3, #2
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	1aca      	subs	r2, r1, r3
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x50>
				hfsec_flag = 0;
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000254 	.word	0x20000254
 8000ed0:	20000250 	.word	0x20000250
 8000ed4:	20000258 	.word	0x20000258
 8000ed8:	cccccccd 	.word	0xcccccccd

08000edc <ADC_button>:

//ADC값 변화에 따른 버튼
void ADC_button() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000ee0:	4822      	ldr	r0, [pc, #136]	; (8000f6c <ADC_button+0x90>)
 8000ee2:	f001 f8cd 	bl	8002080 <HAL_ADC_Start>
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000ee6:	4821      	ldr	r0, [pc, #132]	; (8000f6c <ADC_button+0x90>)
 8000ee8:	f001 f99c 	bl	8002224 <HAL_ADC_GetValue>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <ADC_button+0x94>)
 8000ef2:	801a      	strh	r2, [r3, #0]

	if (ADC_Value <= 100) now_state.button = UP;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <ADC_button+0x94>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d803      	bhi.n	8000f04 <ADC_button+0x28>
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <ADC_button+0x98>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	705a      	strb	r2, [r3, #1]
	else if (ADC_Value >= 800 && ADC_Value <= 900) now_state.button = DOWN;
	else if (ADC_Value >= 1900 && ADC_Value <= 2000) now_state.button = LEFT;
	else if (ADC_Value >= 2900 && ADC_Value <= 3100) now_state.button = RIGHT;
	else now_state.button = BASIC;
}
 8000f02:	e030      	b.n	8000f66 <ADC_button+0x8a>
	else if (ADC_Value >= 800 && ADC_Value <= 900) now_state.button = DOWN;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ADC_button+0x94>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f0c:	d308      	bcc.n	8000f20 <ADC_button+0x44>
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <ADC_button+0x94>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f16:	d803      	bhi.n	8000f20 <ADC_button+0x44>
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <ADC_button+0x98>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	705a      	strb	r2, [r3, #1]
 8000f1e:	e022      	b.n	8000f66 <ADC_button+0x8a>
	else if (ADC_Value >= 1900 && ADC_Value <= 2000) now_state.button = LEFT;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <ADC_button+0x94>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	f240 726b 	movw	r2, #1899	; 0x76b
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d908      	bls.n	8000f3e <ADC_button+0x62>
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <ADC_button+0x94>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f34:	d803      	bhi.n	8000f3e <ADC_button+0x62>
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <ADC_button+0x98>)
 8000f38:	2204      	movs	r2, #4
 8000f3a:	705a      	strb	r2, [r3, #1]
 8000f3c:	e013      	b.n	8000f66 <ADC_button+0x8a>
	else if (ADC_Value >= 2900 && ADC_Value <= 3100) now_state.button = RIGHT;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <ADC_button+0x94>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	f640 3253 	movw	r2, #2899	; 0xb53
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d909      	bls.n	8000f5e <ADC_button+0x82>
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <ADC_button+0x94>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d803      	bhi.n	8000f5e <ADC_button+0x82>
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <ADC_button+0x98>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	705a      	strb	r2, [r3, #1]
 8000f5c:	e003      	b.n	8000f66 <ADC_button+0x8a>
	else now_state.button = BASIC;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <ADC_button+0x98>)
 8000f60:	2205      	movs	r2, #5
 8000f62:	705a      	strb	r2, [r3, #1]
}
 8000f64:	e7ff      	b.n	8000f66 <ADC_button+0x8a>
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000124 	.word	0x20000124
 8000f70:	2000023c 	.word	0x2000023c
 8000f74:	20000274 	.word	0x20000274

08000f78 <LCD_Cursor>:


//LCD_Cursor 위치 변경(16x2)
void LCD_Cursor(int row, int column) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	if (row == 1) row = 0x40;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <LCD_Cursor+0x14>
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	607b      	str	r3, [r7, #4]
	LCD_SendCommand(LCD_ADDR, 0x80 | (row | column));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	204e      	movs	r0, #78	; 0x4e
 8000fa4:	f7ff fbc0 	bl	8000728 <LCD_SendCommand>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <init_time>:

//am 0시 0분 0초 초기화
void init_time() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	sTime.TimeFormat = 0;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <init_time+0x2c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	70da      	strb	r2, [r3, #3]
	sTime.Hours = 0;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <init_time+0x2c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <init_time+0x2c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <init_time+0x2c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4903      	ldr	r1, [pc, #12]	; (8000fdc <init_time+0x2c>)
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <init_time+0x30>)
 8000fd2:	f003 fbb5 	bl	8004740 <HAL_RTC_SetTime>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000224 	.word	0x20000224
 8000fe0:	20000278 	.word	0x20000278

08000fe4 <set_time>:


//매개변수의 시간으로 setTime
void set_time(Clock_time* now_time) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

	sTime.TimeFormat = now_time->Ampm;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <set_time+0x88>)
 8000ff6:	70da      	strb	r2, [r3, #3]
	sTime.Hours = now_time->Hour1 << 4 | now_time->Hour2;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	b25a      	sxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <set_time+0x88>)
 8001012:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = now_time->Min1 << 4 | now_time->Min2;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b25a      	sxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b25b      	sxtb	r3, r3
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <set_time+0x88>)
 800102e:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = now_time->Sec1 << 4 | now_time->Sec2;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	b25a      	sxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b25b      	sxtb	r3, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <set_time+0x88>)
 800104a:	709a      	strb	r2, [r3, #2]

	if (sTime.Hours > 0x12) sTime.Hours = 0x10;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <set_time+0x88>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d902      	bls.n	800105a <set_time+0x76>
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <set_time+0x88>)
 8001056:	2210      	movs	r2, #16
 8001058:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800105a:	2201      	movs	r2, #1
 800105c:	4903      	ldr	r1, [pc, #12]	; (800106c <set_time+0x88>)
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <set_time+0x8c>)
 8001060:	f003 fb6e 	bl	8004740 <HAL_RTC_SetTime>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000224 	.word	0x20000224
 8001070:	20000278 	.word	0x20000278

08001074 <blink>:


//시간,알람시간 변경시 깜빡거림을 표현
void blink(uint8_t location,Clock_time* buf_time) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	uint16_t AMpm;
	uint16_t hour;
	uint16_t min;
	uint16_t sec;

	AMpm = buf_time->Ampm;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001086:	81fb      	strh	r3, [r7, #14]
	hour = buf_time->Hour1 << 4 | buf_time->Hour2;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	b21a      	sxth	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001098:	4313      	orrs	r3, r2
 800109a:	b21b      	sxth	r3, r3
 800109c:	81bb      	strh	r3, [r7, #12]
	min = buf_time->Min1 << 4 | buf_time->Min2;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	817b      	strh	r3, [r7, #10]
	sec = buf_time->Sec1 << 4 | buf_time->Sec2;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	b21a      	sxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	813b      	strh	r3, [r7, #8]

	sprintf(temp, "%s %02x:%02x:%02x", ampm[AMpm], hour, min, sec);
 80010ca:	89fa      	ldrh	r2, [r7, #14]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <blink+0xd4>)
 80010d4:	1899      	adds	r1, r3, r2
 80010d6:	89b8      	ldrh	r0, [r7, #12]
 80010d8:	897b      	ldrh	r3, [r7, #10]
 80010da:	893a      	ldrh	r2, [r7, #8]
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	460a      	mov	r2, r1
 80010e4:	4919      	ldr	r1, [pc, #100]	; (800114c <blink+0xd8>)
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <blink+0xdc>)
 80010e8:	f005 fede 	bl	8006ea8 <siprintf>
	LCD_Cursor(1, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff42 	bl	8000f78 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, temp);
 80010f4:	4916      	ldr	r1, [pc, #88]	; (8001150 <blink+0xdc>)
 80010f6:	204e      	movs	r0, #78	; 0x4e
 80010f8:	f7ff fb57 	bl	80007aa <LCD_SendString>

	if (timer % 3 == 0) {
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <blink+0xe0>)
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <blink+0xe4>)
 8001102:	fba3 2301 	umull	r2, r3, r3, r1
 8001106:	085a      	lsrs	r2, r3, #1
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	1aca      	subs	r2, r1, r3
 8001110:	2a00      	cmp	r2, #0
 8001112:	d115      	bne.n	8001140 <blink+0xcc>
		if (location == 0) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <blink+0xba>
			LCD_Cursor(1, location);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4619      	mov	r1, r3
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff ff2a 	bl	8000f78 <LCD_Cursor>
			LCD_SendString(LCD_ADDR, "  ");
 8001124:	490d      	ldr	r1, [pc, #52]	; (800115c <blink+0xe8>)
 8001126:	204e      	movs	r0, #78	; 0x4e
 8001128:	f7ff fb3f 	bl	80007aa <LCD_SendString>
			LCD_Cursor(1, location);
			LCD_SendData(LCD_ADDR, ' ');
		}
	}

}
 800112c:	e008      	b.n	8001140 <blink+0xcc>
			LCD_Cursor(1, location);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4619      	mov	r1, r3
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ff20 	bl	8000f78 <LCD_Cursor>
			LCD_SendData(LCD_ADDR, ' ');
 8001138:	2120      	movs	r1, #32
 800113a:	204e      	movs	r0, #78	; 0x4e
 800113c:	f7ff fb06 	bl	800074c <LCD_SendData>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	08007edc 	.word	0x08007edc
 8001150:	200001c0 	.word	0x200001c0
 8001154:	20000254 	.word	0x20000254
 8001158:	aaaaaaab 	.word	0xaaaaaaab
 800115c:	08007ef0 	.word	0x08007ef0

08001160 <Up_Down_value_limit>:

//시간, 알람시간 변경모드 에서 버튼에 따른 값 변화 그리고 시계처럼 제한 두는 함수
uint16_t Up_Down_value_limit(int16_t value) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
	if (now_state.button == UP)
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <Up_Down_value_limit+0x5c>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d106      	bne.n	8001180 <Up_Down_value_limit+0x20>
		value++;
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	b29b      	uxth	r3, r3
 8001178:	3301      	adds	r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	e009      	b.n	8001194 <Up_Down_value_limit+0x34>
	else if (now_state.button == DOWN)
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <Up_Down_value_limit+0x5c>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d105      	bne.n	8001194 <Up_Down_value_limit+0x34>
		value--;
 8001188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	80fb      	strh	r3, [r7, #6]
	if (value > 9)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b09      	cmp	r3, #9
 800119a:	dd01      	ble.n	80011a0 <Up_Down_value_limit+0x40>
		value = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	80fb      	strh	r3, [r7, #6]
	if (value < 0)
 80011a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	da01      	bge.n	80011ac <Up_Down_value_limit+0x4c>
		value = 9;
 80011a8:	2309      	movs	r3, #9
 80011aa:	80fb      	strh	r3, [r7, #6]

	return value;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000274 	.word	0x20000274

080011c0 <clock>:

//모드에 맞게 동작하는 시계
void clock(Clock_time* buf_time,Clock_time* now_time,Clock_time* alarm_time) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]

	if (now_state.mode == NORMAL) Normal_mode(alarm_time);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <clock+0x4c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <clock+0x1c>
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f81b 	bl	8001210 <Normal_mode>
	else if (now_state.mode == TIME_SETTING|| now_state.mode == ALARM_TIME_SETTING) Time_or_Alarm_change_mode(buf_time,now_time,alarm_time);
	else if (now_state.mode == MUSIC_SELECT) Music_select_mode();


}
 80011da:	e013      	b.n	8001204 <clock+0x44>
	else if (now_state.mode == TIME_SETTING|| now_state.mode == ALARM_TIME_SETTING) Time_or_Alarm_change_mode(buf_time,now_time,alarm_time);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <clock+0x4c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d003      	beq.n	80011ec <clock+0x2c>
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <clock+0x4c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d105      	bne.n	80011f8 <clock+0x38>
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f865 	bl	80012c0 <Time_or_Alarm_change_mode>
}
 80011f6:	e005      	b.n	8001204 <clock+0x44>
	else if (now_state.mode == MUSIC_SELECT) Music_select_mode();
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <clock+0x4c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d101      	bne.n	8001204 <clock+0x44>
 8001200:	f000 fa04 	bl	800160c <Music_select_mode>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000274 	.word	0x20000274

08001210 <Normal_mode>:


//기본적으로 시간이 흐르는 모드
void Normal_mode(Clock_time* alarm_time) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]

	LCD_Cursor(0, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff feac 	bl	8000f78 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, "Jin Ho Clock ");
 8001220:	491f      	ldr	r1, [pc, #124]	; (80012a0 <Normal_mode+0x90>)
 8001222:	204e      	movs	r0, #78	; 0x4e
 8001224:	f7ff fac1 	bl	80007aa <LCD_SendString>
	sprintf(temp, "%s %02x:%02x:%02x", sTime.TimeFormat[ampm], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <Normal_mode+0x94>)
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <Normal_mode+0x98>)
 8001236:	441a      	add	r2, r3
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <Normal_mode+0x94>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <Normal_mode+0x94>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	4619      	mov	r1, r3
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <Normal_mode+0x94>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	4917      	ldr	r1, [pc, #92]	; (80012ac <Normal_mode+0x9c>)
 8001250:	4817      	ldr	r0, [pc, #92]	; (80012b0 <Normal_mode+0xa0>)
 8001252:	f005 fe29 	bl	8006ea8 <siprintf>
	LCD_Cursor(1, 0);
 8001256:	2100      	movs	r1, #0
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fe8d 	bl	8000f78 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, temp);
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <Normal_mode+0xa0>)
 8001260:	204e      	movs	r0, #78	; 0x4e
 8001262:	f7ff faa2 	bl	80007aa <LCD_SendString>
	if (Alarm_flag == 1) {
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <Normal_mode+0xa4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <Normal_mode+0x70>
		LCD_Cursor(1, 11);
 800126e:	210b      	movs	r1, #11
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fe81 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "  AL");
 8001276:	4910      	ldr	r1, [pc, #64]	; (80012b8 <Normal_mode+0xa8>)
 8001278:	204e      	movs	r0, #78	; 0x4e
 800127a:	f7ff fa96 	bl	80007aa <LCD_SendString>
 800127e:	e007      	b.n	8001290 <Normal_mode+0x80>
	} else {
		LCD_Cursor(1, 11);
 8001280:	210b      	movs	r1, #11
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff fe78 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "     ");
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <Normal_mode+0xac>)
 800128a:	204e      	movs	r0, #78	; 0x4e
 800128c:	f7ff fa8d 	bl	80007aa <LCD_SendString>
	}

	Alarm(alarm_time);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f9fd 	bl	8001690 <Alarm>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08007ef4 	.word	0x08007ef4
 80012a4:	20000224 	.word	0x20000224
 80012a8:	20000000 	.word	0x20000000
 80012ac:	08007edc 	.word	0x08007edc
 80012b0:	200001c0 	.word	0x200001c0
 80012b4:	2000024f 	.word	0x2000024f
 80012b8:	08007f04 	.word	0x08007f04
 80012bc:	08007f0c 	.word	0x08007f0c

080012c0 <Time_or_Alarm_change_mode>:




//시간 변경 모드(버튼 한번) 또는 알람 시간 변경 모드(버튼 길게 3초이상)
void Time_or_Alarm_change_mode(Clock_time* buf_time,Clock_time* now_time,Clock_time* alarm_time) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]

	if (setting_flag == 0) {
 80012cc:	4ba3      	ldr	r3, [pc, #652]	; (800155c <Time_or_Alarm_change_mode+0x29c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d134      	bne.n	800133e <Time_or_Alarm_change_mode+0x7e>
		buf_time->Ampm = sTime.TimeFormat;
 80012d4:	4ba2      	ldr	r3, [pc, #648]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	b21a      	sxth	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	819a      	strh	r2, [r3, #12]
		buf_time->Hour1 = (sTime.Hours & 0xf0) >> 4;
 80012de:	4ba0      	ldr	r3, [pc, #640]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	801a      	strh	r2, [r3, #0]
		buf_time->Hour2 = sTime.Hours & 0x0f;
 80012ec:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	805a      	strh	r2, [r3, #2]
		buf_time->Min1 = (sTime.Minutes & 0xf0) >> 4;
 80012fc:	4b98      	ldr	r3, [pc, #608]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b21a      	sxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	809a      	strh	r2, [r3, #4]
		buf_time->Min2 = sTime.Minutes & 0x0f;
 800130a:	4b95      	ldr	r3, [pc, #596]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	b21b      	sxth	r3, r3
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	b21a      	sxth	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	80da      	strh	r2, [r3, #6]
		buf_time->Sec1 = (sTime.Seconds & 0xf0) >> 4;
 800131a:	4b91      	ldr	r3, [pc, #580]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	811a      	strh	r2, [r3, #8]
		buf_time->Sec2 = sTime.Seconds & 0x0f;
 8001328:	4b8d      	ldr	r3, [pc, #564]	; (8001560 <Time_or_Alarm_change_mode+0x2a0>)
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	b21b      	sxth	r3, r3
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	b21a      	sxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	815a      	strh	r2, [r3, #10]

		setting_flag = 1;
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <Time_or_Alarm_change_mode+0x29c>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	}

	switch (now_state.button) {
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <Time_or_Alarm_change_mode+0x8c>
 8001346:	2b04      	cmp	r3, #4
 8001348:	d007      	beq.n	800135a <Time_or_Alarm_change_mode+0x9a>
		cursor_change--;
		if (cursor_change < 0)
			cursor_change = 0;
		break;
	default:
		break;
 800134a:	e00d      	b.n	8001368 <Time_or_Alarm_change_mode+0xa8>
		cursor_change++;
 800134c:	4b86      	ldr	r3, [pc, #536]	; (8001568 <Time_or_Alarm_change_mode+0x2a8>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <Time_or_Alarm_change_mode+0x2a8>)
 8001356:	701a      	strb	r2, [r3, #0]
		break;
 8001358:	e006      	b.n	8001368 <Time_or_Alarm_change_mode+0xa8>
		cursor_change--;
 800135a:	4b83      	ldr	r3, [pc, #524]	; (8001568 <Time_or_Alarm_change_mode+0x2a8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b81      	ldr	r3, [pc, #516]	; (8001568 <Time_or_Alarm_change_mode+0x2a8>)
 8001364:	701a      	strb	r2, [r3, #0]
		break;
 8001366:	bf00      	nop
	}

	switch (cursor_change % 7) {
 8001368:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <Time_or_Alarm_change_mode+0x2a8>)
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b7f      	ldr	r3, [pc, #508]	; (800156c <Time_or_Alarm_change_mode+0x2ac>)
 800136e:	fba3 1302 	umull	r1, r3, r3, r2
 8001372:	1ad1      	subs	r1, r2, r3
 8001374:	0849      	lsrs	r1, r1, #1
 8001376:	440b      	add	r3, r1
 8001378:	0899      	lsrs	r1, r3, #2
 800137a:	460b      	mov	r3, r1
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a5b      	subs	r3, r3, r1
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b06      	cmp	r3, #6
 8001386:	f200 8096 	bhi.w	80014b6 <Time_or_Alarm_change_mode+0x1f6>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <Time_or_Alarm_change_mode+0xd0>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013ad 	.word	0x080013ad
 8001394:	080013d7 	.word	0x080013d7
 8001398:	08001401 	.word	0x08001401
 800139c:	0800141f 	.word	0x0800141f
 80013a0:	0800144d 	.word	0x0800144d
 80013a4:	0800146b 	.word	0x0800146b
 80013a8:	08001499 	.word	0x08001499
	case 0:
		blink(0,buf_time);
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fe60 	bl	8001074 <blink>
		if (now_state.button == UP || now_state.button == DOWN)
 80013b4:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d003      	beq.n	80013c4 <Time_or_Alarm_change_mode+0x104>
 80013bc:	4b69      	ldr	r3, [pc, #420]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d17a      	bne.n	80014ba <Time_or_Alarm_change_mode+0x1fa>
			buf_time->Ampm ^= 1;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	819a      	strh	r2, [r3, #12]
		break;
 80013d4:	e071      	b.n	80014ba <Time_or_Alarm_change_mode+0x1fa>
	case 1:
		blink(3,buf_time);
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	2003      	movs	r0, #3
 80013da:	f7ff fe4b 	bl	8001074 <blink>
		if (now_state.button == UP || now_state.button == DOWN)
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <Time_or_Alarm_change_mode+0x12e>
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d167      	bne.n	80014be <Time_or_Alarm_change_mode+0x1fe>
			buf_time->Hour1 ^= 1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	801a      	strh	r2, [r3, #0]
		break;
 80013fe:	e05e      	b.n	80014be <Time_or_Alarm_change_mode+0x1fe>
	case 2:
		blink(4,buf_time);
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff fe36 	bl	8001074 <blink>
		buf_time->Hour2 = Up_Down_value_limit(buf_time->Hour2);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fea6 	bl	8001160 <Up_Down_value_limit>
 8001414:	4603      	mov	r3, r0
 8001416:	b21a      	sxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	805a      	strh	r2, [r3, #2]
		break;
 800141c:	e054      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
	case 3:
		blink(6,buf_time);
 800141e:	68f9      	ldr	r1, [r7, #12]
 8001420:	2006      	movs	r0, #6
 8001422:	f7ff fe27 	bl	8001074 <blink>
		buf_time->Min1 = Up_Down_value_limit(buf_time->Min1);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe97 	bl	8001160 <Up_Down_value_limit>
 8001432:	4603      	mov	r3, r0
 8001434:	b21a      	sxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	809a      	strh	r2, [r3, #4]
		if (buf_time->Min1 > 5)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001440:	2b05      	cmp	r3, #5
 8001442:	dd3e      	ble.n	80014c2 <Time_or_Alarm_change_mode+0x202>
			buf_time->Min1 = 0;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	809a      	strh	r2, [r3, #4]
		break;
 800144a:	e03a      	b.n	80014c2 <Time_or_Alarm_change_mode+0x202>
	case 4:
		blink(7,buf_time);
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	2007      	movs	r0, #7
 8001450:	f7ff fe10 	bl	8001074 <blink>
		buf_time->Min2 = Up_Down_value_limit(buf_time->Min2);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe80 	bl	8001160 <Up_Down_value_limit>
 8001460:	4603      	mov	r3, r0
 8001462:	b21a      	sxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	80da      	strh	r2, [r3, #6]
		break;
 8001468:	e02e      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
	case 5:
		blink(9,buf_time);
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	2009      	movs	r0, #9
 800146e:	f7ff fe01 	bl	8001074 <blink>
		buf_time->Sec1 = Up_Down_value_limit(buf_time->Sec1);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fe71 	bl	8001160 <Up_Down_value_limit>
 800147e:	4603      	mov	r3, r0
 8001480:	b21a      	sxth	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	811a      	strh	r2, [r3, #8]
		if (buf_time->Sec1 > 5)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800148c:	2b05      	cmp	r3, #5
 800148e:	dd1a      	ble.n	80014c6 <Time_or_Alarm_change_mode+0x206>
			buf_time->Sec1 = 0;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	811a      	strh	r2, [r3, #8]
		break;
 8001496:	e016      	b.n	80014c6 <Time_or_Alarm_change_mode+0x206>
	case 6:
		blink(10,buf_time);
 8001498:	68f9      	ldr	r1, [r7, #12]
 800149a:	200a      	movs	r0, #10
 800149c:	f7ff fdea 	bl	8001074 <blink>
		buf_time->Sec2 = Up_Down_value_limit(buf_time->Sec2);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe5a 	bl	8001160 <Up_Down_value_limit>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	815a      	strh	r2, [r3, #10]
		break;
 80014b4:	e008      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
	default:
		break;
 80014b6:	bf00      	nop
 80014b8:	e006      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
		break;
 80014ba:	bf00      	nop
 80014bc:	e004      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
		break;
 80014be:	bf00      	nop
 80014c0:	e002      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
		break;
 80014c2:	bf00      	nop
 80014c4:	e000      	b.n	80014c8 <Time_or_Alarm_change_mode+0x208>
		break;
 80014c6:	bf00      	nop
	}

	if ((buf_time->Hour1 << 4 | buf_time->Hour2) > 0x12) buf_time->Hour2 = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	2b12      	cmp	r3, #18
 80014da:	dd02      	ble.n	80014e2 <Time_or_Alarm_change_mode+0x222>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	805a      	strh	r2, [r3, #2]

	if (now_state.mode == TIME_SETTING) {
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <Time_or_Alarm_change_mode+0x2a4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d146      	bne.n	8001578 <Time_or_Alarm_change_mode+0x2b8>
		LCD_Cursor(0, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fd43 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "Time Setting");
 80014f2:	491f      	ldr	r1, [pc, #124]	; (8001570 <Time_or_Alarm_change_mode+0x2b0>)
 80014f4:	204e      	movs	r0, #78	; 0x4e
 80014f6:	f7ff f958 	bl	80007aa <LCD_SendString>
		LCD_Cursor(1, 11);
 80014fa:	210b      	movs	r1, #11
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fd3b 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "     ");
 8001502:	491c      	ldr	r1, [pc, #112]	; (8001574 <Time_or_Alarm_change_mode+0x2b4>)
 8001504:	204e      	movs	r0, #78	; 0x4e
 8001506:	f7ff f950 	bl	80007aa <LCD_SendString>

		now_time = buf_time;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	60bb      	str	r3, [r7, #8]
		now_time->Ampm = buf_time->Ampm;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	819a      	strh	r2, [r3, #12]
		now_time->Hour1 = buf_time -> Hour1;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	801a      	strh	r2, [r3, #0]
		now_time->Hour2 = buf_time -> Hour2;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	805a      	strh	r2, [r3, #2]
		now_time->Min1 = buf_time -> Min1;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	809a      	strh	r2, [r3, #4]
		now_time->Min2 = buf_time -> Min2;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	80da      	strh	r2, [r3, #6]
		now_time->Sec1 = buf_time -> Sec1;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	811a      	strh	r2, [r3, #8]
		now_time->Sec2 = buf_time -> Sec2;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	815a      	strh	r2, [r3, #10]

		set_time(now_time);
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fd45 	bl	8000fe4 <set_time>


		Alarm_flag ^= 1;
	}

}
 800155a:	e04b      	b.n	80015f4 <Time_or_Alarm_change_mode+0x334>
 800155c:	2000024e 	.word	0x2000024e
 8001560:	20000224 	.word	0x20000224
 8001564:	20000274 	.word	0x20000274
 8001568:	2000024c 	.word	0x2000024c
 800156c:	24924925 	.word	0x24924925
 8001570:	08007f14 	.word	0x08007f14
 8001574:	08007f0c 	.word	0x08007f0c
	else if (now_state.mode == ALARM_TIME_SETTING) {
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <Time_or_Alarm_change_mode+0x33c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d139      	bne.n	80015f4 <Time_or_Alarm_change_mode+0x334>
		LCD_Cursor(0, 0);
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fcf8 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 8001588:	491d      	ldr	r1, [pc, #116]	; (8001600 <Time_or_Alarm_change_mode+0x340>)
 800158a:	204e      	movs	r0, #78	; 0x4e
 800158c:	f7ff f90d 	bl	80007aa <LCD_SendString>
		LCD_Cursor(1, 11);
 8001590:	210b      	movs	r1, #11
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fcf0 	bl	8000f78 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "  AL  ");
 8001598:	491a      	ldr	r1, [pc, #104]	; (8001604 <Time_or_Alarm_change_mode+0x344>)
 800159a:	204e      	movs	r0, #78	; 0x4e
 800159c:	f7ff f905 	bl	80007aa <LCD_SendString>
		alarm_time->Ampm = buf_time->Ampm;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	819a      	strh	r2, [r3, #12]
		alarm_time->Hour1 = buf_time -> Hour1;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	801a      	strh	r2, [r3, #0]
		alarm_time->Hour2 = buf_time -> Hour2;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	805a      	strh	r2, [r3, #2]
		alarm_time->Min1 = buf_time -> Min1;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	809a      	strh	r2, [r3, #4]
		alarm_time->Min2 = buf_time -> Min2;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	80da      	strh	r2, [r3, #6]
		alarm_time->Sec1 = buf_time -> Sec1;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	811a      	strh	r2, [r3, #8]
		alarm_time->Sec2 = buf_time -> Sec2;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	815a      	strh	r2, [r3, #10]
		Alarm_flag ^= 1;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Time_or_Alarm_change_mode+0x348>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <Time_or_Alarm_change_mode+0x348>)
 80015f2:	701a      	strb	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000274 	.word	0x20000274
 8001600:	08007f24 	.word	0x08007f24
 8001604:	08007f34 	.word	0x08007f34
 8001608:	2000024f 	.word	0x2000024f

0800160c <Music_select_mode>:

//음악 선택하는 모드(더블클릭)
void Music_select_mode() {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

	if (now_state.button == UP || now_state.button == DOWN) now_state.music ^= Spring_Water;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <Music_select_mode+0x6c>)
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d003      	beq.n	8001620 <Music_select_mode+0x14>
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <Music_select_mode+0x6c>)
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d106      	bne.n	800162e <Music_select_mode+0x22>
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <Music_select_mode+0x6c>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <Music_select_mode+0x6c>)
 800162c:	709a      	strb	r2, [r3, #2]

	LCD_Cursor(0, 0);
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fca1 	bl	8000f78 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, "Music select");
 8001636:	4911      	ldr	r1, [pc, #68]	; (800167c <Music_select_mode+0x70>)
 8001638:	204e      	movs	r0, #78	; 0x4e
 800163a:	f7ff f8b6 	bl	80007aa <LCD_SendString>
	LCD_Cursor(1, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fc99 	bl	8000f78 <LCD_Cursor>
	if (now_state.music == Three_Bears) sprintf(temp, "%s", "[Three Bears] ");
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <Music_select_mode+0x6c>)
 8001648:	789b      	ldrb	r3, [r3, #2]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <Music_select_mode+0x4e>
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <Music_select_mode+0x74>)
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <Music_select_mode+0x78>)
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <Music_select_mode+0x7c>)
 8001654:	f005 fc28 	bl	8006ea8 <siprintf>
 8001658:	e008      	b.n	800166c <Music_select_mode+0x60>
	else if (now_state.music == Spring_Water) sprintf(temp, "%s", "[Spring_Water] ");
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <Music_select_mode+0x6c>)
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d104      	bne.n	800166c <Music_select_mode+0x60>
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <Music_select_mode+0x80>)
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <Music_select_mode+0x78>)
 8001666:	4808      	ldr	r0, [pc, #32]	; (8001688 <Music_select_mode+0x7c>)
 8001668:	f005 fc1e 	bl	8006ea8 <siprintf>
	LCD_SendString(LCD_ADDR, temp);
 800166c:	4906      	ldr	r1, [pc, #24]	; (8001688 <Music_select_mode+0x7c>)
 800166e:	204e      	movs	r0, #78	; 0x4e
 8001670:	f7ff f89b 	bl	80007aa <LCD_SendString>

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000274 	.word	0x20000274
 800167c:	08007f3c 	.word	0x08007f3c
 8001680:	08007f4c 	.word	0x08007f4c
 8001684:	08007f5c 	.word	0x08007f5c
 8001688:	200001c0 	.word	0x200001c0
 800168c:	08007f60 	.word	0x08007f60

08001690 <Alarm>:

//현재시간과 알람시간이 같을때 울리기
void Alarm(Clock_time* alarm_time) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	uint16_t a_ampm;
	uint16_t a_hour;
	uint16_t a_min;
	uint16_t a_sec;

	a_ampm = alarm_time->Ampm;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800169e:	81fb      	strh	r3, [r7, #14]
	a_hour = alarm_time->Hour1 << 4 | alarm_time->Hour2;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	81bb      	strh	r3, [r7, #12]
	a_min = alarm_time->Min1 << 4 | alarm_time->Min2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	b21a      	sxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	817b      	strh	r3, [r7, #10]
	a_sec = alarm_time->Sec1 << 4 | alarm_time->Sec2;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21b      	sxth	r3, r3
 80016e0:	813b      	strh	r3, [r7, #8]


	if ((Alarm_flag == 1) && (sTime.TimeFormat == a_ampm)
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <Alarm+0xb4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d128      	bne.n	800173c <Alarm+0xac>
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <Alarm+0xb8>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	89fa      	ldrh	r2, [r7, #14]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d122      	bne.n	800173c <Alarm+0xac>
			&& (sTime.Hours == a_hour) && (sTime.Minutes == a_min)
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <Alarm+0xb8>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	89ba      	ldrh	r2, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11c      	bne.n	800173c <Alarm+0xac>
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <Alarm+0xb8>)
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	b29b      	uxth	r3, r3
 8001708:	897a      	ldrh	r2, [r7, #10]
 800170a:	429a      	cmp	r2, r3
 800170c:	d116      	bne.n	800173c <Alarm+0xac>
			&& (sTime.Seconds == a_sec) && (now_state.mode == NORMAL)) {
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <Alarm+0xb8>)
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	b29b      	uxth	r3, r3
 8001714:	893a      	ldrh	r2, [r7, #8]
 8001716:	429a      	cmp	r2, r3
 8001718:	d110      	bne.n	800173c <Alarm+0xac>
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <Alarm+0xbc>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <Alarm+0xac>

		if(now_state.music == Spring_Water) Alarm_Spring_Water_paly();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <Alarm+0xbc>)
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <Alarm+0xa0>
 800172a:	f000 f813 	bl	8001754 <Alarm_Spring_Water_paly>
 800172e:	e002      	b.n	8001736 <Alarm+0xa6>
		else printf("\r\n Three_Bears_play \r\n");
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <Alarm+0xc0>)
 8001732:	f005 fb7d 	bl	8006e30 <puts>

		Alarm_flag = 0;
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <Alarm+0xb4>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	}



}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000024f 	.word	0x2000024f
 8001748:	20000224 	.word	0x20000224
 800174c:	20000274 	.word	0x20000274
 8001750:	08007f70 	.word	0x08007f70

08001754 <Alarm_Spring_Water_paly>:

//timer 10씩 커질때마다 1초

//알람 노래 Spring_Water_paly
void Alarm_Spring_Water_paly(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0




		for (int i = 0; i < music1_notes_length; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e011      	b.n	8001784 <Alarm_Spring_Water_paly+0x30>
			TIM3->ARR = music1_notes[i];
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <Alarm_Spring_Water_paly+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR4 = TIM3->ARR / 2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
			HAL_Delay(500);
 8001776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177a:	f000 fc19 	bl	8001fb0 <HAL_Delay>
		for (int i = 0; i < music1_notes_length; i++) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <Alarm_Spring_Water_paly+0x64>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4293      	cmp	r3, r2
 800178e:	dbe7      	blt.n	8001760 <Alarm_Spring_Water_paly+0xc>
		}

		 TIM3->CCR4 = 0;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
		 HAL_Delay(10);
 8001796:	200a      	movs	r0, #10
 8001798:	f000 fc0a 	bl	8001fb0 <HAL_Delay>
		 TIM3->CCR4 = TIM3->ARR / 2;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <Alarm_Spring_Water_paly+0x60>)
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40



}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	40000400 	.word	0x40000400
 80017b8:	20000094 	.word	0x20000094

080017bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_RTC_Init+0xb0>)
 80017e2:	4a26      	ldr	r2, [pc, #152]	; (800187c <MX_RTC_Init+0xb4>)
 80017e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_RTC_Init+0xb0>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <MX_RTC_Init+0xb0>)
 80017ee:	227f      	movs	r2, #127	; 0x7f
 80017f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_RTC_Init+0xb0>)
 80017f4:	22ff      	movs	r2, #255	; 0xff
 80017f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_RTC_Init+0xb0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_RTC_Init+0xb0>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_RTC_Init+0xb0>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800180a:	481b      	ldr	r0, [pc, #108]	; (8001878 <MX_RTC_Init+0xb0>)
 800180c:	f002 ff22 	bl	8004654 <HAL_RTC_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001816:	f7ff ffd1 	bl	80017bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800181a:	2312      	movs	r3, #18
 800181c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800181e:	2300      	movs	r3, #0
 8001820:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001822:	2300      	movs	r3, #0
 8001824:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_RTC_Init+0xb0>)
 800183a:	f002 ff81 	bl	8004740 <HAL_RTC_SetTime>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001844:	f7ff ffba 	bl	80017bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001848:	2304      	movs	r3, #4
 800184a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 800184c:	2306      	movs	r3, #6
 800184e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 8001850:	2309      	movs	r3, #9
 8001852:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001854:	2322      	movs	r3, #34	; 0x22
 8001856:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2201      	movs	r2, #1
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_RTC_Init+0xb0>)
 8001860:	f003 f866 	bl	8004930 <HAL_RTC_SetDate>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800186a:	f7ff ffa7 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000278 	.word	0x20000278
 800187c:	40002800 	.word	0x40002800

08001880 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	2230      	movs	r2, #48	; 0x30
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f005 fa57 	bl	8006d44 <memset>
  if(rtcHandle->Instance==RTC)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_RTC_MspInit+0x4c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018a0:	2320      	movs	r3, #32
 80018a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fd10 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80018ba:	f7ff ff7f 	bl	80017bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_RTC_MspInit+0x50>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	; 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40002800 	.word	0x40002800
 80018d0:	42470e3c 	.word	0x42470e3c

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 fafe 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM2_IRQHandler+0x10>)
 800198e:	f003 fb41 	bl	8005014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000029c 	.word	0x2000029c

0800199c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <USART3_IRQHandler+0x10>)
 80019a2:	f004 fa71 	bl	8005e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000032c 	.word	0x2000032c

080019b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b8:	f001 f9d8 	bl	8002d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e00a      	b.n	80019e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019d2:	f3af 8000 	nop.w
 80019d6:	4601      	mov	r1, r0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	b2ca      	uxtb	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbf0      	blt.n	80019d2 <_read+0x12>
	}

return len;
 80019f0:	687b      	ldr	r3, [r7, #4]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f877 	bl	8000b08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
	return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_close>:

int _close(int file)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_isatty>:

int _isatty(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	return 1;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f005 f910 	bl	8006cf0 <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20030000 	.word	0x20030000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	20000298 	.word	0x20000298
 8001b04:	20000388 	.word	0x20000388

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b52:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900-1;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b60:	f240 3283 	movw	r2, #899	; 0x383
 8001b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b74:	f003 f86c 	bl	8004c50 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b7e:	f7ff fe1d 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001b90:	f003 fc0a 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b9a:	f7ff fe0f 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_TIM2_Init+0x98>)
 8001bac:	f003 fffc 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bb6:	f7ff fe01 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000029c 	.word	0x2000029c

08001bc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <MX_TIM3_Init+0xe8>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c00:	22b3      	movs	r2, #179	; 0xb3
 8001c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c06:	2210      	movs	r2, #16
 8001c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c1e:	4823      	ldr	r0, [pc, #140]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c20:	f003 f816 	bl	8004c50 <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c2a:	f7ff fdc7 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481c      	ldr	r0, [pc, #112]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c3c:	f003 fbb4 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c46:	f7ff fdb9 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c4a:	4818      	ldr	r0, [pc, #96]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c4c:	f003 f8c0 	bl	8004dd0 <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c56:	f7ff fdb1 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	4619      	mov	r1, r3
 8001c68:	4810      	ldr	r0, [pc, #64]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c6a:	f003 ff9d 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c74:	f7ff fda2 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001c90:	f003 fac8 	bl	8005224 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c9a:	f7ff fd8f 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM3_Init+0xe4>)
 8001ca0:	f000 f83e 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	; 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200002e4 	.word	0x200002e4
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ce2:	e012      	b.n	8001d0a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x68>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10d      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_TIM_Base_MspInit+0x64>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40000400 	.word	0x40000400

08001d20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_TIM_MspPostInit+0x68>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d11d      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_TIM_MspPostInit+0x70>)
 8001d7a:	f000 fe33 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400

08001d94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART3_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001da0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dcc:	f003 ff7c 	bl	8005cc8 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f7ff fcf1 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000032c 	.word	0x2000032c
 8001de4:	40004800 	.word	0x40004800

08001de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12c      	bne.n	8001e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e54:	2307      	movs	r3, #7
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_UART_MspInit+0x8c>)
 8001e60:	f000 fdc0 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40004800 	.word	0x40004800
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020c00 	.word	0x40020c00

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e7e:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e94:	4c0b      	ldr	r4, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea2:	f7ff fe31 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f004 ff29 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7fe fe3f 	bl	8000b2c <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001eb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001ebc:	08008048 	.word	0x08008048
  ldr r2, =_sbss
 8001ec0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001ec4:	20000384 	.word	0x20000384

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 fca1 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fce8 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fcb9 	bl	80028a6 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 fc81 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000098 	.word	0x20000098
 8001f68:	200000a0 	.word	0x200000a0
 8001f6c:	2000009c 	.word	0x2000009c

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200000a0 	.word	0x200000a0
 8001f94:	20000370 	.word	0x20000370

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000370 	.word	0x20000370

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000a0 	.word	0x200000a0

08001ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e033      	b.n	8002076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fc50 	bl	80008bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	f043 0202 	orr.w	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa2a 	bl	80024a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
 8002066:	e001      	b.n	800206c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e0b2      	b.n	8002200 <HAL_ADC_Start+0x180>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d018      	beq.n	80020e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_ADC_Start+0x18c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_ADC_Start+0x190>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9a      	lsrs	r2, r3, #18
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d17a      	bne.n	80021e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	d106      	bne.n	800213e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f023 0206 	bic.w	r2, r3, #6
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_ADC_Start+0x194>)
 800214e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002158:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2b00      	cmp	r3, #0
 8002164:	d12a      	bne.n	80021bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <HAL_ADC_Start+0x198>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d015      	beq.n	800219c <HAL_ADC_Start+0x11c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_ADC_Start+0x19c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d105      	bne.n	8002186 <HAL_ADC_Start+0x106>
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_ADC_Start+0x194>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_ADC_Start+0x1a0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d136      	bne.n	80021fe <HAL_ADC_Start+0x17e>
 8002190:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_ADC_Start+0x194>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d130      	bne.n	80021fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d129      	bne.n	80021fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	e020      	b.n	80021fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_ADC_Start+0x198>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d11b      	bne.n	80021fe <HAL_ADC_Start+0x17e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d114      	bne.n	80021fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e00b      	b.n	80021fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000098 	.word	0x20000098
 8002210:	431bde83 	.word	0x431bde83
 8002214:	40012300 	.word	0x40012300
 8002218:	40012000 	.word	0x40012000
 800221c:	40012100 	.word	0x40012100
 8002220:	40012200 	.word	0x40012200

08002224 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1c>
 8002258:	2302      	movs	r3, #2
 800225a:	e113      	b.n	8002484 <HAL_ADC_ConfigChannel+0x244>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b09      	cmp	r3, #9
 800226a:	d925      	bls.n	80022b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	3b1e      	subs	r3, #30
 8002282:	2207      	movs	r2, #7
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43da      	mvns	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	400a      	ands	r2, r1
 8002290:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4403      	add	r3, r0
 80022aa:	3b1e      	subs	r3, #30
 80022ac:	409a      	lsls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	e022      	b.n	80022fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6919      	ldr	r1, [r3, #16]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	2207      	movs	r2, #7
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4403      	add	r3, r0
 80022f4:	409a      	lsls	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b06      	cmp	r3, #6
 8002304:	d824      	bhi.n	8002350 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b05      	subs	r3, #5
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b05      	subs	r3, #5
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	635a      	str	r2, [r3, #52]	; 0x34
 800234e:	e04c      	b.n	80023ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d824      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3b23      	subs	r3, #35	; 0x23
 800236a:	221f      	movs	r2, #31
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43da      	mvns	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	400a      	ands	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b23      	subs	r3, #35	; 0x23
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
 80023a0:	e023      	b.n	80023ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b41      	subs	r3, #65	; 0x41
 80023b4:	221f      	movs	r2, #31
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	400a      	ands	r2, r1
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b41      	subs	r3, #65	; 0x41
 80023de:	fa00 f203 	lsl.w	r2, r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_ADC_ConfigChannel+0x250>)
 80023ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a28      	ldr	r2, [pc, #160]	; (8002494 <HAL_ADC_ConfigChannel+0x254>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10f      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d8>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b12      	cmp	r3, #18
 80023fe:	d10b      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_ADC_ConfigChannel+0x254>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_ADC_ConfigChannel+0x23a>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_ADC_ConfigChannel+0x258>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x1f4>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b11      	cmp	r3, #17
 8002432:	d122      	bne.n	800247a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_ADC_ConfigChannel+0x258>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d111      	bne.n	800247a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_ADC_ConfigChannel+0x25c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_ADC_ConfigChannel+0x260>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9a      	lsrs	r2, r3, #18
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	40012000 	.word	0x40012000
 8002498:	10000012 	.word	0x10000012
 800249c:	20000098 	.word	0x20000098
 80024a0:	431bde83 	.word	0x431bde83

080024a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <ADC_Init+0x1f0>)
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	021a      	lsls	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <ADC_Init+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800256c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e00f      	b.n	80025a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0202 	bic.w	r2, r2, #2
 80025b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
 80025bc:	005a      	lsls	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	3b01      	subs	r3, #1
 80025fc:	035a      	lsls	r2, r3, #13
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	e007      	b.n	8002618 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002616:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	3b01      	subs	r3, #1
 8002634:	051a      	lsls	r2, r3, #20
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800264c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265a:	025a      	lsls	r2, r3, #9
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	029a      	lsls	r2, r3, #10
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012300 	.word	0x40012300
 8002698:	0f000001 	.word	0x0f000001

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff3e 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff31 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fb64 	bl	8001f98 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e052      	b.n	8002996 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0216 	bic.w	r2, r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <HAL_DMA_Abort+0x62>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0208 	bic.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	e013      	b.n	800296a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7ff fb29 	bl	8001f98 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d90c      	bls.n	800296a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e015      	b.n	8002996 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e4      	bne.n	8002942 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	223f      	movs	r2, #63	; 0x3f
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d004      	beq.n	80029bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e00c      	b.n	80029d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2205      	movs	r2, #5
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e177      	b.n	8002cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8166 	bne.w	8002cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80c0 	beq.w	8002cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a65      	ldr	r2, [pc, #404]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a61      	ldr	r2, [pc, #388]	; (8002d0c <HAL_GPIO_Init+0x328>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_GPIO_Init+0x32c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d037      	beq.n	8002c22 <HAL_GPIO_Init+0x23e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a57      	ldr	r2, [pc, #348]	; (8002d14 <HAL_GPIO_Init+0x330>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_GPIO_Init+0x23a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <HAL_GPIO_Init+0x334>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x236>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a55      	ldr	r2, [pc, #340]	; (8002d1c <HAL_GPIO_Init+0x338>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x232>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_GPIO_Init+0x33c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x22e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_GPIO_Init+0x340>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x22a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_GPIO_Init+0x344>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x226>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_GPIO_Init+0x348>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x222>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_GPIO_Init+0x34c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x21e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	; (8002d34 <HAL_GPIO_Init+0x350>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x21a>
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	e012      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e010      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e00e      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00c      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e00a      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0e:	2305      	movs	r3, #5
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_GPIO_Init+0x328>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c66:	4a34      	ldr	r2, [pc, #208]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c90:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_GPIO_Init+0x354>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f ae84 	bls.w	8002a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40022400 	.word	0x40022400
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ffbe 	bl	8000d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e12b      	b.n	8003006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd fe58 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e00:	f001 fa40 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8002e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a81      	ldr	r2, [pc, #516]	; (8003010 <HAL_I2C_Init+0x274>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d807      	bhi.n	8002e20 <HAL_I2C_Init+0x84>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a80      	ldr	r2, [pc, #512]	; (8003014 <HAL_I2C_Init+0x278>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e006      	b.n	8002e2e <HAL_I2C_Init+0x92>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a7d      	ldr	r2, [pc, #500]	; (8003018 <HAL_I2C_Init+0x27c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0e7      	b.n	8003006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4a78      	ldr	r2, [pc, #480]	; (800301c <HAL_I2C_Init+0x280>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0c9b      	lsrs	r3, r3, #18
 8002e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a6a      	ldr	r2, [pc, #424]	; (8003010 <HAL_I2C_Init+0x274>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d802      	bhi.n	8002e70 <HAL_I2C_Init+0xd4>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	e009      	b.n	8002e84 <HAL_I2C_Init+0xe8>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_I2C_Init+0x284>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	3301      	adds	r3, #1
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	495c      	ldr	r1, [pc, #368]	; (8003010 <HAL_I2C_Init+0x274>)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d819      	bhi.n	8002ed8 <HAL_I2C_Init+0x13c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e59      	subs	r1, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb2:	1c59      	adds	r1, r3, #1
 8002eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eb8:	400b      	ands	r3, r1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_I2C_Init+0x138>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e59      	subs	r1, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed2:	e051      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e04f      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d111      	bne.n	8002f04 <HAL_I2C_Init+0x168>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e012      	b.n	8002f2a <HAL_I2C_Init+0x18e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e58      	subs	r0, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x196>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e022      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10e      	bne.n	8002f58 <HAL_I2C_Init+0x1bc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e58      	subs	r0, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	440b      	add	r3, r1
 8002f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	0099      	lsls	r1, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6809      	ldr	r1, [r1, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6911      	ldr	r1, [r2, #16]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	000186a0 	.word	0x000186a0
 8003014:	001e847f 	.word	0x001e847f
 8003018:	003d08ff 	.word	0x003d08ff
 800301c:	431bde83 	.word	0x431bde83
 8003020:	10624dd3 	.word	0x10624dd3

08003024 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
 8003034:	4613      	mov	r3, r2
 8003036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7fe ffae 	bl	8001f98 <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	f040 80e0 	bne.w	800320c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	4970      	ldr	r1, [pc, #448]	; (8003218 <HAL_I2C_Master_Transmit+0x1f4>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa92 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e0d3      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_Master_Transmit+0x50>
 8003070:	2302      	movs	r3, #2
 8003072:	e0cc      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d007      	beq.n	800309a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2210      	movs	r2, #16
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_I2C_Master_Transmit+0x1f8>)
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f9ca 	bl	800347c <I2C_MasterRequestWrite>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e08d      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003108:	e066      	b.n	80031d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fb0c 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e06b      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11b      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x188>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d017      	beq.n	80031ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	6a39      	ldr	r1, [r7, #32]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fafc 	bl	80037ae <I2C_WaitOnBTFFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01a      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d194      	bne.n	800310a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	00100002 	.word	0x00100002
 800321c:	ffff0000 	.word	0xffff0000

08003220 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7fe feb2 	bl	8001f98 <HAL_GetTick>
 8003234:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 8111 	bne.w	800346a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4988      	ldr	r1, [pc, #544]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f994 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e104      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_IsDeviceReady+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0fd      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2224      	movs	r2, #36	; 0x24
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a70      	ldr	r2, [pc, #448]	; (8003478 <HAL_I2C_IsDeviceReady+0x258>)
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f952 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d103      	bne.n	80032fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0b6      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800330c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe fe43 	bl	8001f98 <HAL_GetTick>
 8003312:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003342:	e025      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fe fe28 	bl	8001f98 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <HAL_I2C_IsDeviceReady+0x13a>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	22a0      	movs	r2, #160	; 0xa0
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2ba0      	cmp	r3, #160	; 0xa0
 800339a:	d005      	beq.n	80033a8 <HAL_I2C_IsDeviceReady+0x188>
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_I2C_IsDeviceReady+0x188>
 80033a2:	7dbb      	ldrb	r3, [r7, #22]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0cd      	beq.n	8003344 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d129      	bne.n	8003412 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2319      	movs	r3, #25
 80033ea:	2201      	movs	r2, #1
 80033ec:	4921      	ldr	r1, [pc, #132]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8c6 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e036      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e02c      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2319      	movs	r3, #25
 8003432:	2201      	movs	r2, #1
 8003434:	490f      	ldr	r1, [pc, #60]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f8a2 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e012      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3301      	adds	r3, #1
 800344a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	f4ff af32 	bcc.w	80032ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000

0800347c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	460b      	mov	r3, r1
 800348a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d006      	beq.n	80034a6 <I2C_MasterRequestWrite+0x2a>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d003      	beq.n	80034a6 <I2C_MasterRequestWrite+0x2a>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a4:	d108      	bne.n	80034b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00b      	b.n	80034d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	2b12      	cmp	r3, #18
 80034be:	d107      	bne.n	80034d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f84f 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f6:	d103      	bne.n	8003500 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e035      	b.n	8003570 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350c:	d108      	bne.n	8003520 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800351c:	611a      	str	r2, [r3, #16]
 800351e:	e01b      	b.n	8003558 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003520:	897b      	ldrh	r3, [r7, #10]
 8003522:	11db      	asrs	r3, r3, #7
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0306 	and.w	r3, r3, #6
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f063 030f 	orn	r3, r3, #15
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <I2C_MasterRequestWrite+0xfc>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f875 	bl	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e010      	b.n	8003570 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <I2C_MasterRequestWrite+0x100>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f865 	bl	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	00010008 	.word	0x00010008
 800357c:	00010002 	.word	0x00010002

08003580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	e025      	b.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d021      	beq.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe fcfd 	bl	8001f98 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d116      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e023      	b.n	8003626 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10d      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	e00c      	b.n	800361e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d0b6      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363c:	e051      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	d123      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003666:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e046      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d021      	beq.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fc7b 	bl	8001f98 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e020      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10c      	bne.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e00b      	b.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d18d      	bne.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003738:	e02d      	b.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f878 	bl	8003830 <I2C_IsAcknowledgeFailed>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e02d      	b.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d021      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fc21 	bl	8001f98 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d116      	bne.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d1ca      	bne.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ba:	e02d      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f837 	bl	8003830 <I2C_IsAcknowledgeFailed>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e02d      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d021      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fe fbe0 	bl	8001f98 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d1ca      	bne.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d11b      	bne.n	8003880 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003850:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0204 	orr.w	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d129      	bne.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0210 	bic.w	r2, r2, #16
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	d12a      	bne.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003940:	89fb      	ldrh	r3, [r7, #14]
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b29a      	uxth	r2, r3
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	4313      	orrs	r3, r2
 8003950:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	89fa      	ldrh	r2, [r7, #14]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x94>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b0:	f7fe faf2 	bl	8001f98 <HAL_GetTick>
 80039b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b6:	e009      	b.n	80039cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b8:	f7fe faee 	bl	8001f98 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c6:	d901      	bls.n	80039cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e01f      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d1ee      	bne.n	80039b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e0:	f7fe fada 	bl	8001f98 <HAL_GetTick>
 80039e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e6:	e009      	b.n	80039fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e8:	f7fe fad6 	bl	8001f98 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f6:	d901      	bls.n	80039fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e007      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a08:	d1ee      	bne.n	80039e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	420e0040 	.word	0x420e0040
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	420e0044 	.word	0x420e0044

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e267      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d075      	beq.n	8003b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d00c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d112      	bne.n	8003a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5a:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a66:	d10b      	bne.n	8003a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	4b7e      	ldr	r3, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05b      	beq.n	8003b2c <HAL_RCC_OscConfig+0x108>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d157      	bne.n	8003b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e242      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x74>
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xb0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x98>
 8003aa2:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6f      	ldr	r2, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6c      	ldr	r2, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xb0>
 8003abc:	4b69      	ldr	r3, [pc, #420]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fa5c 	bl	8001f98 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fa58 	bl	8001f98 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e207      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xc0>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fa48 	bl	8001f98 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fa44 	bl	8001f98 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1f3      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0xe8>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d063      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b52:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d116      	bne.n	8003b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x152>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e1c7      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4937      	ldr	r1, [pc, #220]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	e03a      	b.n	8003c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b94:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x244>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fe f9fd 	bl	8001f98 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fe f9f9 	bl	8001f98 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1a8      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
 8003bd4:	e015      	b.n	8003c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x244>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe f9dc 	bl	8001f98 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be4:	f7fe f9d8 	bl	8001f98 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e187      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d036      	beq.n	8003c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCC_OscConfig+0x248>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fe f9bc 	bl	8001f98 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c24:	f7fe f9b8 	bl	8001f98 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e167      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x200>
 8003c42:	e01b      	b.n	8003c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_OscConfig+0x248>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe f9a5 	bl	8001f98 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e00e      	b.n	8003c70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe f9a1 	bl	8001f98 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d907      	bls.n	8003c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e150      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
 8003c64:	40023800 	.word	0x40023800
 8003c68:	42470000 	.word	0x42470000
 8003c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ea      	bne.n	8003c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8097 	beq.w	8003db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8e:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10f      	bne.n	8003cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	4b7d      	ldr	r3, [pc, #500]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a7c      	ldr	r2, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b77      	ldr	r3, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc6:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe f961 	bl	8001f98 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe f95d 	bl	8001f98 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e10c      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2ea>
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a63      	ldr	r2, [pc, #396]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e01c      	b.n	8003d48 <HAL_RCC_OscConfig+0x324>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x30c>
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5e      	ldr	r2, [pc, #376]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a5b      	ldr	r2, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0x324>
 8003d30:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	4b55      	ldr	r3, [pc, #340]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 0304 	bic.w	r3, r3, #4
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fe f922 	bl	8001f98 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe f91e 	bl	8001f98 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e0cb      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RCC_OscConfig+0x334>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f90c 	bl	8001f98 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fe f908 	bl	8001f98 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0b5      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ee      	bne.n	8003d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a1 	beq.w	8003f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d05c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d141      	bne.n	8003e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f8dc 	bl	8001f98 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe f8d8 	bl	8001f98 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e087      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	491b      	ldr	r1, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fe f8b1 	bl	8001f98 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fe f8ad 	bl	8001f98 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e05c      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x416>
 8003e58:	e054      	b.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fe f89a 	bl	8001f98 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f896 	bl	8001f98 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e045      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x444>
 8003e86:	e03d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e038      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x4ec>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d028      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d121      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d111      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0cc      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d90c      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b65      	ldr	r3, [pc, #404]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0b8      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	494d      	ldr	r1, [pc, #308]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d044      	beq.n	8004034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d119      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e067      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f023 0203 	bic.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4934      	ldr	r1, [pc, #208]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004004:	f7fd ffc8 	bl	8001f98 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	e00a      	b.n	8004022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400c:	f7fd ffc4 	bl	8001f98 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e04f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 020c 	and.w	r2, r3, #12
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	429a      	cmp	r2, r3
 8004032:	d1eb      	bne.n	800400c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d20c      	bcs.n	800405c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4916      	ldr	r1, [pc, #88]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	490e      	ldr	r1, [pc, #56]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	490a      	ldr	r1, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x1c0>)
 80040ac:	5ccb      	ldrb	r3, [r1, r3]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd ff28 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023c00 	.word	0x40023c00
 80040d0:	40023800 	.word	0x40023800
 80040d4:	08007f88 	.word	0x08007f88
 80040d8:	20000098 	.word	0x20000098
 80040dc:	2000009c 	.word	0x2000009c

080040e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b090      	sub	sp, #64	; 0x40
 80040e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
 80040ec:	2300      	movs	r3, #0
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f0:	2300      	movs	r3, #0
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d00d      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x40>
 8004104:	2b08      	cmp	r3, #8
 8004106:	f200 80a1 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x16c>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x34>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d003      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x3a>
 8004112:	e09b      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004118:	e09b      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411a:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_GetSysClockFreq+0x188>)
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800411e:	e098      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004120:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d028      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	2200      	movs	r2, #0
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	627a      	str	r2, [r7, #36]	; 0x24
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004148:	2100      	movs	r1, #0
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_GetSysClockFreq+0x188>)
 800414c:	fb03 f201 	mul.w	r2, r3, r1
 8004150:	2300      	movs	r3, #0
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	4413      	add	r3, r2
 8004158:	4a43      	ldr	r2, [pc, #268]	; (8004268 <HAL_RCC_GetSysClockFreq+0x188>)
 800415a:	fba0 1202 	umull	r1, r2, r0, r2
 800415e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004160:	460a      	mov	r2, r1
 8004162:	62ba      	str	r2, [r7, #40]	; 0x28
 8004164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004166:	4413      	add	r3, r2
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	2200      	movs	r2, #0
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	61fa      	str	r2, [r7, #28]
 8004172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004176:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800417a:	f7fc f891 	bl	80002a0 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4613      	mov	r3, r2
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004186:	e053      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4b35      	ldr	r3, [pc, #212]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	2200      	movs	r2, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	617a      	str	r2, [r7, #20]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800419a:	f04f 0b00 	mov.w	fp, #0
 800419e:	4652      	mov	r2, sl
 80041a0:	465b      	mov	r3, fp
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	0159      	lsls	r1, r3, #5
 80041ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b0:	0150      	lsls	r0, r2, #5
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	ebb2 080a 	subs.w	r8, r2, sl
 80041ba:	eb63 090b 	sbc.w	r9, r3, fp
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041d2:	ebb2 0408 	subs.w	r4, r2, r8
 80041d6:	eb63 0509 	sbc.w	r5, r3, r9
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	00eb      	lsls	r3, r5, #3
 80041e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e8:	00e2      	lsls	r2, r4, #3
 80041ea:	4614      	mov	r4, r2
 80041ec:	461d      	mov	r5, r3
 80041ee:	eb14 030a 	adds.w	r3, r4, sl
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	eb45 030b 	adc.w	r3, r5, fp
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004206:	4629      	mov	r1, r5
 8004208:	028b      	lsls	r3, r1, #10
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004210:	4621      	mov	r1, r4
 8004212:	028a      	lsls	r2, r1, #10
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	2200      	movs	r2, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	60fa      	str	r2, [r7, #12]
 8004220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004224:	f7fc f83c 	bl	80002a0 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_GetSysClockFreq+0x180>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetSysClockFreq+0x184>)
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004254:	4618      	mov	r0, r3
 8004256:	3740      	adds	r7, #64	; 0x40
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	00f42400 	.word	0x00f42400
 8004268:	017d7840 	.word	0x017d7840

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000098 	.word	0x20000098

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a9b      	lsrs	r3, r3, #10
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	08007f98 	.word	0x08007f98

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b0:	f7ff ffdc 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0b5b      	lsrs	r3, r3, #13
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	08007f98 	.word	0x08007f98

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d075      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004308:	4b91      	ldr	r3, [pc, #580]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430e:	f7fd fe43 	bl	8001f98 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004316:	f7fd fe3f 	bl	8001f98 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e189      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004328:	4b8a      	ldr	r3, [pc, #552]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	019a      	lsls	r2, r3, #6
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	071b      	lsls	r3, r3, #28
 800434c:	4981      	ldr	r1, [pc, #516]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01f      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004360:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004366:	0f1b      	lsrs	r3, r3, #28
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	019a      	lsls	r2, r3, #6
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	431a      	orrs	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	071b      	lsls	r3, r3, #28
 8004380:	4974      	ldr	r1, [pc, #464]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004388:	4b72      	ldr	r3, [pc, #456]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	f023 021f 	bic.w	r2, r3, #31
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	3b01      	subs	r3, #1
 8004398:	496e      	ldr	r1, [pc, #440]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	019a      	lsls	r2, r3, #6
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	071b      	lsls	r3, r3, #28
 80043c0:	4964      	ldr	r1, [pc, #400]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ce:	f7fd fde3 	bl	8001f98 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043d6:	f7fd fddf 	bl	8001f98 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e129      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e8:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d079      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800440c:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004412:	f7fd fdc1 	bl	8001f98 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800441a:	f7fd fdbd 	bl	8001f98 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e107      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800442c:	4b49      	ldr	r3, [pc, #292]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004438:	d0ef      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	0f1b      	lsrs	r3, r3, #28
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	431a      	orrs	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	071b      	lsls	r3, r3, #28
 8004466:	493b      	ldr	r1, [pc, #236]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	3b01      	subs	r3, #1
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	4934      	ldr	r1, [pc, #208]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004494:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	0e1b      	lsrs	r3, r3, #24
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	071b      	lsls	r3, r3, #28
 80044b4:	4927      	ldr	r1, [pc, #156]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	4922      	ldr	r1, [pc, #136]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fd fd5e 	bl	8001f98 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044e0:	f7fd fd5a 	bl	8001f98 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0a4      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fe:	d1ef      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 808b 	beq.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a0f      	ldr	r2, [pc, #60]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004534:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004536:	f7fd fd2f 	bl	8001f98 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800453c:	e010      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd fd2b 	bl	8001f98 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d909      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e075      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004550:	42470068 	.word	0x42470068
 8004554:	40023800 	.word	0x40023800
 8004558:	42470070 	.word	0x42470070
 800455c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004560:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0e8      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004574:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d02f      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d028      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045a0:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d114      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fd fcf1 	bl	8001f98 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fced 	bl	8001f98 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e035      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e8:	d10d      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	4912      	ldr	r1, [pc, #72]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
 8004604:	e005      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800460c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	490a      	ldr	r1, [pc, #40]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004620:	4313      	orrs	r3, r2
 8004622:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004638:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40007000 	.word	0x40007000
 8004648:	40023800 	.word	0x40023800
 800464c:	42470e40 	.word	0x42470e40
 8004650:	424711e0 	.word	0x424711e0

08004654 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e066      	b.n	8004738 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7f5b      	ldrb	r3, [r3, #29]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fd f900 	bl	8001880 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	22ca      	movs	r2, #202	; 0xca
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2253      	movs	r2, #83	; 0x53
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa45 	bl	8004b26 <RTC_EnterInitMode>
 800469c:	4603      	mov	r3, r0
 800469e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d12c      	bne.n	8004700 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68d2      	ldr	r2, [r2, #12]
 80046e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6919      	ldr	r1, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	041a      	lsls	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa4c 	bl	8004b94 <RTC_ExitInitMode>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d113      	bne.n	800472e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	22ff      	movs	r2, #255	; 0xff
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7f1b      	ldrb	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_RTC_SetTime+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e087      	b.n	800486c <HAL_RTC_SetTime+0x12c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d126      	bne.n	80047bc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa29 	bl	8004bde <RTC_ByteToBcd2>
 800478c:	4603      	mov	r3, r0
 800478e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa22 	bl	8004bde <RTC_ByteToBcd2>
 800479a:	4603      	mov	r3, r0
 800479c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800479e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	789b      	ldrb	r3, [r3, #2]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa1a 	bl	8004bde <RTC_ByteToBcd2>
 80047aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e018      	b.n	80047ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80047e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	22ca      	movs	r2, #202	; 0xca
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2253      	movs	r2, #83	; 0x53
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f991 	bl	8004b26 <RTC_EnterInitMode>
 8004804:	4603      	mov	r3, r0
 8004806:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d120      	bne.n	8004850 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004818:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800481c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800482c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6899      	ldr	r1, [r3, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f9a4 	bl	8004b94 <RTC_ExitInitMode>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	22ff      	movs	r2, #255	; 0xff
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]

  return status;
 800486a:	7cfb      	ldrb	r3, [r7, #19]
}
 800486c:	4618      	mov	r0, r3
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0d9b      	lsrs	r3, r3, #22
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11a      	bne.n	8004926 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f98f 	bl	8004c18 <RTC_Bcd2ToByte>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f986 	bl	8004c18 <RTC_Bcd2ToByte>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	789b      	ldrb	r3, [r3, #2]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f97d 	bl	8004c18 <RTC_Bcd2ToByte>
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	7f1b      	ldrb	r3, [r3, #28]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_RTC_SetDate+0x1c>
 8004948:	2302      	movs	r3, #2
 800494a:	e071      	b.n	8004a30 <HAL_RTC_SetDate+0x100>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2202      	movs	r2, #2
 8004956:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10e      	bne.n	800497c <HAL_RTC_SetDate+0x4c>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	f023 0310 	bic.w	r3, r3, #16
 8004972:	b2db      	uxtb	r3, r3
 8004974:	330a      	adds	r3, #10
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11c      	bne.n	80049bc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f929 	bl	8004bde <RTC_ByteToBcd2>
 800498c:	4603      	mov	r3, r0
 800498e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f922 	bl	8004bde <RTC_ByteToBcd2>
 800499a:	4603      	mov	r3, r0
 800499c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800499e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	789b      	ldrb	r3, [r3, #2]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f91a 	bl	8004bde <RTC_ByteToBcd2>
 80049aa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049ac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e00e      	b.n	80049da <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	78db      	ldrb	r3, [r3, #3]
 80049c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049c8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	22ca      	movs	r2, #202	; 0xca
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2253      	movs	r2, #83	; 0x53
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f89b 	bl	8004b26 <RTC_EnterInitMode>
 80049f0:	4603      	mov	r3, r0
 80049f2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10c      	bne.n	8004a14 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8c2 	bl	8004b94 <RTC_ExitInitMode>
 8004a10:	4603      	mov	r3, r0
 8004a12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]

  return status;
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	0b5b      	lsrs	r3, r3, #13
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11a      	bne.n	8004acc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	78db      	ldrb	r3, [r3, #3]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f8bc 	bl	8004c18 <RTC_Bcd2ToByte>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f8b3 	bl	8004c18 <RTC_Bcd2ToByte>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	789b      	ldrb	r3, [r3, #2]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f8aa 	bl	8004c18 <RTC_Bcd2ToByte>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004af0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af2:	f7fd fa51 	bl	8001f98 <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004af8:	e009      	b.n	8004b0e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004afa:	f7fd fa4d 	bl	8001f98 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	d901      	bls.n	8004b0e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e007      	b.n	8004b1e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ee      	beq.n	8004afa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d122      	bne.n	8004b8a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b54:	f7fd fa20 	bl	8001f98 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b5a:	e00c      	b.n	8004b76 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b5c:	f7fd fa1c 	bl	8001f98 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6a:	d904      	bls.n	8004b76 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <RTC_EnterInitMode+0x64>
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d1e8      	bne.n	8004b5c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff89 	bl	8004ad6 <HAL_RTC_WaitForSynchro>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	4603      	mov	r3, r0
 8004be6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004bec:	e005      	b.n	8004bfa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	3b0a      	subs	r3, #10
 8004bf8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d8f6      	bhi.n	8004bee <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b2db      	uxtb	r3, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	4413      	add	r3, r2
 8004c42:	b2db      	uxtb	r3, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e041      	b.n	8004ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd f81c 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 fc7a 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e04e      	b.n	8004da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d01d      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d111      	bne.n	8004d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d010      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	e007      	b.n	8004da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40001800 	.word	0x40001800

08004dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f839 	bl	8004e6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fbba 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x24>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e022      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x3e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e015      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x58>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e008      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e07c      	b.n	8004ff0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x92>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fe10 	bl	8005b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <HAL_TIM_PWM_Start+0x174>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_PWM_Start+0xcc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <HAL_TIM_PWM_Start+0x178>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_PWM_Start+0xd0>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_TIM_PWM_Start+0xd2>
 8004f54:	2300      	movs	r3, #0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_TIM_PWM_Start+0x174>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7c:	d01d      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_TIM_PWM_Start+0x17c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_TIM_PWM_Start+0x180>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_TIM_PWM_Start+0x184>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <HAL_TIM_PWM_Start+0x178>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a18      	ldr	r2, [pc, #96]	; (800500c <HAL_TIM_PWM_Start+0x188>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIM_PWM_Start+0x136>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	; (8005010 <HAL_TIM_PWM_Start+0x18c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d111      	bne.n	8004fde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d010      	beq.n	8004fee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	e007      	b.n	8004fee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40014000 	.word	0x40014000
 8005010:	40001800 	.word	0x40001800

08005014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0202 	mvn.w	r2, #2
 8005040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa77 	bl	800554a <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa69 	bl	8005536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fa7a 	bl	800555e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b04      	cmp	r3, #4
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0204 	mvn.w	r2, #4
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa4d 	bl	800554a <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa3f 	bl	8005536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fa50 	bl	800555e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa23 	bl	800554a <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa15 	bl	8005536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa26 	bl	800555e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b10      	cmp	r3, #16
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0210 	mvn.w	r2, #16
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9f9 	bl	800554a <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9eb 	bl	8005536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9fc 	bl	800555e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0201 	mvn.w	r2, #1
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fe6e 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fd78 	bl	8005cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9c1 	bl	8005572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b20      	cmp	r3, #32
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0220 	mvn.w	r2, #32
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fd42 	bl	8005ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800523e:	2302      	movs	r3, #2
 8005240:	e0ae      	b.n	80053a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	f200 809f 	bhi.w	8005390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800528d 	.word	0x0800528d
 800525c:	08005391 	.word	0x08005391
 8005260:	08005391 	.word	0x08005391
 8005264:	08005391 	.word	0x08005391
 8005268:	080052cd 	.word	0x080052cd
 800526c:	08005391 	.word	0x08005391
 8005270:	08005391 	.word	0x08005391
 8005274:	08005391 	.word	0x08005391
 8005278:	0800530f 	.word	0x0800530f
 800527c:	08005391 	.word	0x08005391
 8005280:	08005391 	.word	0x08005391
 8005284:	08005391 	.word	0x08005391
 8005288:	0800534f 	.word	0x0800534f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa18 	bl	80056c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0208 	orr.w	r2, r2, #8
 80052a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0204 	bic.w	r2, r2, #4
 80052b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	619a      	str	r2, [r3, #24]
      break;
 80052ca:	e064      	b.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fa68 	bl	80057a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6999      	ldr	r1, [r3, #24]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	619a      	str	r2, [r3, #24]
      break;
 800530c:	e043      	b.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fabd 	bl	8005894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0208 	orr.w	r2, r2, #8
 8005328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0204 	bic.w	r2, r2, #4
 8005338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	61da      	str	r2, [r3, #28]
      break;
 800534c:	e023      	b.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fb11 	bl	800597c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69d9      	ldr	r1, [r3, #28]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	021a      	lsls	r2, r3, #8
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	61da      	str	r2, [r3, #28]
      break;
 800538e:	e002      	b.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
      break;
 8005394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIM_ConfigClockSource+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e0b4      	b.n	800552e <HAL_TIM_ConfigClockSource+0x186>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fc:	d03e      	beq.n	800547c <HAL_TIM_ConfigClockSource+0xd4>
 80053fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005402:	f200 8087 	bhi.w	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	f000 8086 	beq.w	800551a <HAL_TIM_ConfigClockSource+0x172>
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005412:	d87f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b70      	cmp	r3, #112	; 0x70
 8005416:	d01a      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xa6>
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d87b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b60      	cmp	r3, #96	; 0x60
 800541e:	d050      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d877      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b50      	cmp	r3, #80	; 0x50
 8005426:	d03c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d873      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d058      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d86f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b30      	cmp	r3, #48	; 0x30
 8005436:	d064      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d86b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b20      	cmp	r3, #32
 800543e:	d060      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005440:	2b20      	cmp	r3, #32
 8005442:	d867      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d05c      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d05a      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	e062      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f000 fb5d 	bl	8005b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	609a      	str	r2, [r3, #8]
      break;
 800547a:	e04f      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6899      	ldr	r1, [r3, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f000 fb46 	bl	8005b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800549e:	609a      	str	r2, [r3, #8]
      break;
 80054a0:	e03c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 faba 	bl	8005a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2150      	movs	r1, #80	; 0x50
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fb13 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 80054c0:	e02c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 fad9 	bl	8005a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2160      	movs	r1, #96	; 0x60
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb03 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 80054e0:	e01c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 fa9a 	bl	8005a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 faf3 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005500:	e00c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f000 faea 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005512:	e003      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e000      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800551a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <TIM_Base_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3d      	ldr	r2, [pc, #244]	; (80056a0 <TIM_Base_SetConfig+0x118>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <TIM_Base_SetConfig+0x11c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <TIM_Base_SetConfig+0x120>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <TIM_Base_SetConfig+0x124>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	; (800569c <TIM_Base_SetConfig+0x114>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d027      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <TIM_Base_SetConfig+0x118>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d023      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <TIM_Base_SetConfig+0x11c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <TIM_Base_SetConfig+0x120>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a29      	ldr	r2, [pc, #164]	; (80056ac <TIM_Base_SetConfig+0x124>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <TIM_Base_SetConfig+0x128>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <TIM_Base_SetConfig+0x12c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <TIM_Base_SetConfig+0x130>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a25      	ldr	r2, [pc, #148]	; (80056bc <TIM_Base_SetConfig+0x134>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <TIM_Base_SetConfig+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <TIM_Base_SetConfig+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <TIM_Base_SetConfig+0x114>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0xf8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <TIM_Base_SetConfig+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d103      	bne.n	8005688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	615a      	str	r2, [r3, #20]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40010400 	.word	0x40010400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800
 80056bc:	40001800 	.word	0x40001800
 80056c0:	40001c00 	.word	0x40001c00
 80056c4:	40002000 	.word	0x40002000

080056c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f023 0302 	bic.w	r3, r3, #2
 8005710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <TIM_OC1_SetConfig+0xd8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC1_SetConfig+0x64>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <TIM_OC1_SetConfig+0xdc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10c      	bne.n	8005746 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0308 	bic.w	r3, r3, #8
 8005732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <TIM_OC1_SetConfig+0xd8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC1_SetConfig+0x8e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <TIM_OC1_SetConfig+0xdc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d111      	bne.n	800577a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400

080057a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a22      	ldr	r2, [pc, #136]	; (800588c <TIM_OC2_SetConfig+0xe4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC2_SetConfig+0x68>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <TIM_OC2_SetConfig+0xe8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10d      	bne.n	800582c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a17      	ldr	r2, [pc, #92]	; (800588c <TIM_OC2_SetConfig+0xe4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC2_SetConfig+0x94>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a16      	ldr	r2, [pc, #88]	; (8005890 <TIM_OC2_SetConfig+0xe8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d113      	bne.n	8005864 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <TIM_OC3_SetConfig+0xe0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC3_SetConfig+0x66>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a20      	ldr	r2, [pc, #128]	; (8005978 <TIM_OC3_SetConfig+0xe4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10d      	bne.n	8005916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <TIM_OC3_SetConfig+0xe0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x92>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <TIM_OC3_SetConfig+0xe4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d113      	bne.n	800594e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <TIM_OC4_SetConfig+0xa4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC4_SetConfig+0x68>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <TIM_OC4_SetConfig+0xa8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d109      	bne.n	80059f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	019b      	lsls	r3, r3, #6
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f023 0201 	bic.w	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f023 030a 	bic.w	r3, r3, #10
 8005a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0210 	bic.w	r2, r3, #16
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f043 0307 	orr.w	r3, r3, #7
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	2201      	movs	r2, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	401a      	ands	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	fa01 f303 	lsl.w	r3, r1, r3
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e05a      	b.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d01d      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10c      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800

08005ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e03f      	b.n	8005d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fc f87a 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fd7b 	bl	8006808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d17c      	bne.n	8005e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_UART_Transmit+0x2c>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e075      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x3e>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e06e      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2221      	movs	r2, #33	; 0x21
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db6:	f7fc f8ef 	bl	8001f98 <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d108      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e003      	b.n	8005dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005df4:	e02a      	b.n	8005e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 faf9 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e036      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1cf      	bne.n	8005df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fac9 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b0ba      	sub	sp, #232	; 0xe8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_UART_IRQHandler+0x66>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fbd3 	bl	8006692 <UART_Receive_IT>
      return;
 8005eec:	e256      	b.n	800639c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 80de 	beq.w	80060b4 <HAL_UART_IRQHandler+0x22c>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80d1 	beq.w	80060b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_UART_IRQHandler+0xae>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00b      	beq.n	8005f5a <HAL_UART_IRQHandler+0xd2>
 8005f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_UART_IRQHandler+0xf6>
 8005f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <HAL_UART_IRQHandler+0x126>
 8005f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f043 0208 	orr.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 81ed 	beq.w	8006392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x14e>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb5e 	bl	8006692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <HAL_UART_IRQHandler+0x17a>
 8005ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04f      	beq.n	80060a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa66 	bl	80064d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d141      	bne.n	800609a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800602c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800604e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800605a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1d9      	bne.n	8006016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d013      	beq.n	8006092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	4a7d      	ldr	r2, [pc, #500]	; (8006264 <HAL_UART_IRQHandler+0x3dc>)
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	4618      	mov	r0, r3
 8006078:	f7fc fc91 	bl	800299e <HAL_DMA_Abort_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e00e      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f99a 	bl	80063cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	e00a      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f996 	bl	80063cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	e006      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f992 	bl	80063cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060ae:	e170      	b.n	8006392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	bf00      	nop
    return;
 80060b2:	e16e      	b.n	8006392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 814a 	bne.w	8006352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8143 	beq.w	8006352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 813c 	beq.w	8006352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	f040 80b4 	bne.w	8006268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800610c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8140 	beq.w	8006396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800611a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611e:	429a      	cmp	r2, r3
 8006120:	f080 8139 	bcs.w	8006396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800612a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	f000 8088 	beq.w	800624a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800616a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1d9      	bne.n	800613a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e1      	bne.n	8006186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800622c:	65ba      	str	r2, [r7, #88]	; 0x58
 800622e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e3      	bne.n	8006208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	4618      	mov	r0, r3
 8006246:	f7fc fb3a 	bl	80028be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006252:	b29b      	uxth	r3, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	b29b      	uxth	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8c0 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006260:	e099      	b.n	8006396 <HAL_UART_IRQHandler+0x50e>
 8006262:	bf00      	nop
 8006264:	0800659b 	.word	0x0800659b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 808b 	beq.w	800639a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8086 	beq.w	800639a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062b2:	647a      	str	r2, [r7, #68]	; 0x44
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e3      	bne.n	800628e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ea:	633a      	str	r2, [r7, #48]	; 0x30
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e3      	bne.n	80062c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60fb      	str	r3, [r7, #12]
   return(result);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006330:	61fa      	str	r2, [r7, #28]
 8006332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	617b      	str	r3, [r7, #20]
   return(result);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e3      	bne.n	800630c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f848 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006350:	e023      	b.n	800639a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_UART_IRQHandler+0x4ea>
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f929 	bl	80065c2 <UART_Transmit_IT>
    return;
 8006370:	e014      	b.n	800639c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <HAL_UART_IRQHandler+0x514>
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f969 	bl	8006662 <UART_EndTransmit_IT>
    return;
 8006390:	e004      	b.n	800639c <HAL_UART_IRQHandler+0x514>
    return;
 8006392:	bf00      	nop
 8006394:	e002      	b.n	800639c <HAL_UART_IRQHandler+0x514>
      return;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <HAL_UART_IRQHandler+0x514>
      return;
 800639a:	bf00      	nop
  }
}
 800639c:	37e8      	adds	r7, #232	; 0xe8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b090      	sub	sp, #64	; 0x40
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006408:	e050      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d04c      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <UART_WaitOnFlagUntilTimeout+0x30>
 8006418:	f7fb fdbe 	bl	8001f98 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006424:	429a      	cmp	r2, r3
 8006426:	d241      	bcs.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006448:	637a      	str	r2, [r7, #52]	; 0x34
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	63bb      	str	r3, [r7, #56]	; 0x38
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647c:	623a      	str	r2, [r7, #32]
 800647e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	61bb      	str	r3, [r7, #24]
   return(result);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e00f      	b.n	80064cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d09f      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3740      	adds	r7, #64	; 0x40
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b095      	sub	sp, #84	; 0x54
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064fc:	643a      	str	r2, [r7, #64]	; 0x40
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e5      	bne.n	80064dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	64bb      	str	r3, [r7, #72]	; 0x48
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	2b01      	cmp	r3, #1
 800654a:	d119      	bne.n	8006580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60bb      	str	r3, [r7, #8]
   return(result);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	647b      	str	r3, [r7, #68]	; 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800656c:	61ba      	str	r2, [r7, #24]
 800656e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6979      	ldr	r1, [r7, #20]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	613b      	str	r3, [r7, #16]
   return(result);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800658e:	bf00      	nop
 8006590:	3754      	adds	r7, #84	; 0x54
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff ff09 	bl	80063cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b21      	cmp	r3, #33	; 0x21
 80065d4:	d13e      	bne.n	8006654 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	d114      	bne.n	800660a <UART_Transmit_IT+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d110      	bne.n	800660a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]
 8006608:	e008      	b.n	800661c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6211      	str	r1, [r2, #32]
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29b      	uxth	r3, r3
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fe8e 	bl	80063a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b08c      	sub	sp, #48	; 0x30
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b22      	cmp	r3, #34	; 0x22
 80066a4:	f040 80ab 	bne.w	80067fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b0:	d117      	bne.n	80066e2 <UART_Receive_IT+0x50>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	1c9a      	adds	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
 80066e0:	e026      	b.n	8006730 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d007      	beq.n	8006706 <UART_Receive_IT+0x74>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <UART_Receive_IT+0x82>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	e008      	b.n	8006726 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29b      	uxth	r3, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006740:	2b00      	cmp	r3, #0
 8006742:	d15a      	bne.n	80067fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0220 	bic.w	r2, r2, #32
 8006752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d135      	bne.n	80067f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	613b      	str	r3, [r7, #16]
   return(result);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	623a      	str	r2, [r7, #32]
 80067ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	69f9      	ldr	r1, [r7, #28]
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d10a      	bne.n	80067e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fdf9 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
 80067ee:	e002      	b.n	80067f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fde1 	bl	80063b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e002      	b.n	8006800 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3730      	adds	r7, #48	; 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800680c:	b0c0      	sub	sp, #256	; 0x100
 800680e:	af00      	add	r7, sp, #0
 8006810:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	ea40 0301 	orr.w	r3, r0, r1
 8006830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	431a      	orrs	r2, r3
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	431a      	orrs	r2, r3
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006860:	f021 010c 	bic.w	r1, r1, #12
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800686e:	430b      	orrs	r3, r1
 8006870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006882:	6999      	ldr	r1, [r3, #24]
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	ea40 0301 	orr.w	r3, r0, r1
 800688e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b8f      	ldr	r3, [pc, #572]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006898:	429a      	cmp	r2, r3
 800689a:	d005      	beq.n	80068a8 <UART_SetConfig+0xa0>
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b8d      	ldr	r3, [pc, #564]	; (8006ad8 <UART_SetConfig+0x2d0>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d104      	bne.n	80068b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fd fd00 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 80068ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068b0:	e003      	b.n	80068ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fd fce7 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80068b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c4:	f040 810c 	bne.w	8006ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	1891      	adds	r1, r2, r2
 80068e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068e2:	415b      	adcs	r3, r3
 80068e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ea:	4621      	mov	r1, r4
 80068ec:	eb12 0801 	adds.w	r8, r2, r1
 80068f0:	4629      	mov	r1, r5
 80068f2:	eb43 0901 	adc.w	r9, r3, r1
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690a:	4690      	mov	r8, r2
 800690c:	4699      	mov	r9, r3
 800690e:	4623      	mov	r3, r4
 8006910:	eb18 0303 	adds.w	r3, r8, r3
 8006914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006918:	462b      	mov	r3, r5
 800691a:	eb49 0303 	adc.w	r3, r9, r3
 800691e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800692e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006936:	460b      	mov	r3, r1
 8006938:	18db      	adds	r3, r3, r3
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
 800693c:	4613      	mov	r3, r2
 800693e:	eb42 0303 	adc.w	r3, r2, r3
 8006942:	657b      	str	r3, [r7, #84]	; 0x54
 8006944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800694c:	f7f9 fca8 	bl	80002a0 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4b61      	ldr	r3, [pc, #388]	; (8006adc <UART_SetConfig+0x2d4>)
 8006956:	fba3 2302 	umull	r2, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	011c      	lsls	r4, r3, #4
 800695e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006968:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800696c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	1891      	adds	r1, r2, r2
 8006976:	64b9      	str	r1, [r7, #72]	; 0x48
 8006978:	415b      	adcs	r3, r3
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006980:	4641      	mov	r1, r8
 8006982:	eb12 0a01 	adds.w	sl, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb43 0b01 	adc.w	fp, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800699c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a0:	4692      	mov	sl, r2
 80069a2:	469b      	mov	fp, r3
 80069a4:	4643      	mov	r3, r8
 80069a6:	eb1a 0303 	adds.w	r3, sl, r3
 80069aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ae:	464b      	mov	r3, r9
 80069b0:	eb4b 0303 	adc.w	r3, fp, r3
 80069b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069cc:	460b      	mov	r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40
 80069d2:	4613      	mov	r3, r2
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	647b      	str	r3, [r7, #68]	; 0x44
 80069da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069e2:	f7f9 fc5d 	bl	80002a0 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <UART_SetConfig+0x2d4>)
 80069ee:	fba3 2301 	umull	r2, r3, r3, r1
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2264      	movs	r2, #100	; 0x64
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	1acb      	subs	r3, r1, r3
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a02:	4b36      	ldr	r3, [pc, #216]	; (8006adc <UART_SetConfig+0x2d4>)
 8006a04:	fba3 2302 	umull	r2, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a10:	441c      	add	r4, r3
 8006a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	1891      	adds	r1, r2, r2
 8006a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a2c:	415b      	adcs	r3, r3
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a34:	4641      	mov	r1, r8
 8006a36:	1851      	adds	r1, r2, r1
 8006a38:	6339      	str	r1, [r7, #48]	; 0x30
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	414b      	adcs	r3, r1
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	00cb      	lsls	r3, r1, #3
 8006a50:	4651      	mov	r1, sl
 8006a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a56:	4651      	mov	r1, sl
 8006a58:	00ca      	lsls	r2, r1, #3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4642      	mov	r2, r8
 8006a62:	189b      	adds	r3, r3, r2
 8006a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a68:	464b      	mov	r3, r9
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a88:	460b      	mov	r3, r1
 8006a8a:	18db      	adds	r3, r3, r3
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8e:	4613      	mov	r3, r2
 8006a90:	eb42 0303 	adc.w	r3, r2, r3
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a9e:	f7f9 fbff 	bl	80002a0 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <UART_SetConfig+0x2d4>)
 8006aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	2164      	movs	r1, #100	; 0x64
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	3332      	adds	r3, #50	; 0x32
 8006aba:	4a08      	ldr	r2, [pc, #32]	; (8006adc <UART_SetConfig+0x2d4>)
 8006abc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f003 0207 	and.w	r2, r3, #7
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4422      	add	r2, r4
 8006ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ad0:	e105      	b.n	8006cde <UART_SetConfig+0x4d6>
 8006ad2:	bf00      	nop
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	1891      	adds	r1, r2, r2
 8006af8:	6239      	str	r1, [r7, #32]
 8006afa:	415b      	adcs	r3, r3
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b02:	4641      	mov	r1, r8
 8006b04:	1854      	adds	r4, r2, r1
 8006b06:	4649      	mov	r1, r9
 8006b08:	eb43 0501 	adc.w	r5, r3, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	00eb      	lsls	r3, r5, #3
 8006b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1a:	00e2      	lsls	r2, r4, #3
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	4643      	mov	r3, r8
 8006b22:	18e3      	adds	r3, r4, r3
 8006b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b28:	464b      	mov	r3, r9
 8006b2a:	eb45 0303 	adc.w	r3, r5, r3
 8006b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b4e:	4629      	mov	r1, r5
 8006b50:	008b      	lsls	r3, r1, #2
 8006b52:	4621      	mov	r1, r4
 8006b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b58:	4621      	mov	r1, r4
 8006b5a:	008a      	lsls	r2, r1, #2
 8006b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b60:	f7f9 fb9e 	bl	80002a0 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4b60      	ldr	r3, [pc, #384]	; (8006cec <UART_SetConfig+0x4e4>)
 8006b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	011c      	lsls	r4, r3, #4
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	1891      	adds	r1, r2, r2
 8006b8a:	61b9      	str	r1, [r7, #24]
 8006b8c:	415b      	adcs	r3, r3
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b94:	4641      	mov	r1, r8
 8006b96:	1851      	adds	r1, r2, r1
 8006b98:	6139      	str	r1, [r7, #16]
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	414b      	adcs	r3, r1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bac:	4659      	mov	r1, fp
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	00ca      	lsls	r2, r1, #3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bec:	4649      	mov	r1, r9
 8006bee:	008b      	lsls	r3, r1, #2
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	008a      	lsls	r2, r1, #2
 8006bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bfe:	f7f9 fb4f 	bl	80002a0 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b39      	ldr	r3, [pc, #228]	; (8006cec <UART_SetConfig+0x4e4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	; 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	3332      	adds	r3, #50	; 0x32
 8006c1a:	4a34      	ldr	r2, [pc, #208]	; (8006cec <UART_SetConfig+0x4e4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c26:	441c      	add	r4, r3
 8006c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c30:	677a      	str	r2, [r7, #116]	; 0x74
 8006c32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c36:	4642      	mov	r2, r8
 8006c38:	464b      	mov	r3, r9
 8006c3a:	1891      	adds	r1, r2, r2
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	415b      	adcs	r3, r3
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c46:	4641      	mov	r1, r8
 8006c48:	1851      	adds	r1, r2, r1
 8006c4a:	6039      	str	r1, [r7, #0]
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	414b      	adcs	r3, r1
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c5e:	4659      	mov	r1, fp
 8006c60:	00cb      	lsls	r3, r1, #3
 8006c62:	4651      	mov	r1, sl
 8006c64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c68:	4651      	mov	r1, sl
 8006c6a:	00ca      	lsls	r2, r1, #3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	4642      	mov	r2, r8
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c78:	464b      	mov	r3, r9
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	eb42 0303 	adc.w	r3, r2, r3
 8006c80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c8c:	667a      	str	r2, [r7, #100]	; 0x64
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	008a      	lsls	r2, r1, #2
 8006ca8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cac:	f7f9 faf8 	bl	80002a0 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <UART_SetConfig+0x4e4>)
 8006cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	2164      	movs	r1, #100	; 0x64
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	3332      	adds	r3, #50	; 0x32
 8006cc8:	4a08      	ldr	r2, [pc, #32]	; (8006cec <UART_SetConfig+0x4e4>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4422      	add	r2, r4
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cea:	bf00      	nop
 8006cec:	51eb851f 	.word	0x51eb851f

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	; (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	200000a4 	.word	0x200000a4

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	; (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	; (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	; (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	; (8006d40 <__libc_init_array+0x44>)
 8006d10:	f001 f8c2 	bl	8007e98 <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	08008040 	.word	0x08008040
 8006d38:	08008040 	.word	0x08008040
 8006d3c:	08008040 	.word	0x08008040
 8006d40:	08008044 	.word	0x08008044

08006d44 <memset>:
 8006d44:	4402      	add	r2, r0
 8006d46:	4603      	mov	r3, r0
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d100      	bne.n	8006d4e <memset+0xa>
 8006d4c:	4770      	bx	lr
 8006d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d52:	e7f9      	b.n	8006d48 <memset+0x4>

08006d54 <_puts_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	460e      	mov	r6, r1
 8006d58:	4605      	mov	r5, r0
 8006d5a:	b118      	cbz	r0, 8006d64 <_puts_r+0x10>
 8006d5c:	6983      	ldr	r3, [r0, #24]
 8006d5e:	b90b      	cbnz	r3, 8006d64 <_puts_r+0x10>
 8006d60:	f000 fa9c 	bl	800729c <__sinit>
 8006d64:	69ab      	ldr	r3, [r5, #24]
 8006d66:	68ac      	ldr	r4, [r5, #8]
 8006d68:	b913      	cbnz	r3, 8006d70 <_puts_r+0x1c>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 fa96 	bl	800729c <__sinit>
 8006d70:	4b2c      	ldr	r3, [pc, #176]	; (8006e24 <_puts_r+0xd0>)
 8006d72:	429c      	cmp	r4, r3
 8006d74:	d120      	bne.n	8006db8 <_puts_r+0x64>
 8006d76:	686c      	ldr	r4, [r5, #4]
 8006d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d7a:	07db      	lsls	r3, r3, #31
 8006d7c:	d405      	bmi.n	8006d8a <_puts_r+0x36>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	0598      	lsls	r0, r3, #22
 8006d82:	d402      	bmi.n	8006d8a <_puts_r+0x36>
 8006d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d86:	f000 fb27 	bl	80073d8 <__retarget_lock_acquire_recursive>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	0719      	lsls	r1, r3, #28
 8006d8e:	d51d      	bpl.n	8006dcc <_puts_r+0x78>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	b1db      	cbz	r3, 8006dcc <_puts_r+0x78>
 8006d94:	3e01      	subs	r6, #1
 8006d96:	68a3      	ldr	r3, [r4, #8]
 8006d98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	bb39      	cbnz	r1, 8006df2 <_puts_r+0x9e>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da38      	bge.n	8006e18 <_puts_r+0xc4>
 8006da6:	4622      	mov	r2, r4
 8006da8:	210a      	movs	r1, #10
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 f89c 	bl	8006ee8 <__swbuf_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d011      	beq.n	8006dd8 <_puts_r+0x84>
 8006db4:	250a      	movs	r5, #10
 8006db6:	e011      	b.n	8006ddc <_puts_r+0x88>
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <_puts_r+0xd4>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <_puts_r+0x6e>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7da      	b.n	8006d78 <_puts_r+0x24>
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <_puts_r+0xd8>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf08      	it	eq
 8006dc8:	68ec      	ldreq	r4, [r5, #12]
 8006dca:	e7d5      	b.n	8006d78 <_puts_r+0x24>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f8dc 	bl	8006f8c <__swsetup_r>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d0dd      	beq.n	8006d94 <_puts_r+0x40>
 8006dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dde:	07da      	lsls	r2, r3, #31
 8006de0:	d405      	bmi.n	8006dee <_puts_r+0x9a>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	059b      	lsls	r3, r3, #22
 8006de6:	d402      	bmi.n	8006dee <_puts_r+0x9a>
 8006de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dea:	f000 faf6 	bl	80073da <__retarget_lock_release_recursive>
 8006dee:	4628      	mov	r0, r5
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da04      	bge.n	8006e00 <_puts_r+0xac>
 8006df6:	69a2      	ldr	r2, [r4, #24]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	dc06      	bgt.n	8006e0a <_puts_r+0xb6>
 8006dfc:	290a      	cmp	r1, #10
 8006dfe:	d004      	beq.n	8006e0a <_puts_r+0xb6>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	6022      	str	r2, [r4, #0]
 8006e06:	7019      	strb	r1, [r3, #0]
 8006e08:	e7c5      	b.n	8006d96 <_puts_r+0x42>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 f86b 	bl	8006ee8 <__swbuf_r>
 8006e12:	3001      	adds	r0, #1
 8006e14:	d1bf      	bne.n	8006d96 <_puts_r+0x42>
 8006e16:	e7df      	b.n	8006dd8 <_puts_r+0x84>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	250a      	movs	r5, #10
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	701d      	strb	r5, [r3, #0]
 8006e22:	e7db      	b.n	8006ddc <_puts_r+0x88>
 8006e24:	08007fc4 	.word	0x08007fc4
 8006e28:	08007fe4 	.word	0x08007fe4
 8006e2c:	08007fa4 	.word	0x08007fa4

08006e30 <puts>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <puts+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f7ff bf8d 	b.w	8006d54 <_puts_r>
 8006e3a:	bf00      	nop
 8006e3c:	200000a4 	.word	0x200000a4

08006e40 <sniprintf>:
 8006e40:	b40c      	push	{r2, r3}
 8006e42:	b530      	push	{r4, r5, lr}
 8006e44:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <sniprintf+0x64>)
 8006e46:	1e0c      	subs	r4, r1, #0
 8006e48:	681d      	ldr	r5, [r3, #0]
 8006e4a:	b09d      	sub	sp, #116	; 0x74
 8006e4c:	da08      	bge.n	8006e60 <sniprintf+0x20>
 8006e4e:	238b      	movs	r3, #139	; 0x8b
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	b01d      	add	sp, #116	; 0x74
 8006e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e5c:	b002      	add	sp, #8
 8006e5e:	4770      	bx	lr
 8006e60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e68:	bf14      	ite	ne
 8006e6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e6e:	4623      	moveq	r3, r4
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e78:	9002      	str	r0, [sp, #8]
 8006e7a:	9006      	str	r0, [sp, #24]
 8006e7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e82:	ab21      	add	r3, sp, #132	; 0x84
 8006e84:	a902      	add	r1, sp, #8
 8006e86:	4628      	mov	r0, r5
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	f000 fc49 	bl	8007720 <_svfiprintf_r>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	bfbc      	itt	lt
 8006e92:	238b      	movlt	r3, #139	; 0x8b
 8006e94:	602b      	strlt	r3, [r5, #0]
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	d0dd      	beq.n	8006e56 <sniprintf+0x16>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e7d9      	b.n	8006e56 <sniprintf+0x16>
 8006ea2:	bf00      	nop
 8006ea4:	200000a4 	.word	0x200000a4

08006ea8 <siprintf>:
 8006ea8:	b40e      	push	{r1, r2, r3}
 8006eaa:	b500      	push	{lr}
 8006eac:	b09c      	sub	sp, #112	; 0x70
 8006eae:	ab1d      	add	r3, sp, #116	; 0x74
 8006eb0:	9002      	str	r0, [sp, #8]
 8006eb2:	9006      	str	r0, [sp, #24]
 8006eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb8:	4809      	ldr	r0, [pc, #36]	; (8006ee0 <siprintf+0x38>)
 8006eba:	9107      	str	r1, [sp, #28]
 8006ebc:	9104      	str	r1, [sp, #16]
 8006ebe:	4909      	ldr	r1, [pc, #36]	; (8006ee4 <siprintf+0x3c>)
 8006ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec4:	9105      	str	r1, [sp, #20]
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	a902      	add	r1, sp, #8
 8006ecc:	f000 fc28 	bl	8007720 <_svfiprintf_r>
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	b01c      	add	sp, #112	; 0x70
 8006ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006edc:	b003      	add	sp, #12
 8006ede:	4770      	bx	lr
 8006ee0:	200000a4 	.word	0x200000a4
 8006ee4:	ffff0208 	.word	0xffff0208

08006ee8 <__swbuf_r>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	460e      	mov	r6, r1
 8006eec:	4614      	mov	r4, r2
 8006eee:	4605      	mov	r5, r0
 8006ef0:	b118      	cbz	r0, 8006efa <__swbuf_r+0x12>
 8006ef2:	6983      	ldr	r3, [r0, #24]
 8006ef4:	b90b      	cbnz	r3, 8006efa <__swbuf_r+0x12>
 8006ef6:	f000 f9d1 	bl	800729c <__sinit>
 8006efa:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <__swbuf_r+0x98>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	d12b      	bne.n	8006f58 <__swbuf_r+0x70>
 8006f00:	686c      	ldr	r4, [r5, #4]
 8006f02:	69a3      	ldr	r3, [r4, #24]
 8006f04:	60a3      	str	r3, [r4, #8]
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	071a      	lsls	r2, r3, #28
 8006f0a:	d52f      	bpl.n	8006f6c <__swbuf_r+0x84>
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	b36b      	cbz	r3, 8006f6c <__swbuf_r+0x84>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	1ac0      	subs	r0, r0, r3
 8006f16:	6963      	ldr	r3, [r4, #20]
 8006f18:	b2f6      	uxtb	r6, r6
 8006f1a:	4283      	cmp	r3, r0
 8006f1c:	4637      	mov	r7, r6
 8006f1e:	dc04      	bgt.n	8006f2a <__swbuf_r+0x42>
 8006f20:	4621      	mov	r1, r4
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f926 	bl	8007174 <_fflush_r>
 8006f28:	bb30      	cbnz	r0, 8006f78 <__swbuf_r+0x90>
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	60a3      	str	r3, [r4, #8]
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	6022      	str	r2, [r4, #0]
 8006f36:	701e      	strb	r6, [r3, #0]
 8006f38:	6963      	ldr	r3, [r4, #20]
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	4283      	cmp	r3, r0
 8006f3e:	d004      	beq.n	8006f4a <__swbuf_r+0x62>
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	07db      	lsls	r3, r3, #31
 8006f44:	d506      	bpl.n	8006f54 <__swbuf_r+0x6c>
 8006f46:	2e0a      	cmp	r6, #10
 8006f48:	d104      	bne.n	8006f54 <__swbuf_r+0x6c>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f911 	bl	8007174 <_fflush_r>
 8006f52:	b988      	cbnz	r0, 8006f78 <__swbuf_r+0x90>
 8006f54:	4638      	mov	r0, r7
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <__swbuf_r+0x9c>)
 8006f5a:	429c      	cmp	r4, r3
 8006f5c:	d101      	bne.n	8006f62 <__swbuf_r+0x7a>
 8006f5e:	68ac      	ldr	r4, [r5, #8]
 8006f60:	e7cf      	b.n	8006f02 <__swbuf_r+0x1a>
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <__swbuf_r+0xa0>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	bf08      	it	eq
 8006f68:	68ec      	ldreq	r4, [r5, #12]
 8006f6a:	e7ca      	b.n	8006f02 <__swbuf_r+0x1a>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 f80c 	bl	8006f8c <__swsetup_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d0cb      	beq.n	8006f10 <__swbuf_r+0x28>
 8006f78:	f04f 37ff 	mov.w	r7, #4294967295
 8006f7c:	e7ea      	b.n	8006f54 <__swbuf_r+0x6c>
 8006f7e:	bf00      	nop
 8006f80:	08007fc4 	.word	0x08007fc4
 8006f84:	08007fe4 	.word	0x08007fe4
 8006f88:	08007fa4 	.word	0x08007fa4

08006f8c <__swsetup_r>:
 8006f8c:	4b32      	ldr	r3, [pc, #200]	; (8007058 <__swsetup_r+0xcc>)
 8006f8e:	b570      	push	{r4, r5, r6, lr}
 8006f90:	681d      	ldr	r5, [r3, #0]
 8006f92:	4606      	mov	r6, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	b125      	cbz	r5, 8006fa2 <__swsetup_r+0x16>
 8006f98:	69ab      	ldr	r3, [r5, #24]
 8006f9a:	b913      	cbnz	r3, 8006fa2 <__swsetup_r+0x16>
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f000 f97d 	bl	800729c <__sinit>
 8006fa2:	4b2e      	ldr	r3, [pc, #184]	; (800705c <__swsetup_r+0xd0>)
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	d10f      	bne.n	8006fc8 <__swsetup_r+0x3c>
 8006fa8:	686c      	ldr	r4, [r5, #4]
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb0:	0719      	lsls	r1, r3, #28
 8006fb2:	d42c      	bmi.n	800700e <__swsetup_r+0x82>
 8006fb4:	06dd      	lsls	r5, r3, #27
 8006fb6:	d411      	bmi.n	8006fdc <__swsetup_r+0x50>
 8006fb8:	2309      	movs	r3, #9
 8006fba:	6033      	str	r3, [r6, #0]
 8006fbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	e03e      	b.n	8007046 <__swsetup_r+0xba>
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <__swsetup_r+0xd4>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <__swsetup_r+0x46>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7eb      	b.n	8006faa <__swsetup_r+0x1e>
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <__swsetup_r+0xd8>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	68ec      	ldreq	r4, [r5, #12]
 8006fda:	e7e6      	b.n	8006faa <__swsetup_r+0x1e>
 8006fdc:	0758      	lsls	r0, r3, #29
 8006fde:	d512      	bpl.n	8007006 <__swsetup_r+0x7a>
 8006fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fe2:	b141      	cbz	r1, 8006ff6 <__swsetup_r+0x6a>
 8006fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d002      	beq.n	8006ff2 <__swsetup_r+0x66>
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 fa5b 	bl	80074a8 <_free_r>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	2300      	movs	r3, #0
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0308 	orr.w	r3, r3, #8
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	b94b      	cbnz	r3, 8007026 <__swsetup_r+0x9a>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701c:	d003      	beq.n	8007026 <__swsetup_r+0x9a>
 800701e:	4621      	mov	r1, r4
 8007020:	4630      	mov	r0, r6
 8007022:	f000 fa01 	bl	8007428 <__smakebuf_r>
 8007026:	89a0      	ldrh	r0, [r4, #12]
 8007028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800702c:	f010 0301 	ands.w	r3, r0, #1
 8007030:	d00a      	beq.n	8007048 <__swsetup_r+0xbc>
 8007032:	2300      	movs	r3, #0
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6963      	ldr	r3, [r4, #20]
 8007038:	425b      	negs	r3, r3
 800703a:	61a3      	str	r3, [r4, #24]
 800703c:	6923      	ldr	r3, [r4, #16]
 800703e:	b943      	cbnz	r3, 8007052 <__swsetup_r+0xc6>
 8007040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007044:	d1ba      	bne.n	8006fbc <__swsetup_r+0x30>
 8007046:	bd70      	pop	{r4, r5, r6, pc}
 8007048:	0781      	lsls	r1, r0, #30
 800704a:	bf58      	it	pl
 800704c:	6963      	ldrpl	r3, [r4, #20]
 800704e:	60a3      	str	r3, [r4, #8]
 8007050:	e7f4      	b.n	800703c <__swsetup_r+0xb0>
 8007052:	2000      	movs	r0, #0
 8007054:	e7f7      	b.n	8007046 <__swsetup_r+0xba>
 8007056:	bf00      	nop
 8007058:	200000a4 	.word	0x200000a4
 800705c:	08007fc4 	.word	0x08007fc4
 8007060:	08007fe4 	.word	0x08007fe4
 8007064:	08007fa4 	.word	0x08007fa4

08007068 <__sflush_r>:
 8007068:	898a      	ldrh	r2, [r1, #12]
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	4605      	mov	r5, r0
 8007070:	0710      	lsls	r0, r2, #28
 8007072:	460c      	mov	r4, r1
 8007074:	d458      	bmi.n	8007128 <__sflush_r+0xc0>
 8007076:	684b      	ldr	r3, [r1, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc05      	bgt.n	8007088 <__sflush_r+0x20>
 800707c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	dc02      	bgt.n	8007088 <__sflush_r+0x20>
 8007082:	2000      	movs	r0, #0
 8007084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800708a:	2e00      	cmp	r6, #0
 800708c:	d0f9      	beq.n	8007082 <__sflush_r+0x1a>
 800708e:	2300      	movs	r3, #0
 8007090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007094:	682f      	ldr	r7, [r5, #0]
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	d032      	beq.n	8007100 <__sflush_r+0x98>
 800709a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	075a      	lsls	r2, r3, #29
 80070a0:	d505      	bpl.n	80070ae <__sflush_r+0x46>
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a8:	b10b      	cbz	r3, 80070ae <__sflush_r+0x46>
 80070aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070ac:	1ac0      	subs	r0, r0, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	4602      	mov	r2, r0
 80070b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b4:	6a21      	ldr	r1, [r4, #32]
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b0      	blx	r6
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	d106      	bne.n	80070ce <__sflush_r+0x66>
 80070c0:	6829      	ldr	r1, [r5, #0]
 80070c2:	291d      	cmp	r1, #29
 80070c4:	d82c      	bhi.n	8007120 <__sflush_r+0xb8>
 80070c6:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <__sflush_r+0x108>)
 80070c8:	40ca      	lsrs	r2, r1
 80070ca:	07d6      	lsls	r6, r2, #31
 80070cc:	d528      	bpl.n	8007120 <__sflush_r+0xb8>
 80070ce:	2200      	movs	r2, #0
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	04d9      	lsls	r1, r3, #19
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	d504      	bpl.n	80070e4 <__sflush_r+0x7c>
 80070da:	1c42      	adds	r2, r0, #1
 80070dc:	d101      	bne.n	80070e2 <__sflush_r+0x7a>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b903      	cbnz	r3, 80070e4 <__sflush_r+0x7c>
 80070e2:	6560      	str	r0, [r4, #84]	; 0x54
 80070e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e6:	602f      	str	r7, [r5, #0]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d0ca      	beq.n	8007082 <__sflush_r+0x1a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__sflush_r+0x92>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 f9d7 	bl	80074a8 <_free_r>
 80070fa:	2000      	movs	r0, #0
 80070fc:	6360      	str	r0, [r4, #52]	; 0x34
 80070fe:	e7c1      	b.n	8007084 <__sflush_r+0x1c>
 8007100:	6a21      	ldr	r1, [r4, #32]
 8007102:	2301      	movs	r3, #1
 8007104:	4628      	mov	r0, r5
 8007106:	47b0      	blx	r6
 8007108:	1c41      	adds	r1, r0, #1
 800710a:	d1c7      	bne.n	800709c <__sflush_r+0x34>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0c4      	beq.n	800709c <__sflush_r+0x34>
 8007112:	2b1d      	cmp	r3, #29
 8007114:	d001      	beq.n	800711a <__sflush_r+0xb2>
 8007116:	2b16      	cmp	r3, #22
 8007118:	d101      	bne.n	800711e <__sflush_r+0xb6>
 800711a:	602f      	str	r7, [r5, #0]
 800711c:	e7b1      	b.n	8007082 <__sflush_r+0x1a>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	e7ad      	b.n	8007084 <__sflush_r+0x1c>
 8007128:	690f      	ldr	r7, [r1, #16]
 800712a:	2f00      	cmp	r7, #0
 800712c:	d0a9      	beq.n	8007082 <__sflush_r+0x1a>
 800712e:	0793      	lsls	r3, r2, #30
 8007130:	680e      	ldr	r6, [r1, #0]
 8007132:	bf08      	it	eq
 8007134:	694b      	ldreq	r3, [r1, #20]
 8007136:	600f      	str	r7, [r1, #0]
 8007138:	bf18      	it	ne
 800713a:	2300      	movne	r3, #0
 800713c:	eba6 0807 	sub.w	r8, r6, r7
 8007140:	608b      	str	r3, [r1, #8]
 8007142:	f1b8 0f00 	cmp.w	r8, #0
 8007146:	dd9c      	ble.n	8007082 <__sflush_r+0x1a>
 8007148:	6a21      	ldr	r1, [r4, #32]
 800714a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800714c:	4643      	mov	r3, r8
 800714e:	463a      	mov	r2, r7
 8007150:	4628      	mov	r0, r5
 8007152:	47b0      	blx	r6
 8007154:	2800      	cmp	r0, #0
 8007156:	dc06      	bgt.n	8007166 <__sflush_r+0xfe>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	e78e      	b.n	8007084 <__sflush_r+0x1c>
 8007166:	4407      	add	r7, r0
 8007168:	eba8 0800 	sub.w	r8, r8, r0
 800716c:	e7e9      	b.n	8007142 <__sflush_r+0xda>
 800716e:	bf00      	nop
 8007170:	20400001 	.word	0x20400001

08007174 <_fflush_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	690b      	ldr	r3, [r1, #16]
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b913      	cbnz	r3, 8007184 <_fflush_r+0x10>
 800717e:	2500      	movs	r5, #0
 8007180:	4628      	mov	r0, r5
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	b118      	cbz	r0, 800718e <_fflush_r+0x1a>
 8007186:	6983      	ldr	r3, [r0, #24]
 8007188:	b90b      	cbnz	r3, 800718e <_fflush_r+0x1a>
 800718a:	f000 f887 	bl	800729c <__sinit>
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <_fflush_r+0x6c>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d11b      	bne.n	80071cc <_fflush_r+0x58>
 8007194:	686c      	ldr	r4, [r5, #4]
 8007196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0ef      	beq.n	800717e <_fflush_r+0xa>
 800719e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d404      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a4:	0599      	lsls	r1, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f000 f915 	bl	80073d8 <__retarget_lock_acquire_recursive>
 80071ae:	4628      	mov	r0, r5
 80071b0:	4621      	mov	r1, r4
 80071b2:	f7ff ff59 	bl	8007068 <__sflush_r>
 80071b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b8:	07da      	lsls	r2, r3, #31
 80071ba:	4605      	mov	r5, r0
 80071bc:	d4e0      	bmi.n	8007180 <_fflush_r+0xc>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	059b      	lsls	r3, r3, #22
 80071c2:	d4dd      	bmi.n	8007180 <_fflush_r+0xc>
 80071c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c6:	f000 f908 	bl	80073da <__retarget_lock_release_recursive>
 80071ca:	e7d9      	b.n	8007180 <_fflush_r+0xc>
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <_fflush_r+0x70>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d101      	bne.n	80071d6 <_fflush_r+0x62>
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	e7df      	b.n	8007196 <_fflush_r+0x22>
 80071d6:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <_fflush_r+0x74>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	bf08      	it	eq
 80071dc:	68ec      	ldreq	r4, [r5, #12]
 80071de:	e7da      	b.n	8007196 <_fflush_r+0x22>
 80071e0:	08007fc4 	.word	0x08007fc4
 80071e4:	08007fe4 	.word	0x08007fe4
 80071e8:	08007fa4 	.word	0x08007fa4

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f7ff fd9b 	bl	8006d44 <memset>
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x38>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x3c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x40>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <std+0x44>)
 800721c:	6224      	str	r4, [r4, #32]
 800721e:	6323      	str	r3, [r4, #48]	; 0x30
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	08007c69 	.word	0x08007c69
 8007228:	08007c8b 	.word	0x08007c8b
 800722c:	08007cc3 	.word	0x08007cc3
 8007230:	08007ce7 	.word	0x08007ce7

08007234 <_cleanup_r>:
 8007234:	4901      	ldr	r1, [pc, #4]	; (800723c <_cleanup_r+0x8>)
 8007236:	f000 b8af 	b.w	8007398 <_fwalk_reent>
 800723a:	bf00      	nop
 800723c:	08007175 	.word	0x08007175

08007240 <__sfmoreglue>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	2268      	movs	r2, #104	; 0x68
 8007244:	1e4d      	subs	r5, r1, #1
 8007246:	4355      	muls	r5, r2
 8007248:	460e      	mov	r6, r1
 800724a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800724e:	f000 f997 	bl	8007580 <_malloc_r>
 8007252:	4604      	mov	r4, r0
 8007254:	b140      	cbz	r0, 8007268 <__sfmoreglue+0x28>
 8007256:	2100      	movs	r1, #0
 8007258:	e9c0 1600 	strd	r1, r6, [r0]
 800725c:	300c      	adds	r0, #12
 800725e:	60a0      	str	r0, [r4, #8]
 8007260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007264:	f7ff fd6e 	bl	8006d44 <memset>
 8007268:	4620      	mov	r0, r4
 800726a:	bd70      	pop	{r4, r5, r6, pc}

0800726c <__sfp_lock_acquire>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__sfp_lock_acquire+0x8>)
 800726e:	f000 b8b3 	b.w	80073d8 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	20000375 	.word	0x20000375

08007278 <__sfp_lock_release>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__sfp_lock_release+0x8>)
 800727a:	f000 b8ae 	b.w	80073da <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	20000375 	.word	0x20000375

08007284 <__sinit_lock_acquire>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__sinit_lock_acquire+0x8>)
 8007286:	f000 b8a7 	b.w	80073d8 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000376 	.word	0x20000376

08007290 <__sinit_lock_release>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__sinit_lock_release+0x8>)
 8007292:	f000 b8a2 	b.w	80073da <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000376 	.word	0x20000376

0800729c <__sinit>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	f7ff fff0 	bl	8007284 <__sinit_lock_acquire>
 80072a4:	69a3      	ldr	r3, [r4, #24]
 80072a6:	b11b      	cbz	r3, 80072b0 <__sinit+0x14>
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f7ff bff0 	b.w	8007290 <__sinit_lock_release>
 80072b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b4:	6523      	str	r3, [r4, #80]	; 0x50
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <__sinit+0x68>)
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <__sinit+0x6c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072be:	42a3      	cmp	r3, r4
 80072c0:	bf04      	itt	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	61a3      	streq	r3, [r4, #24]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f820 	bl	800730c <__sfp>
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f81c 	bl	800730c <__sfp>
 80072d4:	60a0      	str	r0, [r4, #8]
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f818 	bl	800730c <__sfp>
 80072dc:	2200      	movs	r2, #0
 80072de:	60e0      	str	r0, [r4, #12]
 80072e0:	2104      	movs	r1, #4
 80072e2:	6860      	ldr	r0, [r4, #4]
 80072e4:	f7ff ff82 	bl	80071ec <std>
 80072e8:	68a0      	ldr	r0, [r4, #8]
 80072ea:	2201      	movs	r2, #1
 80072ec:	2109      	movs	r1, #9
 80072ee:	f7ff ff7d 	bl	80071ec <std>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	2112      	movs	r1, #18
 80072f8:	f7ff ff78 	bl	80071ec <std>
 80072fc:	2301      	movs	r3, #1
 80072fe:	61a3      	str	r3, [r4, #24]
 8007300:	e7d2      	b.n	80072a8 <__sinit+0xc>
 8007302:	bf00      	nop
 8007304:	08007fa0 	.word	0x08007fa0
 8007308:	08007235 	.word	0x08007235

0800730c <__sfp>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	4607      	mov	r7, r0
 8007310:	f7ff ffac 	bl	800726c <__sfp_lock_acquire>
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <__sfp+0x84>)
 8007316:	681e      	ldr	r6, [r3, #0]
 8007318:	69b3      	ldr	r3, [r6, #24]
 800731a:	b913      	cbnz	r3, 8007322 <__sfp+0x16>
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff ffbd 	bl	800729c <__sinit>
 8007322:	3648      	adds	r6, #72	; 0x48
 8007324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007328:	3b01      	subs	r3, #1
 800732a:	d503      	bpl.n	8007334 <__sfp+0x28>
 800732c:	6833      	ldr	r3, [r6, #0]
 800732e:	b30b      	cbz	r3, 8007374 <__sfp+0x68>
 8007330:	6836      	ldr	r6, [r6, #0]
 8007332:	e7f7      	b.n	8007324 <__sfp+0x18>
 8007334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007338:	b9d5      	cbnz	r5, 8007370 <__sfp+0x64>
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <__sfp+0x88>)
 800733c:	60e3      	str	r3, [r4, #12]
 800733e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007342:	6665      	str	r5, [r4, #100]	; 0x64
 8007344:	f000 f847 	bl	80073d6 <__retarget_lock_init_recursive>
 8007348:	f7ff ff96 	bl	8007278 <__sfp_lock_release>
 800734c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	61a5      	str	r5, [r4, #24]
 8007358:	2208      	movs	r2, #8
 800735a:	4629      	mov	r1, r5
 800735c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007360:	f7ff fcf0 	bl	8006d44 <memset>
 8007364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800736c:	4620      	mov	r0, r4
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007370:	3468      	adds	r4, #104	; 0x68
 8007372:	e7d9      	b.n	8007328 <__sfp+0x1c>
 8007374:	2104      	movs	r1, #4
 8007376:	4638      	mov	r0, r7
 8007378:	f7ff ff62 	bl	8007240 <__sfmoreglue>
 800737c:	4604      	mov	r4, r0
 800737e:	6030      	str	r0, [r6, #0]
 8007380:	2800      	cmp	r0, #0
 8007382:	d1d5      	bne.n	8007330 <__sfp+0x24>
 8007384:	f7ff ff78 	bl	8007278 <__sfp_lock_release>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	e7ee      	b.n	800736c <__sfp+0x60>
 800738e:	bf00      	nop
 8007390:	08007fa0 	.word	0x08007fa0
 8007394:	ffff0001 	.word	0xffff0001

08007398 <_fwalk_reent>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	4688      	mov	r8, r1
 80073a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073a4:	2700      	movs	r7, #0
 80073a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073aa:	f1b9 0901 	subs.w	r9, r9, #1
 80073ae:	d505      	bpl.n	80073bc <_fwalk_reent+0x24>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d1f7      	bne.n	80073a6 <_fwalk_reent+0xe>
 80073b6:	4638      	mov	r0, r7
 80073b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073bc:	89ab      	ldrh	r3, [r5, #12]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d907      	bls.n	80073d2 <_fwalk_reent+0x3a>
 80073c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c6:	3301      	adds	r3, #1
 80073c8:	d003      	beq.n	80073d2 <_fwalk_reent+0x3a>
 80073ca:	4629      	mov	r1, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	47c0      	blx	r8
 80073d0:	4307      	orrs	r7, r0
 80073d2:	3568      	adds	r5, #104	; 0x68
 80073d4:	e7e9      	b.n	80073aa <_fwalk_reent+0x12>

080073d6 <__retarget_lock_init_recursive>:
 80073d6:	4770      	bx	lr

080073d8 <__retarget_lock_acquire_recursive>:
 80073d8:	4770      	bx	lr

080073da <__retarget_lock_release_recursive>:
 80073da:	4770      	bx	lr

080073dc <__swhatbuf_r>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	460e      	mov	r6, r1
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	2900      	cmp	r1, #0
 80073e6:	b096      	sub	sp, #88	; 0x58
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	da08      	bge.n	8007400 <__swhatbuf_r+0x24>
 80073ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	602a      	str	r2, [r5, #0]
 80073f6:	061a      	lsls	r2, r3, #24
 80073f8:	d410      	bmi.n	800741c <__swhatbuf_r+0x40>
 80073fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073fe:	e00e      	b.n	800741e <__swhatbuf_r+0x42>
 8007400:	466a      	mov	r2, sp
 8007402:	f000 fc97 	bl	8007d34 <_fstat_r>
 8007406:	2800      	cmp	r0, #0
 8007408:	dbf1      	blt.n	80073ee <__swhatbuf_r+0x12>
 800740a:	9a01      	ldr	r2, [sp, #4]
 800740c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007410:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007414:	425a      	negs	r2, r3
 8007416:	415a      	adcs	r2, r3
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	e7ee      	b.n	80073fa <__swhatbuf_r+0x1e>
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	2000      	movs	r0, #0
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	b016      	add	sp, #88	; 0x58
 8007424:	bd70      	pop	{r4, r5, r6, pc}
	...

08007428 <__smakebuf_r>:
 8007428:	898b      	ldrh	r3, [r1, #12]
 800742a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800742c:	079d      	lsls	r5, r3, #30
 800742e:	4606      	mov	r6, r0
 8007430:	460c      	mov	r4, r1
 8007432:	d507      	bpl.n	8007444 <__smakebuf_r+0x1c>
 8007434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	2301      	movs	r3, #1
 800743e:	6163      	str	r3, [r4, #20]
 8007440:	b002      	add	sp, #8
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	ab01      	add	r3, sp, #4
 8007446:	466a      	mov	r2, sp
 8007448:	f7ff ffc8 	bl	80073dc <__swhatbuf_r>
 800744c:	9900      	ldr	r1, [sp, #0]
 800744e:	4605      	mov	r5, r0
 8007450:	4630      	mov	r0, r6
 8007452:	f000 f895 	bl	8007580 <_malloc_r>
 8007456:	b948      	cbnz	r0, 800746c <__smakebuf_r+0x44>
 8007458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745c:	059a      	lsls	r2, r3, #22
 800745e:	d4ef      	bmi.n	8007440 <__smakebuf_r+0x18>
 8007460:	f023 0303 	bic.w	r3, r3, #3
 8007464:	f043 0302 	orr.w	r3, r3, #2
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	e7e3      	b.n	8007434 <__smakebuf_r+0xc>
 800746c:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <__smakebuf_r+0x7c>)
 800746e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	6020      	str	r0, [r4, #0]
 8007474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	9b00      	ldr	r3, [sp, #0]
 800747c:	6163      	str	r3, [r4, #20]
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	6120      	str	r0, [r4, #16]
 8007482:	b15b      	cbz	r3, 800749c <__smakebuf_r+0x74>
 8007484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007488:	4630      	mov	r0, r6
 800748a:	f000 fc65 	bl	8007d58 <_isatty_r>
 800748e:	b128      	cbz	r0, 800749c <__smakebuf_r+0x74>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	89a0      	ldrh	r0, [r4, #12]
 800749e:	4305      	orrs	r5, r0
 80074a0:	81a5      	strh	r5, [r4, #12]
 80074a2:	e7cd      	b.n	8007440 <__smakebuf_r+0x18>
 80074a4:	08007235 	.word	0x08007235

080074a8 <_free_r>:
 80074a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d044      	beq.n	8007538 <_free_r+0x90>
 80074ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b2:	9001      	str	r0, [sp, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ba:	bfb8      	it	lt
 80074bc:	18e4      	addlt	r4, r4, r3
 80074be:	f000 fc95 	bl	8007dec <__malloc_lock>
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <_free_r+0x94>)
 80074c4:	9801      	ldr	r0, [sp, #4]
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	b933      	cbnz	r3, 80074d8 <_free_r+0x30>
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	6014      	str	r4, [r2, #0]
 80074ce:	b003      	add	sp, #12
 80074d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d4:	f000 bc90 	b.w	8007df8 <__malloc_unlock>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d908      	bls.n	80074ee <_free_r+0x46>
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf01      	itttt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	1949      	addeq	r1, r1, r5
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	e7ed      	b.n	80074ca <_free_r+0x22>
 80074ee:	461a      	mov	r2, r3
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b10b      	cbz	r3, 80074f8 <_free_r+0x50>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d9fa      	bls.n	80074ee <_free_r+0x46>
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	1855      	adds	r5, r2, r1
 80074fc:	42a5      	cmp	r5, r4
 80074fe:	d10b      	bne.n	8007518 <_free_r+0x70>
 8007500:	6824      	ldr	r4, [r4, #0]
 8007502:	4421      	add	r1, r4
 8007504:	1854      	adds	r4, r2, r1
 8007506:	42a3      	cmp	r3, r4
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	d1e0      	bne.n	80074ce <_free_r+0x26>
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	6053      	str	r3, [r2, #4]
 8007512:	4421      	add	r1, r4
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	e7da      	b.n	80074ce <_free_r+0x26>
 8007518:	d902      	bls.n	8007520 <_free_r+0x78>
 800751a:	230c      	movs	r3, #12
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	e7d6      	b.n	80074ce <_free_r+0x26>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf04      	itt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	bf04      	itt	eq
 8007530:	1949      	addeq	r1, r1, r5
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6054      	str	r4, [r2, #4]
 8007536:	e7ca      	b.n	80074ce <_free_r+0x26>
 8007538:	b003      	add	sp, #12
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	20000378 	.word	0x20000378

08007540 <sbrk_aligned>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4e0e      	ldr	r6, [pc, #56]	; (800757c <sbrk_aligned+0x3c>)
 8007544:	460c      	mov	r4, r1
 8007546:	6831      	ldr	r1, [r6, #0]
 8007548:	4605      	mov	r5, r0
 800754a:	b911      	cbnz	r1, 8007552 <sbrk_aligned+0x12>
 800754c:	f000 fb7c 	bl	8007c48 <_sbrk_r>
 8007550:	6030      	str	r0, [r6, #0]
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f000 fb77 	bl	8007c48 <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d00a      	beq.n	8007574 <sbrk_aligned+0x34>
 800755e:	1cc4      	adds	r4, r0, #3
 8007560:	f024 0403 	bic.w	r4, r4, #3
 8007564:	42a0      	cmp	r0, r4
 8007566:	d007      	beq.n	8007578 <sbrk_aligned+0x38>
 8007568:	1a21      	subs	r1, r4, r0
 800756a:	4628      	mov	r0, r5
 800756c:	f000 fb6c 	bl	8007c48 <_sbrk_r>
 8007570:	3001      	adds	r0, #1
 8007572:	d101      	bne.n	8007578 <sbrk_aligned+0x38>
 8007574:	f04f 34ff 	mov.w	r4, #4294967295
 8007578:	4620      	mov	r0, r4
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	2000037c 	.word	0x2000037c

08007580 <_malloc_r>:
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007584:	1ccd      	adds	r5, r1, #3
 8007586:	f025 0503 	bic.w	r5, r5, #3
 800758a:	3508      	adds	r5, #8
 800758c:	2d0c      	cmp	r5, #12
 800758e:	bf38      	it	cc
 8007590:	250c      	movcc	r5, #12
 8007592:	2d00      	cmp	r5, #0
 8007594:	4607      	mov	r7, r0
 8007596:	db01      	blt.n	800759c <_malloc_r+0x1c>
 8007598:	42a9      	cmp	r1, r5
 800759a:	d905      	bls.n	80075a8 <_malloc_r+0x28>
 800759c:	230c      	movs	r3, #12
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	2600      	movs	r6, #0
 80075a2:	4630      	mov	r0, r6
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	4e2e      	ldr	r6, [pc, #184]	; (8007664 <_malloc_r+0xe4>)
 80075aa:	f000 fc1f 	bl	8007dec <__malloc_lock>
 80075ae:	6833      	ldr	r3, [r6, #0]
 80075b0:	461c      	mov	r4, r3
 80075b2:	bb34      	cbnz	r4, 8007602 <_malloc_r+0x82>
 80075b4:	4629      	mov	r1, r5
 80075b6:	4638      	mov	r0, r7
 80075b8:	f7ff ffc2 	bl	8007540 <sbrk_aligned>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	4604      	mov	r4, r0
 80075c0:	d14d      	bne.n	800765e <_malloc_r+0xde>
 80075c2:	6834      	ldr	r4, [r6, #0]
 80075c4:	4626      	mov	r6, r4
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d140      	bne.n	800764c <_malloc_r+0xcc>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	4631      	mov	r1, r6
 80075ce:	4638      	mov	r0, r7
 80075d0:	eb04 0803 	add.w	r8, r4, r3
 80075d4:	f000 fb38 	bl	8007c48 <_sbrk_r>
 80075d8:	4580      	cmp	r8, r0
 80075da:	d13a      	bne.n	8007652 <_malloc_r+0xd2>
 80075dc:	6821      	ldr	r1, [r4, #0]
 80075de:	3503      	adds	r5, #3
 80075e0:	1a6d      	subs	r5, r5, r1
 80075e2:	f025 0503 	bic.w	r5, r5, #3
 80075e6:	3508      	adds	r5, #8
 80075e8:	2d0c      	cmp	r5, #12
 80075ea:	bf38      	it	cc
 80075ec:	250c      	movcc	r5, #12
 80075ee:	4629      	mov	r1, r5
 80075f0:	4638      	mov	r0, r7
 80075f2:	f7ff ffa5 	bl	8007540 <sbrk_aligned>
 80075f6:	3001      	adds	r0, #1
 80075f8:	d02b      	beq.n	8007652 <_malloc_r+0xd2>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	442b      	add	r3, r5
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	e00e      	b.n	8007620 <_malloc_r+0xa0>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	1b52      	subs	r2, r2, r5
 8007606:	d41e      	bmi.n	8007646 <_malloc_r+0xc6>
 8007608:	2a0b      	cmp	r2, #11
 800760a:	d916      	bls.n	800763a <_malloc_r+0xba>
 800760c:	1961      	adds	r1, r4, r5
 800760e:	42a3      	cmp	r3, r4
 8007610:	6025      	str	r5, [r4, #0]
 8007612:	bf18      	it	ne
 8007614:	6059      	strne	r1, [r3, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	bf08      	it	eq
 800761a:	6031      	streq	r1, [r6, #0]
 800761c:	5162      	str	r2, [r4, r5]
 800761e:	604b      	str	r3, [r1, #4]
 8007620:	4638      	mov	r0, r7
 8007622:	f104 060b 	add.w	r6, r4, #11
 8007626:	f000 fbe7 	bl	8007df8 <__malloc_unlock>
 800762a:	f026 0607 	bic.w	r6, r6, #7
 800762e:	1d23      	adds	r3, r4, #4
 8007630:	1af2      	subs	r2, r6, r3
 8007632:	d0b6      	beq.n	80075a2 <_malloc_r+0x22>
 8007634:	1b9b      	subs	r3, r3, r6
 8007636:	50a3      	str	r3, [r4, r2]
 8007638:	e7b3      	b.n	80075a2 <_malloc_r+0x22>
 800763a:	6862      	ldr	r2, [r4, #4]
 800763c:	42a3      	cmp	r3, r4
 800763e:	bf0c      	ite	eq
 8007640:	6032      	streq	r2, [r6, #0]
 8007642:	605a      	strne	r2, [r3, #4]
 8007644:	e7ec      	b.n	8007620 <_malloc_r+0xa0>
 8007646:	4623      	mov	r3, r4
 8007648:	6864      	ldr	r4, [r4, #4]
 800764a:	e7b2      	b.n	80075b2 <_malloc_r+0x32>
 800764c:	4634      	mov	r4, r6
 800764e:	6876      	ldr	r6, [r6, #4]
 8007650:	e7b9      	b.n	80075c6 <_malloc_r+0x46>
 8007652:	230c      	movs	r3, #12
 8007654:	603b      	str	r3, [r7, #0]
 8007656:	4638      	mov	r0, r7
 8007658:	f000 fbce 	bl	8007df8 <__malloc_unlock>
 800765c:	e7a1      	b.n	80075a2 <_malloc_r+0x22>
 800765e:	6025      	str	r5, [r4, #0]
 8007660:	e7de      	b.n	8007620 <_malloc_r+0xa0>
 8007662:	bf00      	nop
 8007664:	20000378 	.word	0x20000378

08007668 <__ssputs_r>:
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	688e      	ldr	r6, [r1, #8]
 800766e:	429e      	cmp	r6, r3
 8007670:	4682      	mov	sl, r0
 8007672:	460c      	mov	r4, r1
 8007674:	4690      	mov	r8, r2
 8007676:	461f      	mov	r7, r3
 8007678:	d838      	bhi.n	80076ec <__ssputs_r+0x84>
 800767a:	898a      	ldrh	r2, [r1, #12]
 800767c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007680:	d032      	beq.n	80076e8 <__ssputs_r+0x80>
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	6909      	ldr	r1, [r1, #16]
 8007686:	eba5 0901 	sub.w	r9, r5, r1
 800768a:	6965      	ldr	r5, [r4, #20]
 800768c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007694:	3301      	adds	r3, #1
 8007696:	444b      	add	r3, r9
 8007698:	106d      	asrs	r5, r5, #1
 800769a:	429d      	cmp	r5, r3
 800769c:	bf38      	it	cc
 800769e:	461d      	movcc	r5, r3
 80076a0:	0553      	lsls	r3, r2, #21
 80076a2:	d531      	bpl.n	8007708 <__ssputs_r+0xa0>
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7ff ff6b 	bl	8007580 <_malloc_r>
 80076aa:	4606      	mov	r6, r0
 80076ac:	b950      	cbnz	r0, 80076c4 <__ssputs_r+0x5c>
 80076ae:	230c      	movs	r3, #12
 80076b0:	f8ca 3000 	str.w	r3, [sl]
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	6921      	ldr	r1, [r4, #16]
 80076c6:	464a      	mov	r2, r9
 80076c8:	f000 fb68 	bl	8007d9c <memcpy>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	6126      	str	r6, [r4, #16]
 80076da:	6165      	str	r5, [r4, #20]
 80076dc:	444e      	add	r6, r9
 80076de:	eba5 0509 	sub.w	r5, r5, r9
 80076e2:	6026      	str	r6, [r4, #0]
 80076e4:	60a5      	str	r5, [r4, #8]
 80076e6:	463e      	mov	r6, r7
 80076e8:	42be      	cmp	r6, r7
 80076ea:	d900      	bls.n	80076ee <__ssputs_r+0x86>
 80076ec:	463e      	mov	r6, r7
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	4632      	mov	r2, r6
 80076f2:	4641      	mov	r1, r8
 80076f4:	f000 fb60 	bl	8007db8 <memmove>
 80076f8:	68a3      	ldr	r3, [r4, #8]
 80076fa:	1b9b      	subs	r3, r3, r6
 80076fc:	60a3      	str	r3, [r4, #8]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	4433      	add	r3, r6
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	2000      	movs	r0, #0
 8007706:	e7db      	b.n	80076c0 <__ssputs_r+0x58>
 8007708:	462a      	mov	r2, r5
 800770a:	f000 fb7b 	bl	8007e04 <_realloc_r>
 800770e:	4606      	mov	r6, r0
 8007710:	2800      	cmp	r0, #0
 8007712:	d1e1      	bne.n	80076d8 <__ssputs_r+0x70>
 8007714:	6921      	ldr	r1, [r4, #16]
 8007716:	4650      	mov	r0, sl
 8007718:	f7ff fec6 	bl	80074a8 <_free_r>
 800771c:	e7c7      	b.n	80076ae <__ssputs_r+0x46>
	...

08007720 <_svfiprintf_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4698      	mov	r8, r3
 8007726:	898b      	ldrh	r3, [r1, #12]
 8007728:	061b      	lsls	r3, r3, #24
 800772a:	b09d      	sub	sp, #116	; 0x74
 800772c:	4607      	mov	r7, r0
 800772e:	460d      	mov	r5, r1
 8007730:	4614      	mov	r4, r2
 8007732:	d50e      	bpl.n	8007752 <_svfiprintf_r+0x32>
 8007734:	690b      	ldr	r3, [r1, #16]
 8007736:	b963      	cbnz	r3, 8007752 <_svfiprintf_r+0x32>
 8007738:	2140      	movs	r1, #64	; 0x40
 800773a:	f7ff ff21 	bl	8007580 <_malloc_r>
 800773e:	6028      	str	r0, [r5, #0]
 8007740:	6128      	str	r0, [r5, #16]
 8007742:	b920      	cbnz	r0, 800774e <_svfiprintf_r+0x2e>
 8007744:	230c      	movs	r3, #12
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e0d1      	b.n	80078f2 <_svfiprintf_r+0x1d2>
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	616b      	str	r3, [r5, #20]
 8007752:	2300      	movs	r3, #0
 8007754:	9309      	str	r3, [sp, #36]	; 0x24
 8007756:	2320      	movs	r3, #32
 8007758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800775c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007760:	2330      	movs	r3, #48	; 0x30
 8007762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800790c <_svfiprintf_r+0x1ec>
 8007766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800776a:	f04f 0901 	mov.w	r9, #1
 800776e:	4623      	mov	r3, r4
 8007770:	469a      	mov	sl, r3
 8007772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007776:	b10a      	cbz	r2, 800777c <_svfiprintf_r+0x5c>
 8007778:	2a25      	cmp	r2, #37	; 0x25
 800777a:	d1f9      	bne.n	8007770 <_svfiprintf_r+0x50>
 800777c:	ebba 0b04 	subs.w	fp, sl, r4
 8007780:	d00b      	beq.n	800779a <_svfiprintf_r+0x7a>
 8007782:	465b      	mov	r3, fp
 8007784:	4622      	mov	r2, r4
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ff6d 	bl	8007668 <__ssputs_r>
 800778e:	3001      	adds	r0, #1
 8007790:	f000 80aa 	beq.w	80078e8 <_svfiprintf_r+0x1c8>
 8007794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007796:	445a      	add	r2, fp
 8007798:	9209      	str	r2, [sp, #36]	; 0x24
 800779a:	f89a 3000 	ldrb.w	r3, [sl]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80a2 	beq.w	80078e8 <_svfiprintf_r+0x1c8>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295
 80077aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ae:	f10a 0a01 	add.w	sl, sl, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9307      	str	r3, [sp, #28]
 80077b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ba:	931a      	str	r3, [sp, #104]	; 0x68
 80077bc:	4654      	mov	r4, sl
 80077be:	2205      	movs	r2, #5
 80077c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c4:	4851      	ldr	r0, [pc, #324]	; (800790c <_svfiprintf_r+0x1ec>)
 80077c6:	f7f8 fd1b 	bl	8000200 <memchr>
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	b9d8      	cbnz	r0, 8007806 <_svfiprintf_r+0xe6>
 80077ce:	06d0      	lsls	r0, r2, #27
 80077d0:	bf44      	itt	mi
 80077d2:	2320      	movmi	r3, #32
 80077d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d8:	0711      	lsls	r1, r2, #28
 80077da:	bf44      	itt	mi
 80077dc:	232b      	movmi	r3, #43	; 0x2b
 80077de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e2:	f89a 3000 	ldrb.w	r3, [sl]
 80077e6:	2b2a      	cmp	r3, #42	; 0x2a
 80077e8:	d015      	beq.n	8007816 <_svfiprintf_r+0xf6>
 80077ea:	9a07      	ldr	r2, [sp, #28]
 80077ec:	4654      	mov	r4, sl
 80077ee:	2000      	movs	r0, #0
 80077f0:	f04f 0c0a 	mov.w	ip, #10
 80077f4:	4621      	mov	r1, r4
 80077f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077fa:	3b30      	subs	r3, #48	; 0x30
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d94e      	bls.n	800789e <_svfiprintf_r+0x17e>
 8007800:	b1b0      	cbz	r0, 8007830 <_svfiprintf_r+0x110>
 8007802:	9207      	str	r2, [sp, #28]
 8007804:	e014      	b.n	8007830 <_svfiprintf_r+0x110>
 8007806:	eba0 0308 	sub.w	r3, r0, r8
 800780a:	fa09 f303 	lsl.w	r3, r9, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	46a2      	mov	sl, r4
 8007814:	e7d2      	b.n	80077bc <_svfiprintf_r+0x9c>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d19      	adds	r1, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9103      	str	r1, [sp, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfbb      	ittet	lt
 8007822:	425b      	neglt	r3, r3
 8007824:	f042 0202 	orrlt.w	r2, r2, #2
 8007828:	9307      	strge	r3, [sp, #28]
 800782a:	9307      	strlt	r3, [sp, #28]
 800782c:	bfb8      	it	lt
 800782e:	9204      	strlt	r2, [sp, #16]
 8007830:	7823      	ldrb	r3, [r4, #0]
 8007832:	2b2e      	cmp	r3, #46	; 0x2e
 8007834:	d10c      	bne.n	8007850 <_svfiprintf_r+0x130>
 8007836:	7863      	ldrb	r3, [r4, #1]
 8007838:	2b2a      	cmp	r3, #42	; 0x2a
 800783a:	d135      	bne.n	80078a8 <_svfiprintf_r+0x188>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9203      	str	r2, [sp, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfb8      	it	lt
 8007848:	f04f 33ff 	movlt.w	r3, #4294967295
 800784c:	3402      	adds	r4, #2
 800784e:	9305      	str	r3, [sp, #20]
 8007850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800791c <_svfiprintf_r+0x1fc>
 8007854:	7821      	ldrb	r1, [r4, #0]
 8007856:	2203      	movs	r2, #3
 8007858:	4650      	mov	r0, sl
 800785a:	f7f8 fcd1 	bl	8000200 <memchr>
 800785e:	b140      	cbz	r0, 8007872 <_svfiprintf_r+0x152>
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	eba0 000a 	sub.w	r0, r0, sl
 8007866:	fa03 f000 	lsl.w	r0, r3, r0
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	4303      	orrs	r3, r0
 800786e:	3401      	adds	r4, #1
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007876:	4826      	ldr	r0, [pc, #152]	; (8007910 <_svfiprintf_r+0x1f0>)
 8007878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800787c:	2206      	movs	r2, #6
 800787e:	f7f8 fcbf 	bl	8000200 <memchr>
 8007882:	2800      	cmp	r0, #0
 8007884:	d038      	beq.n	80078f8 <_svfiprintf_r+0x1d8>
 8007886:	4b23      	ldr	r3, [pc, #140]	; (8007914 <_svfiprintf_r+0x1f4>)
 8007888:	bb1b      	cbnz	r3, 80078d2 <_svfiprintf_r+0x1b2>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	3307      	adds	r3, #7
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	3308      	adds	r3, #8
 8007894:	9303      	str	r3, [sp, #12]
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	4433      	add	r3, r6
 800789a:	9309      	str	r3, [sp, #36]	; 0x24
 800789c:	e767      	b.n	800776e <_svfiprintf_r+0x4e>
 800789e:	fb0c 3202 	mla	r2, ip, r2, r3
 80078a2:	460c      	mov	r4, r1
 80078a4:	2001      	movs	r0, #1
 80078a6:	e7a5      	b.n	80077f4 <_svfiprintf_r+0xd4>
 80078a8:	2300      	movs	r3, #0
 80078aa:	3401      	adds	r4, #1
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	4619      	mov	r1, r3
 80078b0:	f04f 0c0a 	mov.w	ip, #10
 80078b4:	4620      	mov	r0, r4
 80078b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ba:	3a30      	subs	r2, #48	; 0x30
 80078bc:	2a09      	cmp	r2, #9
 80078be:	d903      	bls.n	80078c8 <_svfiprintf_r+0x1a8>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0c5      	beq.n	8007850 <_svfiprintf_r+0x130>
 80078c4:	9105      	str	r1, [sp, #20]
 80078c6:	e7c3      	b.n	8007850 <_svfiprintf_r+0x130>
 80078c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078cc:	4604      	mov	r4, r0
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7f0      	b.n	80078b4 <_svfiprintf_r+0x194>
 80078d2:	ab03      	add	r3, sp, #12
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	462a      	mov	r2, r5
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <_svfiprintf_r+0x1f8>)
 80078da:	a904      	add	r1, sp, #16
 80078dc:	4638      	mov	r0, r7
 80078de:	f3af 8000 	nop.w
 80078e2:	1c42      	adds	r2, r0, #1
 80078e4:	4606      	mov	r6, r0
 80078e6:	d1d6      	bne.n	8007896 <_svfiprintf_r+0x176>
 80078e8:	89ab      	ldrh	r3, [r5, #12]
 80078ea:	065b      	lsls	r3, r3, #25
 80078ec:	f53f af2c 	bmi.w	8007748 <_svfiprintf_r+0x28>
 80078f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f2:	b01d      	add	sp, #116	; 0x74
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	ab03      	add	r3, sp, #12
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	462a      	mov	r2, r5
 80078fe:	4b06      	ldr	r3, [pc, #24]	; (8007918 <_svfiprintf_r+0x1f8>)
 8007900:	a904      	add	r1, sp, #16
 8007902:	4638      	mov	r0, r7
 8007904:	f000 f87a 	bl	80079fc <_printf_i>
 8007908:	e7eb      	b.n	80078e2 <_svfiprintf_r+0x1c2>
 800790a:	bf00      	nop
 800790c:	08008004 	.word	0x08008004
 8007910:	0800800e 	.word	0x0800800e
 8007914:	00000000 	.word	0x00000000
 8007918:	08007669 	.word	0x08007669
 800791c:	0800800a 	.word	0x0800800a

08007920 <_printf_common>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4616      	mov	r6, r2
 8007926:	4699      	mov	r9, r3
 8007928:	688a      	ldr	r2, [r1, #8]
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007930:	4293      	cmp	r3, r2
 8007932:	bfb8      	it	lt
 8007934:	4613      	movlt	r3, r2
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800793c:	4607      	mov	r7, r0
 800793e:	460c      	mov	r4, r1
 8007940:	b10a      	cbz	r2, 8007946 <_printf_common+0x26>
 8007942:	3301      	adds	r3, #1
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	0699      	lsls	r1, r3, #26
 800794a:	bf42      	ittt	mi
 800794c:	6833      	ldrmi	r3, [r6, #0]
 800794e:	3302      	addmi	r3, #2
 8007950:	6033      	strmi	r3, [r6, #0]
 8007952:	6825      	ldr	r5, [r4, #0]
 8007954:	f015 0506 	ands.w	r5, r5, #6
 8007958:	d106      	bne.n	8007968 <_printf_common+0x48>
 800795a:	f104 0a19 	add.w	sl, r4, #25
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	6832      	ldr	r2, [r6, #0]
 8007962:	1a9b      	subs	r3, r3, r2
 8007964:	42ab      	cmp	r3, r5
 8007966:	dc26      	bgt.n	80079b6 <_printf_common+0x96>
 8007968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800796c:	1e13      	subs	r3, r2, #0
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	bf18      	it	ne
 8007972:	2301      	movne	r3, #1
 8007974:	0692      	lsls	r2, r2, #26
 8007976:	d42b      	bmi.n	80079d0 <_printf_common+0xb0>
 8007978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797c:	4649      	mov	r1, r9
 800797e:	4638      	mov	r0, r7
 8007980:	47c0      	blx	r8
 8007982:	3001      	adds	r0, #1
 8007984:	d01e      	beq.n	80079c4 <_printf_common+0xa4>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	68e5      	ldr	r5, [r4, #12]
 800798a:	6832      	ldr	r2, [r6, #0]
 800798c:	f003 0306 	and.w	r3, r3, #6
 8007990:	2b04      	cmp	r3, #4
 8007992:	bf08      	it	eq
 8007994:	1aad      	subeq	r5, r5, r2
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	6922      	ldr	r2, [r4, #16]
 800799a:	bf0c      	ite	eq
 800799c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a0:	2500      	movne	r5, #0
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bfc4      	itt	gt
 80079a6:	1a9b      	subgt	r3, r3, r2
 80079a8:	18ed      	addgt	r5, r5, r3
 80079aa:	2600      	movs	r6, #0
 80079ac:	341a      	adds	r4, #26
 80079ae:	42b5      	cmp	r5, r6
 80079b0:	d11a      	bne.n	80079e8 <_printf_common+0xc8>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e008      	b.n	80079c8 <_printf_common+0xa8>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4652      	mov	r2, sl
 80079ba:	4649      	mov	r1, r9
 80079bc:	4638      	mov	r0, r7
 80079be:	47c0      	blx	r8
 80079c0:	3001      	adds	r0, #1
 80079c2:	d103      	bne.n	80079cc <_printf_common+0xac>
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079cc:	3501      	adds	r5, #1
 80079ce:	e7c6      	b.n	800795e <_printf_common+0x3e>
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	2030      	movs	r0, #48	; 0x30
 80079d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079da:	4422      	add	r2, r4
 80079dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079e4:	3302      	adds	r3, #2
 80079e6:	e7c7      	b.n	8007978 <_printf_common+0x58>
 80079e8:	2301      	movs	r3, #1
 80079ea:	4622      	mov	r2, r4
 80079ec:	4649      	mov	r1, r9
 80079ee:	4638      	mov	r0, r7
 80079f0:	47c0      	blx	r8
 80079f2:	3001      	adds	r0, #1
 80079f4:	d0e6      	beq.n	80079c4 <_printf_common+0xa4>
 80079f6:	3601      	adds	r6, #1
 80079f8:	e7d9      	b.n	80079ae <_printf_common+0x8e>
	...

080079fc <_printf_i>:
 80079fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	7e0f      	ldrb	r7, [r1, #24]
 8007a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a04:	2f78      	cmp	r7, #120	; 0x78
 8007a06:	4691      	mov	r9, r2
 8007a08:	4680      	mov	r8, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	469a      	mov	sl, r3
 8007a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a12:	d807      	bhi.n	8007a24 <_printf_i+0x28>
 8007a14:	2f62      	cmp	r7, #98	; 0x62
 8007a16:	d80a      	bhi.n	8007a2e <_printf_i+0x32>
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	f000 80d8 	beq.w	8007bce <_printf_i+0x1d2>
 8007a1e:	2f58      	cmp	r7, #88	; 0x58
 8007a20:	f000 80a3 	beq.w	8007b6a <_printf_i+0x16e>
 8007a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a2c:	e03a      	b.n	8007aa4 <_printf_i+0xa8>
 8007a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a32:	2b15      	cmp	r3, #21
 8007a34:	d8f6      	bhi.n	8007a24 <_printf_i+0x28>
 8007a36:	a101      	add	r1, pc, #4	; (adr r1, 8007a3c <_printf_i+0x40>)
 8007a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007aa9 	.word	0x08007aa9
 8007a44:	08007a25 	.word	0x08007a25
 8007a48:	08007a25 	.word	0x08007a25
 8007a4c:	08007a25 	.word	0x08007a25
 8007a50:	08007a25 	.word	0x08007a25
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007a25 	.word	0x08007a25
 8007a5c:	08007a25 	.word	0x08007a25
 8007a60:	08007a25 	.word	0x08007a25
 8007a64:	08007a25 	.word	0x08007a25
 8007a68:	08007bb5 	.word	0x08007bb5
 8007a6c:	08007ad9 	.word	0x08007ad9
 8007a70:	08007b97 	.word	0x08007b97
 8007a74:	08007a25 	.word	0x08007a25
 8007a78:	08007a25 	.word	0x08007a25
 8007a7c:	08007bd7 	.word	0x08007bd7
 8007a80:	08007a25 	.word	0x08007a25
 8007a84:	08007ad9 	.word	0x08007ad9
 8007a88:	08007a25 	.word	0x08007a25
 8007a8c:	08007a25 	.word	0x08007a25
 8007a90:	08007b9f 	.word	0x08007b9f
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	1d1a      	adds	r2, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0a3      	b.n	8007bf0 <_printf_i+0x1f4>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	6829      	ldr	r1, [r5, #0]
 8007aac:	0606      	lsls	r6, r0, #24
 8007aae:	f101 0304 	add.w	r3, r1, #4
 8007ab2:	d50a      	bpl.n	8007aca <_printf_i+0xce>
 8007ab4:	680e      	ldr	r6, [r1, #0]
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	da03      	bge.n	8007ac4 <_printf_i+0xc8>
 8007abc:	232d      	movs	r3, #45	; 0x2d
 8007abe:	4276      	negs	r6, r6
 8007ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac4:	485e      	ldr	r0, [pc, #376]	; (8007c40 <_printf_i+0x244>)
 8007ac6:	230a      	movs	r3, #10
 8007ac8:	e019      	b.n	8007afe <_printf_i+0x102>
 8007aca:	680e      	ldr	r6, [r1, #0]
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ad2:	bf18      	it	ne
 8007ad4:	b236      	sxthne	r6, r6
 8007ad6:	e7ef      	b.n	8007ab8 <_printf_i+0xbc>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	6820      	ldr	r0, [r4, #0]
 8007adc:	1d19      	adds	r1, r3, #4
 8007ade:	6029      	str	r1, [r5, #0]
 8007ae0:	0601      	lsls	r1, r0, #24
 8007ae2:	d501      	bpl.n	8007ae8 <_printf_i+0xec>
 8007ae4:	681e      	ldr	r6, [r3, #0]
 8007ae6:	e002      	b.n	8007aee <_printf_i+0xf2>
 8007ae8:	0646      	lsls	r6, r0, #25
 8007aea:	d5fb      	bpl.n	8007ae4 <_printf_i+0xe8>
 8007aec:	881e      	ldrh	r6, [r3, #0]
 8007aee:	4854      	ldr	r0, [pc, #336]	; (8007c40 <_printf_i+0x244>)
 8007af0:	2f6f      	cmp	r7, #111	; 0x6f
 8007af2:	bf0c      	ite	eq
 8007af4:	2308      	moveq	r3, #8
 8007af6:	230a      	movne	r3, #10
 8007af8:	2100      	movs	r1, #0
 8007afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007afe:	6865      	ldr	r5, [r4, #4]
 8007b00:	60a5      	str	r5, [r4, #8]
 8007b02:	2d00      	cmp	r5, #0
 8007b04:	bfa2      	ittt	ge
 8007b06:	6821      	ldrge	r1, [r4, #0]
 8007b08:	f021 0104 	bicge.w	r1, r1, #4
 8007b0c:	6021      	strge	r1, [r4, #0]
 8007b0e:	b90e      	cbnz	r6, 8007b14 <_printf_i+0x118>
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	d04d      	beq.n	8007bb0 <_printf_i+0x1b4>
 8007b14:	4615      	mov	r5, r2
 8007b16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b1e:	5dc7      	ldrb	r7, [r0, r7]
 8007b20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b24:	4637      	mov	r7, r6
 8007b26:	42bb      	cmp	r3, r7
 8007b28:	460e      	mov	r6, r1
 8007b2a:	d9f4      	bls.n	8007b16 <_printf_i+0x11a>
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d10b      	bne.n	8007b48 <_printf_i+0x14c>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07de      	lsls	r6, r3, #31
 8007b34:	d508      	bpl.n	8007b48 <_printf_i+0x14c>
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	6861      	ldr	r1, [r4, #4]
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	bfde      	ittt	le
 8007b3e:	2330      	movle	r3, #48	; 0x30
 8007b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b48:	1b52      	subs	r2, r2, r5
 8007b4a:	6122      	str	r2, [r4, #16]
 8007b4c:	f8cd a000 	str.w	sl, [sp]
 8007b50:	464b      	mov	r3, r9
 8007b52:	aa03      	add	r2, sp, #12
 8007b54:	4621      	mov	r1, r4
 8007b56:	4640      	mov	r0, r8
 8007b58:	f7ff fee2 	bl	8007920 <_printf_common>
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d14c      	bne.n	8007bfa <_printf_i+0x1fe>
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	b004      	add	sp, #16
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6a:	4835      	ldr	r0, [pc, #212]	; (8007c40 <_printf_i+0x244>)
 8007b6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b70:	6829      	ldr	r1, [r5, #0]
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b78:	6029      	str	r1, [r5, #0]
 8007b7a:	061d      	lsls	r5, r3, #24
 8007b7c:	d514      	bpl.n	8007ba8 <_printf_i+0x1ac>
 8007b7e:	07df      	lsls	r7, r3, #31
 8007b80:	bf44      	itt	mi
 8007b82:	f043 0320 	orrmi.w	r3, r3, #32
 8007b86:	6023      	strmi	r3, [r4, #0]
 8007b88:	b91e      	cbnz	r6, 8007b92 <_printf_i+0x196>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f023 0320 	bic.w	r3, r3, #32
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	2310      	movs	r3, #16
 8007b94:	e7b0      	b.n	8007af8 <_printf_i+0xfc>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f043 0320 	orr.w	r3, r3, #32
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	2378      	movs	r3, #120	; 0x78
 8007ba0:	4828      	ldr	r0, [pc, #160]	; (8007c44 <_printf_i+0x248>)
 8007ba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ba6:	e7e3      	b.n	8007b70 <_printf_i+0x174>
 8007ba8:	0659      	lsls	r1, r3, #25
 8007baa:	bf48      	it	mi
 8007bac:	b2b6      	uxthmi	r6, r6
 8007bae:	e7e6      	b.n	8007b7e <_printf_i+0x182>
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	e7bb      	b.n	8007b2c <_printf_i+0x130>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	6826      	ldr	r6, [r4, #0]
 8007bb8:	6961      	ldr	r1, [r4, #20]
 8007bba:	1d18      	adds	r0, r3, #4
 8007bbc:	6028      	str	r0, [r5, #0]
 8007bbe:	0635      	lsls	r5, r6, #24
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_i+0x1cc>
 8007bc4:	6019      	str	r1, [r3, #0]
 8007bc6:	e002      	b.n	8007bce <_printf_i+0x1d2>
 8007bc8:	0670      	lsls	r0, r6, #25
 8007bca:	d5fb      	bpl.n	8007bc4 <_printf_i+0x1c8>
 8007bcc:	8019      	strh	r1, [r3, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	4615      	mov	r5, r2
 8007bd4:	e7ba      	b.n	8007b4c <_printf_i+0x150>
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	602a      	str	r2, [r5, #0]
 8007bdc:	681d      	ldr	r5, [r3, #0]
 8007bde:	6862      	ldr	r2, [r4, #4]
 8007be0:	2100      	movs	r1, #0
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7f8 fb0c 	bl	8000200 <memchr>
 8007be8:	b108      	cbz	r0, 8007bee <_printf_i+0x1f2>
 8007bea:	1b40      	subs	r0, r0, r5
 8007bec:	6060      	str	r0, [r4, #4]
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf8:	e7a8      	b.n	8007b4c <_printf_i+0x150>
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	462a      	mov	r2, r5
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	47d0      	blx	sl
 8007c04:	3001      	adds	r0, #1
 8007c06:	d0ab      	beq.n	8007b60 <_printf_i+0x164>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	079b      	lsls	r3, r3, #30
 8007c0c:	d413      	bmi.n	8007c36 <_printf_i+0x23a>
 8007c0e:	68e0      	ldr	r0, [r4, #12]
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	4298      	cmp	r0, r3
 8007c14:	bfb8      	it	lt
 8007c16:	4618      	movlt	r0, r3
 8007c18:	e7a4      	b.n	8007b64 <_printf_i+0x168>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4640      	mov	r0, r8
 8007c22:	47d0      	blx	sl
 8007c24:	3001      	adds	r0, #1
 8007c26:	d09b      	beq.n	8007b60 <_printf_i+0x164>
 8007c28:	3501      	adds	r5, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	9903      	ldr	r1, [sp, #12]
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dcf2      	bgt.n	8007c1a <_printf_i+0x21e>
 8007c34:	e7eb      	b.n	8007c0e <_printf_i+0x212>
 8007c36:	2500      	movs	r5, #0
 8007c38:	f104 0619 	add.w	r6, r4, #25
 8007c3c:	e7f5      	b.n	8007c2a <_printf_i+0x22e>
 8007c3e:	bf00      	nop
 8007c40:	08008015 	.word	0x08008015
 8007c44:	08008026 	.word	0x08008026

08007c48 <_sbrk_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	; (8007c64 <_sbrk_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7f9 ff22 	bl	8001a9c <_sbrk>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_sbrk_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_sbrk_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000380 	.word	0x20000380

08007c68 <__sread>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	f000 f8f8 	bl	8007e64 <_read_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	bfab      	itete	ge
 8007c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c7c:	181b      	addge	r3, r3, r0
 8007c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c82:	bfac      	ite	ge
 8007c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c86:	81a3      	strhlt	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__swrite>:
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	461f      	mov	r7, r3
 8007c90:	898b      	ldrh	r3, [r1, #12]
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	4616      	mov	r6, r2
 8007c9a:	d505      	bpl.n	8007ca8 <__swrite+0x1e>
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f000 f868 	bl	8007d78 <_lseek_r>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	f000 b817 	b.w	8007cf0 <_write_r>

08007cc2 <__sseek>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 f855 	bl	8007d78 <_lseek_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	bf15      	itete	ne
 8007cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cde:	81a3      	strheq	r3, [r4, #12]
 8007ce0:	bf18      	it	ne
 8007ce2:	81a3      	strhne	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__sclose>:
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 b813 	b.w	8007d14 <_close_r>
	...

08007cf0 <_write_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_write_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7f9 fe7b 	bl	80019fa <_write>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_write_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_write_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000380 	.word	0x20000380

08007d14 <_close_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	; (8007d30 <_close_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7f9 fe87 	bl	8001a32 <_close>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_close_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_close_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000380 	.word	0x20000380

08007d34 <_fstat_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	; (8007d54 <_fstat_r+0x20>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	f7f9 fe82 	bl	8001a4a <_fstat>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	d102      	bne.n	8007d50 <_fstat_r+0x1c>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b103      	cbz	r3, 8007d50 <_fstat_r+0x1c>
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	bd38      	pop	{r3, r4, r5, pc}
 8007d52:	bf00      	nop
 8007d54:	20000380 	.word	0x20000380

08007d58 <_isatty_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	; (8007d74 <_isatty_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7f9 fe81 	bl	8001a6a <_isatty>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_isatty_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_isatty_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000380 	.word	0x20000380

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_lseek_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7f9 fe7a 	bl	8001a80 <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20000380 	.word	0x20000380

08007d9c <memcpy>:
 8007d9c:	440a      	add	r2, r1
 8007d9e:	4291      	cmp	r1, r2
 8007da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da4:	d100      	bne.n	8007da8 <memcpy+0xc>
 8007da6:	4770      	bx	lr
 8007da8:	b510      	push	{r4, lr}
 8007daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007db2:	4291      	cmp	r1, r2
 8007db4:	d1f9      	bne.n	8007daa <memcpy+0xe>
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <memmove>:
 8007db8:	4288      	cmp	r0, r1
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	eb01 0402 	add.w	r4, r1, r2
 8007dc0:	d902      	bls.n	8007dc8 <memmove+0x10>
 8007dc2:	4284      	cmp	r4, r0
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	d807      	bhi.n	8007dd8 <memmove+0x20>
 8007dc8:	1e43      	subs	r3, r0, #1
 8007dca:	42a1      	cmp	r1, r4
 8007dcc:	d008      	beq.n	8007de0 <memmove+0x28>
 8007dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd6:	e7f8      	b.n	8007dca <memmove+0x12>
 8007dd8:	4402      	add	r2, r0
 8007dda:	4601      	mov	r1, r0
 8007ddc:	428a      	cmp	r2, r1
 8007dde:	d100      	bne.n	8007de2 <memmove+0x2a>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dea:	e7f7      	b.n	8007ddc <memmove+0x24>

08007dec <__malloc_lock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__malloc_lock+0x8>)
 8007dee:	f7ff baf3 	b.w	80073d8 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000374 	.word	0x20000374

08007df8 <__malloc_unlock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__malloc_unlock+0x8>)
 8007dfa:	f7ff baee 	b.w	80073da <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20000374 	.word	0x20000374

08007e04 <_realloc_r>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	b921      	cbnz	r1, 8007e1a <_realloc_r+0x16>
 8007e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	4611      	mov	r1, r2
 8007e16:	f7ff bbb3 	b.w	8007580 <_malloc_r>
 8007e1a:	b92a      	cbnz	r2, 8007e28 <_realloc_r+0x24>
 8007e1c:	f7ff fb44 	bl	80074a8 <_free_r>
 8007e20:	4625      	mov	r5, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e28:	f000 f82e 	bl	8007e88 <_malloc_usable_size_r>
 8007e2c:	4284      	cmp	r4, r0
 8007e2e:	4607      	mov	r7, r0
 8007e30:	d802      	bhi.n	8007e38 <_realloc_r+0x34>
 8007e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e36:	d812      	bhi.n	8007e5e <_realloc_r+0x5a>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f7ff fba0 	bl	8007580 <_malloc_r>
 8007e40:	4605      	mov	r5, r0
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d0ed      	beq.n	8007e22 <_realloc_r+0x1e>
 8007e46:	42bc      	cmp	r4, r7
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	bf28      	it	cs
 8007e4e:	463a      	movcs	r2, r7
 8007e50:	f7ff ffa4 	bl	8007d9c <memcpy>
 8007e54:	4631      	mov	r1, r6
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7ff fb26 	bl	80074a8 <_free_r>
 8007e5c:	e7e1      	b.n	8007e22 <_realloc_r+0x1e>
 8007e5e:	4635      	mov	r5, r6
 8007e60:	e7df      	b.n	8007e22 <_realloc_r+0x1e>
	...

08007e64 <_read_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_read_r+0x20>)
 8007e68:	4604      	mov	r4, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7f9 fda4 	bl	80019c0 <_read>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_read_r+0x1e>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_read_r+0x1e>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20000380 	.word	0x20000380

08007e88 <_malloc_usable_size_r>:
 8007e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e8c:	1f18      	subs	r0, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbc      	itt	lt
 8007e92:	580b      	ldrlt	r3, [r1, r0]
 8007e94:	18c0      	addlt	r0, r0, r3
 8007e96:	4770      	bx	lr

08007e98 <_init>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_fini>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr
