
16.BluetoothAlarmTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800692c  0800692c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006934  08006934  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000238  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017141  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c4  00000000  00000000  000371e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  0003b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002769b  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c9a  00000000  00000000  0006412b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef774  00000000  00000000  0007ddc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d539  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a0  00000000  00000000  0016d58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006854 	.word	0x08006854

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006854 	.word	0x08006854

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <I2C_Scan>:





void I2C_Scan() {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <I2C_Scan+0xc0>)
 80005ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	6020      	str	r0, [r4, #0]
 80005bc:	3404      	adds	r4, #4
 80005be:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <I2C_Scan+0xc4>)
 80005d8:	f004 fca1 	bl	8004f1e <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005e2:	e02f      	b.n	8000644 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b299      	uxth	r1, r3
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	481e      	ldr	r0, [pc, #120]	; (800066c <I2C_Scan+0xc8>)
 80005f2:	f002 faad 	bl	8002b50 <HAL_I2C_IsDeviceReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 80005fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000600:	2b00      	cmp	r3, #0
 8000602:	d113      	bne.n	800062c <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000604:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Scan+0xcc>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f005 fc7f 	bl	8005f10 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdeb 	bl	80001f0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <I2C_Scan+0xc4>)
 8000626:	f004 fc7a 	bl	8004f1e <HAL_UART_Transmit>
 800062a:	e006      	b.n	800063a <I2C_Scan+0x96>
					HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <I2C_Scan+0xd0>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <I2C_Scan+0xc4>)
 8000636:	f004 fc72 	bl	8004f1e <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800063a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d9cb      	bls.n	80005e4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2202      	movs	r2, #2
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <I2C_Scan+0xd4>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <I2C_Scan+0xc4>)
 8000656:	f004 fc62 	bl	8004f1e <HAL_UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3760      	adds	r7, #96	; 0x60
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	0800687c 	.word	0x0800687c
 8000668:	20000258 	.word	0x20000258
 800066c:	200000dc 	.word	0x200000dc
 8000670:	0800686c 	.word	0x0800686c
 8000674:	08006874 	.word	0x08006874
 8000678:	08006878 	.word	0x08006878

0800067c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b299      	uxth	r1, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <LCD_SendInternal+0xa8>)
 800069a:	f002 fa59 	bl	8002b50 <HAL_I2C_IsDeviceReady>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a8:	e7f1      	b.n	800068e <LCD_SendInternal+0x12>
			break;
 80006aa:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f023 030f 	bic.w	r3, r3, #15
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f043 030c 	orr.w	r3, r3, #12
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80006da:	7b7a      	ldrb	r2, [r7, #13]
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f043 030c 	orr.w	r3, r3, #12
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2304      	movs	r3, #4
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <LCD_SendInternal+0xa8>)
 800070c:	f002 f922 	bl	8002954 <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000714:	2005      	movs	r0, #5
 8000716:	f001 f8e3 	bl	80018e0 <HAL_Delay>
	return res;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000dc 	.word	0x200000dc

08000728 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff9c 	bl	800067c <LCD_SendInternal>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 800075c:	79b9      	ldrb	r1, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff8a 	bl	800067c <LCD_SendInternal>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2130      	movs	r1, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffd2 	bl	8000728 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffcd 	bl	8000728 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	210c      	movs	r1, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc8 	bl	8000728 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <LCD_SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80007b6:	e009      	b.n	80007cc <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc3 	bl	800074c <LCD_SendData>
		str++;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
	while (*str) {
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f1      	bne.n	80007b8 <LCD_SendString+0xe>
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <init>:

void init() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	I2C_Scan();
 80007e4:	f7ff fede 	bl	80005a4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ffc1 	bl	8000770 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ff99 	bl	8000728 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " ");
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <init+0x34>)
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ffd6 	bl	80007aa <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007fe:	21c0      	movs	r1, #192	; 0xc0
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ff91 	bl	8000728 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " ");
 8000806:	4903      	ldr	r1, [pc, #12]	; (8000814 <init+0x34>)
 8000808:	204e      	movs	r0, #78	; 0x4e
 800080a:	f7ff ffce 	bl	80007aa <LCD_SendString>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08006894 	.word	0x08006894

08000818 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_ADC1_Init+0xa0>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800085a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800087c:	f001 f854 	bl	8001928 <HAL_ADC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000886:	f000 fd66 	bl	8001356 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088a:	2303      	movs	r3, #3
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800089c:	f001 f968 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a6:	f000 fd56 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000094 	.word	0x20000094
 80008b8:	40012000 	.word	0x40012000

080008bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_ADC_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d127      	bne.n	800092e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_ADC_MspInit+0x80>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_ADC_MspInit+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_ADC_MspInit+0x80>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_ADC_MspInit+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000916:	2308      	movs	r3, #8
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_ADC_MspInit+0x84>)
 800092a:	f001 fcf3 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012000 	.word	0x40012000
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0xac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_GPIO_Init+0xac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xac>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xac>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009d0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xb0>)
 80009e2:	f001 fc97 	bl	8002314 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800

080009f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a36:	f001 fe49 	bl	80026cc <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 fc89 	bl	8001356 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a48:	f002 fbb9 	bl	80031be <HAL_I2CEx_ConfigAnalogFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a52:	f000 fc80 	bl	8001356 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a5a:	f002 fbec 	bl	8003236 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a64:	f000 fc77 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000dc 	.word	0x200000dc
 8000a70:	40005400 	.word	0x40005400
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad4:	f001 fc1e 	bl	8002314 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fe76 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f830 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f7ff ff16 	bl	8000944 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b18:	f7ff fe7e 	bl	8000818 <MX_ADC1_Init>
  MX_RTC_Init();
 8000b1c:	f000 fc20 	bl	8001360 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000b20:	f000 fdd0 	bl	80016c4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000b24:	f7ff ff68 	bl	80009f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b28:	f000 fd5e 	bl	80015e8 <MX_TIM2_Init>

  /* Initialize interrupts */
	MX_NVIC_Init();
 8000b2c:	f000 f894 	bl	8000c58 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	init();
 8000b30:	f7ff fe56 	bl	80007e0 <init>
	HAL_TIM_Base_Init(&htim2);
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <main+0x58>)
 8000b36:	f003 fd23 	bl	8004580 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <main+0x58>)
 8000b3c:	f003 fd70 	bl	8004620 <HAL_TIM_Base_Start_IT>

	now_state.mode = NORMAL;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <main+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000b46:	2201      	movs	r2, #1
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <main+0x60>)
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <main+0x64>)
 8000b4c:	f003 fb2a 	bl	80041a4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000b50:	2201      	movs	r2, #1
 8000b52:	4907      	ldr	r1, [pc, #28]	; (8000b70 <main+0x68>)
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <main+0x64>)
 8000b56:	f003 fc07 	bl	8004368 <HAL_RTC_GetDate>


		clock();
 8000b5a:	f000 fa6f 	bl	800103c <clock>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000b5e:	e7f2      	b.n	8000b46 <main+0x3e>
 8000b60:	20000210 	.word	0x20000210
 8000b64:	200001d8 	.word	0x200001d8
 8000b68:	20000194 	.word	0x20000194
 8000b6c:	200001ec 	.word	0x200001ec
 8000b70:	200001a8 	.word	0x200001a8

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 f9bc 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <SystemClock_Config+0xdc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <SystemClock_Config+0xdc>)
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <SystemClock_Config+0xdc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <SystemClock_Config+0xe0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <SystemClock_Config+0xe0>)
 8000bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <SystemClock_Config+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be8:	2308      	movs	r3, #8
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bec:	23b4      	movs	r3, #180	; 0xb4
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fba9 	bl	8003354 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c08:	f000 fba5 	bl	8001356 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c0c:	f002 fb52 	bl	80032b4 <HAL_PWREx_EnableOverDrive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c16:	f000 fb9e 	bl	8001356 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2105      	movs	r1, #5
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fe03 	bl	8003844 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c44:	f000 fb87 	bl	8001356 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2005      	movs	r0, #5
 8000c62:	f001 fa8e 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c66:	2005      	movs	r0, #5
 8000c68:	f001 faa7 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	201c      	movs	r0, #28
 8000c72:	f001 fa86 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c76:	201c      	movs	r0, #28
 8000c78:	f001 fa9f 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2027      	movs	r0, #39	; 0x27
 8000c82:	f001 fa7e 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c86:	2027      	movs	r0, #39	; 0x27
 8000c88:	f001 fa97 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2028      	movs	r0, #40	; 0x28
 8000c92:	f001 fa76 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c96:	2028      	movs	r0, #40	; 0x28
 8000c98:	f001 fa8f 	bl	80021ba <HAL_NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  GPIO_PinState pin;
  int i;


  if(GPIO_Pin == GPIO_PIN_13)
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb0:	d17c      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
  {
	current_time = HAL_GetTick();
 8000cb2:	f000 fe09 	bl	80018c8 <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a3e      	ldr	r2, [pc, #248]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cba:	6013      	str	r3, [r2, #0]
    time_interval = current_time - last_time;
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x11c>)
 8000cc8:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 8000cca:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a3a      	ldr	r2, [pc, #232]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000cd0:	6013      	str	r3, [r2, #0]

    pin = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000cd8:	f001 fcc8 	bl	800266c <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	72fb      	strb	r3, [r7, #11]

//	printf("<%d,%d>\r\n",pin,time_interval);

    if(time_interval<=2) // noise
 8000ce0:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d961      	bls.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
//    	printf("Noise %d,%d\r\n",pin,time_interval);
    }
    else
    {

      click[2].time = click[1].time;
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cee:	6113      	str	r3, [r2, #16]
      click[2].level = click[1].level;
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cf2:	7b1a      	ldrb	r2, [r3, #12]
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cf6:	751a      	strb	r2, [r3, #20]

      click[1].time = click[0].time;
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cfe:	6093      	str	r3, [r2, #8]
      click[1].level = click[0].level;
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d02:	791a      	ldrb	r2, [r3, #4]
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d06:	731a      	strb	r2, [r3, #12]

      click[0].time = time_interval;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d10:	601a      	str	r2, [r3, #0]
      click[0].level = pin;
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	7113      	strb	r3, [r2, #4]

      if( click[2].level ==GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET &&  click[0].level ==GPIO_PIN_RESET)
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d1a:	7d1b      	ldrb	r3, [r3, #20]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d122      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0xc6>
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d22:	7b1b      	ldrb	r3, [r3, #12]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d11e      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0xc6>
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11a      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0xc6>
      {
    	  for(i=0;i<3;i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	e00e      	b.n	8000d54 <HAL_GPIO_EXTI_Callback+0xb4>
    	  {
    		  if(click[i].time>= DOUBLE_CLICK_MIN && click[i].time <= DOUBLE_CLICK_MAX)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d3e:	2b0e      	cmp	r3, #14
 8000d40:	dd0b      	ble.n	8000d5a <HAL_GPIO_EXTI_Callback+0xba>
 8000d42:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d4a:	2b78      	cmp	r3, #120	; 0x78
 8000d4c:	dc05      	bgt.n	8000d5a <HAL_GPIO_EXTI_Callback+0xba>
    	  for(i=0;i<3;i++)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	dded      	ble.n	8000d36 <HAL_GPIO_EXTI_Callback+0x96>
    			  continue;
    		  }
    		  else
    			  break;
    	  }
    	  if(i==3)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d102      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0xc6>
    	  {
    		  now_state.mode = MUSIC_SELECT;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8000d62:	2203      	movs	r2, #3
 8000d64:	701a      	strb	r2, [r3, #0]
    	  }
      }

	  if(click[0].level == GPIO_PIN_RESET && click[0].time >=LONG_CLICK_MIN) // long click
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_GPIO_EXTI_Callback+0xe2>
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d76:	4293      	cmp	r3, r2
 8000d78:	dd03      	ble.n	8000d82 <HAL_GPIO_EXTI_Callback+0xe2>
	  {
		  now_state.mode = ALARM_TIME_SETTING;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
	  }

    }
  }

}
 8000d80:	e014      	b.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
	  else if(click[0].level == GPIO_PIN_RESET && click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d110      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d92:	4293      	cmp	r3, r2
 8000d94:	dc0a      	bgt.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b78      	cmp	r3, #120	; 0x78
 8000d9c:	dd06      	ble.n	8000dac <HAL_GPIO_EXTI_Callback+0x10c>
		  now_state.mode ^= TIME_SETTING;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200001b4 	.word	0x200001b4
 8000db8:	200001b0 	.word	0x200001b0
 8000dbc:	200001b8 	.word	0x200001b8
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	200001c0 	.word	0x200001c0
 8000dc8:	200001d8 	.word	0x200001d8

08000dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
		ADC_button();
 8000dde:	f000 f805 	bl	8000dec <ADC_button>
	}

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ADC_button>:


void ADC_button(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000df0:	4822      	ldr	r0, [pc, #136]	; (8000e7c <ADC_button+0x90>)
 8000df2:	f000 fddd 	bl	80019b0 <HAL_ADC_Start>
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <ADC_button+0x90>)
 8000df8:	f000 feac 	bl	8001b54 <HAL_ADC_GetValue>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <ADC_button+0x94>)
 8000e02:	801a      	strh	r2, [r3, #0]

	if(ADC_Value <= 100) now_state.button = UP;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <ADC_button+0x94>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2b64      	cmp	r3, #100	; 0x64
 8000e0a:	d803      	bhi.n	8000e14 <ADC_button+0x28>
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <ADC_button+0x98>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	705a      	strb	r2, [r3, #1]
	else if(ADC_Value>= 800 && ADC_Value<=900 ) now_state.button = DOWN;
	else if(ADC_Value>= 1900 && ADC_Value<=2000) now_state.button = LEFT;
	else if(ADC_Value>= 2900 && ADC_Value<=3100) now_state.button = RIGHT;
	else now_state.button = BASIC;
}
 8000e12:	e030      	b.n	8000e76 <ADC_button+0x8a>
	else if(ADC_Value>= 800 && ADC_Value<=900 ) now_state.button = DOWN;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <ADC_button+0x94>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e1c:	d308      	bcc.n	8000e30 <ADC_button+0x44>
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <ADC_button+0x94>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000e26:	d803      	bhi.n	8000e30 <ADC_button+0x44>
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <ADC_button+0x98>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	705a      	strb	r2, [r3, #1]
 8000e2e:	e022      	b.n	8000e76 <ADC_button+0x8a>
	else if(ADC_Value>= 1900 && ADC_Value<=2000) now_state.button = LEFT;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <ADC_button+0x94>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	f240 726b 	movw	r2, #1899	; 0x76b
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d908      	bls.n	8000e4e <ADC_button+0x62>
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <ADC_button+0x94>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e44:	d803      	bhi.n	8000e4e <ADC_button+0x62>
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <ADC_button+0x98>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	705a      	strb	r2, [r3, #1]
 8000e4c:	e013      	b.n	8000e76 <ADC_button+0x8a>
	else if(ADC_Value>= 2900 && ADC_Value<=3100) now_state.button = RIGHT;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <ADC_button+0x94>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	f640 3253 	movw	r2, #2899	; 0xb53
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d909      	bls.n	8000e6e <ADC_button+0x82>
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <ADC_button+0x94>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d803      	bhi.n	8000e6e <ADC_button+0x82>
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <ADC_button+0x98>)
 8000e68:	2203      	movs	r2, #3
 8000e6a:	705a      	strb	r2, [r3, #1]
 8000e6c:	e003      	b.n	8000e76 <ADC_button+0x8a>
	else now_state.button = BASIC;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <ADC_button+0x98>)
 8000e70:	2205      	movs	r2, #5
 8000e72:	705a      	strb	r2, [r3, #1]
}
 8000e74:	e7ff      	b.n	8000e76 <ADC_button+0x8a>
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	200001ac 	.word	0x200001ac
 8000e84:	200001d8 	.word	0x200001d8

08000e88 <LCD_Cursor>:

void LCD_Cursor(int row, int column) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	if (row == 1)row = 0x40;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <LCD_Cursor+0x14>
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	607b      	str	r3, [r7, #4]
	LCD_SendCommand(LCD_ADDR, 0x80 | (row | column));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	204e      	movs	r0, #78	; 0x4e
 8000eb4:	f7ff fc38 	bl	8000728 <LCD_SendCommand>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <set_time>:

void set_time(uint16_t Ampm,uint16_t hour1,uint16_t hour2,uint16_t min1,uint16_t min2,uint16_t sec1,uint16_t sec2){
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]



	sTime.TimeFormat = Ampm;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <set_time+0x84>)
 8000ee4:	70da      	strb	r2, [r3, #3]
	sTime.Hours = hour1<<4 | hour2;
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <set_time+0x84>)
 8000ef8:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = min1<<4 | min2;
 8000efa:	883b      	ldrh	r3, [r7, #0]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <set_time+0x84>)
 8000f0c:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = sec1<<4 | sec2;
 8000f0e:	8bbb      	ldrh	r3, [r7, #28]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	8c3b      	ldrh	r3, [r7, #32]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <set_time+0x84>)
 8000f20:	709a      	strb	r2, [r3, #2]

	if(sTime.Hours > 0x12) sTime.Hours = 0x10;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <set_time+0x84>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d902      	bls.n	8000f30 <set_time+0x70>
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <set_time+0x84>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]


	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000f30:	2201      	movs	r2, #1
 8000f32:	4904      	ldr	r1, [pc, #16]	; (8000f44 <set_time+0x84>)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <set_time+0x88>)
 8000f36:	f003 f89b 	bl	8004070 <HAL_RTC_SetTime>
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000194 	.word	0x20000194
 8000f48:	200001ec 	.word	0x200001ec

08000f4c <blink>:


void blink(uint8_t location){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]

	sprintf(temp,"%s %02x:%02x:%02x",sTime.TimeFormat[ampm],sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <blink+0x7c>)
 8000f58:	78db      	ldrb	r3, [r3, #3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <blink+0x80>)
 8000f64:	441a      	add	r2, r3
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <blink+0x7c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <blink+0x7c>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <blink+0x7c>)
 8000f74:	789b      	ldrb	r3, [r3, #2]
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	9100      	str	r1, [sp, #0]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4914      	ldr	r1, [pc, #80]	; (8000fd0 <blink+0x84>)
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <blink+0x88>)
 8000f80:	f004 fffa 	bl	8005f78 <siprintf>
	LCD_Cursor(1,0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff ff7e 	bl	8000e88 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, temp);
 8000f8c:	4911      	ldr	r1, [pc, #68]	; (8000fd4 <blink+0x88>)
 8000f8e:	204e      	movs	r0, #78	; 0x4e
 8000f90:	f7ff fc0b 	bl	80007aa <LCD_SendString>

	if(location == 0){
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <blink+0x62>
		LCD_Cursor(1,location);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff ff72 	bl	8000e88 <LCD_Cursor>
		LCD_SendString(LCD_ADDR, "  ");
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <blink+0x8c>)
 8000fa6:	204e      	movs	r0, #78	; 0x4e
 8000fa8:	f7ff fbff 	bl	80007aa <LCD_SendString>
	}else{
		LCD_Cursor(1,location);
		LCD_SendData(LCD_ADDR, ' ');
	}
}
 8000fac:	e008      	b.n	8000fc0 <blink+0x74>
		LCD_Cursor(1,location);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff ff68 	bl	8000e88 <LCD_Cursor>
		LCD_SendData(LCD_ADDR, ' ');
 8000fb8:	2120      	movs	r1, #32
 8000fba:	204e      	movs	r0, #78	; 0x4e
 8000fbc:	f7ff fbc6 	bl	800074c <LCD_SendData>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000194 	.word	0x20000194
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	08006898 	.word	0x08006898
 8000fd4:	20000130 	.word	0x20000130
 8000fd8:	080068ac 	.word	0x080068ac

08000fdc <value_limit>:


uint16_t value_limit(int16_t value){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
	if(now_state.button == UP) value++;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <value_limit+0x5c>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d106      	bne.n	8000ffc <value_limit+0x20>
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	e009      	b.n	8001010 <value_limit+0x34>
	else if(now_state.button == DOWN) value--;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <value_limit+0x5c>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d105      	bne.n	8001010 <value_limit+0x34>
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	b29b      	uxth	r3, r3
 800100a:	3b01      	subs	r3, #1
 800100c:	b29b      	uxth	r3, r3
 800100e:	80fb      	strh	r3, [r7, #6]
	if(value > 9) value = 0;
 8001010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001014:	2b09      	cmp	r3, #9
 8001016:	dd01      	ble.n	800101c <value_limit+0x40>
 8001018:	2300      	movs	r3, #0
 800101a:	80fb      	strh	r3, [r7, #6]
	if(value < 0) value = 9;
 800101c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	da01      	bge.n	8001028 <value_limit+0x4c>
 8001024:	2309      	movs	r3, #9
 8001026:	80fb      	strh	r3, [r7, #6]

	return value;
 8001028:	88fb      	ldrh	r3, [r7, #6]
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200001d8 	.word	0x200001d8

0800103c <clock>:




void clock(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

	if(now_state.mode == NORMAL) Normal_mode();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <clock+0x40>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <clock+0x12>
 8001048:	f000 f81a 	bl	8001080 <Normal_mode>
	else if(now_state.mode == TIME_SETTING)  Time_setting_mode();
	else if(now_state.mode == ALARM_TIME_SETTING) Time_setting_mode();
	else if(now_state.mode == MUSIC_SELECT) Music_select_mode();
}
 800104c:	e013      	b.n	8001076 <clock+0x3a>
	else if(now_state.mode == TIME_SETTING)  Time_setting_mode();
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <clock+0x40>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <clock+0x20>
 8001056:	f000 f84b 	bl	80010f0 <Time_setting_mode>
}
 800105a:	e00c      	b.n	8001076 <clock+0x3a>
	else if(now_state.mode == ALARM_TIME_SETTING) Time_setting_mode();
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <clock+0x40>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d102      	bne.n	800106a <clock+0x2e>
 8001064:	f000 f844 	bl	80010f0 <Time_setting_mode>
}
 8001068:	e005      	b.n	8001076 <clock+0x3a>
	else if(now_state.mode == MUSIC_SELECT) Music_select_mode();
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <clock+0x40>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d101      	bne.n	8001076 <clock+0x3a>
 8001072:	f000 f969 	bl	8001348 <Music_select_mode>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001d8 	.word	0x200001d8

08001080 <Normal_mode>:



void Normal_mode(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af02      	add	r7, sp, #8

	LCD_Cursor(0,0);
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fefd 	bl	8000e88 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, "Jin Ho Clock");
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <Normal_mode+0x5c>)
 8001090:	204e      	movs	r0, #78	; 0x4e
 8001092:	f7ff fb8a 	bl	80007aa <LCD_SendString>
	sprintf(temp,"%s %02x:%02x:%02x",sTime.TimeFormat[ampm],sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <Normal_mode+0x60>)
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	461a      	mov	r2, r3
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <Normal_mode+0x64>)
 80010a4:	441a      	add	r2, r3
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Normal_mode+0x60>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <Normal_mode+0x60>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <Normal_mode+0x60>)
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	9100      	str	r1, [sp, #0]
 80010ba:	4603      	mov	r3, r0
 80010bc:	490a      	ldr	r1, [pc, #40]	; (80010e8 <Normal_mode+0x68>)
 80010be:	480b      	ldr	r0, [pc, #44]	; (80010ec <Normal_mode+0x6c>)
 80010c0:	f004 ff5a 	bl	8005f78 <siprintf>
	LCD_Cursor(1,0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fede 	bl	8000e88 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, temp);
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <Normal_mode+0x6c>)
 80010ce:	204e      	movs	r0, #78	; 0x4e
 80010d0:	f7ff fb6b 	bl	80007aa <LCD_SendString>
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	080068b0 	.word	0x080068b0
 80010e0:	20000194 	.word	0x20000194
 80010e4:	20000000 	.word	0x20000000
 80010e8:	08006898 	.word	0x08006898
 80010ec:	20000130 	.word	0x20000130

080010f0 <Time_setting_mode>:

void Time_setting_mode(){
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af04      	add	r7, sp, #16

	LCD_Cursor(0,0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fec5 	bl	8000e88 <LCD_Cursor>
	LCD_SendString(LCD_ADDR, "Time Setting");
 80010fe:	498c      	ldr	r1, [pc, #560]	; (8001330 <Time_setting_mode+0x240>)
 8001100:	204e      	movs	r0, #78	; 0x4e
 8001102:	f7ff fb52 	bl	80007aa <LCD_SendString>

	now_time.Ampm = sTime.TimeFormat;
 8001106:	4b8b      	ldr	r3, [pc, #556]	; (8001334 <Time_setting_mode+0x244>)
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <Time_setting_mode+0x248>)
 800110e:	819a      	strh	r2, [r3, #12]
	now_time.Hour1 = (sTime.Hours & 0xf0) >> 4;
 8001110:	4b88      	ldr	r3, [pc, #544]	; (8001334 <Time_setting_mode+0x244>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	b2db      	uxtb	r3, r3
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b87      	ldr	r3, [pc, #540]	; (8001338 <Time_setting_mode+0x248>)
 800111c:	801a      	strh	r2, [r3, #0]
	now_time.Hour2 = sTime.Hours & 0x0f;
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <Time_setting_mode+0x244>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b21b      	sxth	r3, r3
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b83      	ldr	r3, [pc, #524]	; (8001338 <Time_setting_mode+0x248>)
 800112c:	805a      	strh	r2, [r3, #2]
	now_time.Min1 = (sTime.Minutes & 0xf0) >> 4;
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <Time_setting_mode+0x244>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <Time_setting_mode+0x248>)
 800113a:	809a      	strh	r2, [r3, #4]
	now_time.Min2 = sTime.Minutes & 0x0f;
 800113c:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <Time_setting_mode+0x244>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	b21b      	sxth	r3, r3
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <Time_setting_mode+0x248>)
 800114a:	80da      	strh	r2, [r3, #6]
	now_time.Sec1 = (sTime.Seconds & 0xf0) >> 4;
 800114c:	4b79      	ldr	r3, [pc, #484]	; (8001334 <Time_setting_mode+0x244>)
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	b2db      	uxtb	r3, r3
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <Time_setting_mode+0x248>)
 8001158:	811a      	strh	r2, [r3, #8]
	now_time.Sec2 = sTime.Seconds & 0x0f;
 800115a:	4b76      	ldr	r3, [pc, #472]	; (8001334 <Time_setting_mode+0x244>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	b21b      	sxth	r3, r3
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b74      	ldr	r3, [pc, #464]	; (8001338 <Time_setting_mode+0x248>)
 8001168:	815a      	strh	r2, [r3, #10]


	switch (now_state.button) {
 800116a:	4b74      	ldr	r3, [pc, #464]	; (800133c <Time_setting_mode+0x24c>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d002      	beq.n	8001178 <Time_setting_mode+0x88>
 8001172:	2b04      	cmp	r3, #4
 8001174:	d007      	beq.n	8001186 <Time_setting_mode+0x96>
	case LEFT:
		cursor_change--;
		if (cursor_change < 0)cursor_change = 0;
		break;
	default:
		break;
 8001176:	e00d      	b.n	8001194 <Time_setting_mode+0xa4>
		cursor_change++;
 8001178:	4b71      	ldr	r3, [pc, #452]	; (8001340 <Time_setting_mode+0x250>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <Time_setting_mode+0x250>)
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e006      	b.n	8001194 <Time_setting_mode+0xa4>
		cursor_change--;
 8001186:	4b6e      	ldr	r3, [pc, #440]	; (8001340 <Time_setting_mode+0x250>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b6c      	ldr	r3, [pc, #432]	; (8001340 <Time_setting_mode+0x250>)
 8001190:	701a      	strb	r2, [r3, #0]
		break;
 8001192:	bf00      	nop
	}


	switch(cursor_change%7){
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <Time_setting_mode+0x250>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <Time_setting_mode+0x254>)
 800119a:	fba3 1302 	umull	r1, r3, r3, r2
 800119e:	1ad1      	subs	r1, r2, r3
 80011a0:	0849      	lsrs	r1, r1, #1
 80011a2:	440b      	add	r3, r1
 80011a4:	0899      	lsrs	r1, r3, #2
 80011a6:	460b      	mov	r3, r1
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a5b      	subs	r3, r3, r1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d87f      	bhi.n	80012b4 <Time_setting_mode+0x1c4>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <Time_setting_mode+0xcc>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	08001201 	.word	0x08001201
 80011c4:	08001229 	.word	0x08001229
 80011c8:	08001245 	.word	0x08001245
 80011cc:	08001261 	.word	0x08001261
 80011d0:	0800127d 	.word	0x0800127d
 80011d4:	08001299 	.word	0x08001299
	case 0:
		blink(0);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff feb7 	bl	8000f4c <blink>
		if(now_state.button == UP || now_state.button == DOWN) now_time.Ampm ^= 1;
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <Time_setting_mode+0x24c>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d003      	beq.n	80011ee <Time_setting_mode+0xfe>
 80011e6:	4b55      	ldr	r3, [pc, #340]	; (800133c <Time_setting_mode+0x24c>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d164      	bne.n	80012b8 <Time_setting_mode+0x1c8>
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <Time_setting_mode+0x248>)
 80011f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <Time_setting_mode+0x248>)
 80011fc:	819a      	strh	r2, [r3, #12]
		break;
 80011fe:	e05b      	b.n	80012b8 <Time_setting_mode+0x1c8>
	case 1:
		blink(3);
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff fea3 	bl	8000f4c <blink>
		if(now_state.button == UP || now_state.button == DOWN) now_time.Hour1 ^= 1;
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <Time_setting_mode+0x24c>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d003      	beq.n	8001216 <Time_setting_mode+0x126>
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <Time_setting_mode+0x24c>)
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d152      	bne.n	80012bc <Time_setting_mode+0x1cc>
 8001216:	4b48      	ldr	r3, [pc, #288]	; (8001338 <Time_setting_mode+0x248>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <Time_setting_mode+0x248>)
 8001224:	801a      	strh	r2, [r3, #0]
		break;
 8001226:	e049      	b.n	80012bc <Time_setting_mode+0x1cc>
	case 2:
		blink(4);
 8001228:	2004      	movs	r0, #4
 800122a:	f7ff fe8f 	bl	8000f4c <blink>
		now_time.Hour2 = value_limit(now_time.Hour2);
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <Time_setting_mode+0x248>)
 8001230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fed1 	bl	8000fdc <value_limit>
 800123a:	4603      	mov	r3, r0
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <Time_setting_mode+0x248>)
 8001240:	805a      	strh	r2, [r3, #2]
		break;
 8001242:	e03c      	b.n	80012be <Time_setting_mode+0x1ce>
	case 3:
		blink(6);
 8001244:	2006      	movs	r0, #6
 8001246:	f7ff fe81 	bl	8000f4c <blink>
		now_time.Min1 = value_limit(now_time.Min1);
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <Time_setting_mode+0x248>)
 800124c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fec3 	bl	8000fdc <value_limit>
 8001256:	4603      	mov	r3, r0
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <Time_setting_mode+0x248>)
 800125c:	809a      	strh	r2, [r3, #4]
		break;
 800125e:	e02e      	b.n	80012be <Time_setting_mode+0x1ce>
	case 4:
		blink(7);
 8001260:	2007      	movs	r0, #7
 8001262:	f7ff fe73 	bl	8000f4c <blink>
		now_time.Min2 = value_limit(now_time.Min2);
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <Time_setting_mode+0x248>)
 8001268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff feb5 	bl	8000fdc <value_limit>
 8001272:	4603      	mov	r3, r0
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <Time_setting_mode+0x248>)
 8001278:	80da      	strh	r2, [r3, #6]
		break;
 800127a:	e020      	b.n	80012be <Time_setting_mode+0x1ce>
	case 5:
		blink(9);
 800127c:	2009      	movs	r0, #9
 800127e:	f7ff fe65 	bl	8000f4c <blink>
		now_time.Sec1 = value_limit(now_time.Sec1);
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <Time_setting_mode+0x248>)
 8001284:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fea7 	bl	8000fdc <value_limit>
 800128e:	4603      	mov	r3, r0
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <Time_setting_mode+0x248>)
 8001294:	811a      	strh	r2, [r3, #8]
		break;
 8001296:	e012      	b.n	80012be <Time_setting_mode+0x1ce>
	case 6:
		blink(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f7ff fe57 	bl	8000f4c <blink>
		now_time.Sec2 = value_limit(now_time.Sec2);
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <Time_setting_mode+0x248>)
 80012a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe99 	bl	8000fdc <value_limit>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <Time_setting_mode+0x248>)
 80012b0:	815a      	strh	r2, [r3, #10]
		break;
 80012b2:	e004      	b.n	80012be <Time_setting_mode+0x1ce>
	default:
		break;
 80012b4:	bf00      	nop
 80012b6:	e002      	b.n	80012be <Time_setting_mode+0x1ce>
		break;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <Time_setting_mode+0x1ce>
		break;
 80012bc:	bf00      	nop
	}

	if(now_time.Min1 > 5) now_time.Min1 = 0;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <Time_setting_mode+0x248>)
 80012c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	dd02      	ble.n	80012ce <Time_setting_mode+0x1de>
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <Time_setting_mode+0x248>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	809a      	strh	r2, [r3, #4]
	if(now_time.Sec1 > 5) now_time.Sec1 = 0;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <Time_setting_mode+0x248>)
 80012d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	dd02      	ble.n	80012de <Time_setting_mode+0x1ee>
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <Time_setting_mode+0x248>)
 80012da:	2200      	movs	r2, #0
 80012dc:	811a      	strh	r2, [r3, #8]

	set_time(now_time.Ampm,now_time.Hour1,now_time.Hour2,now_time.Min1,now_time.Min2,now_time.Sec1,now_time.Sec2);
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <Time_setting_mode+0x248>)
 80012e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012e4:	b298      	uxth	r0, r3
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <Time_setting_mode+0x248>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	b29c      	uxth	r4, r3
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <Time_setting_mode+0x248>)
 80012f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f4:	b29d      	uxth	r5, r3
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <Time_setting_mode+0x248>)
 80012f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012fc:	b29e      	uxth	r6, r3
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <Time_setting_mode+0x248>)
 8001300:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <Time_setting_mode+0x248>)
 8001308:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800130c:	b292      	uxth	r2, r2
 800130e:	490a      	ldr	r1, [pc, #40]	; (8001338 <Time_setting_mode+0x248>)
 8001310:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8001314:	b289      	uxth	r1, r1
 8001316:	9102      	str	r1, [sp, #8]
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4633      	mov	r3, r6
 800131e:	462a      	mov	r2, r5
 8001320:	4621      	mov	r1, r4
 8001322:	f7ff fdcd 	bl	8000ec0 <set_time>



}
 8001326:	bf00      	nop
 8001328:	3704      	adds	r7, #4
 800132a:	46bd      	mov	sp, r7
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	080068c0 	.word	0x080068c0
 8001334:	20000194 	.word	0x20000194
 8001338:	200001dc 	.word	0x200001dc
 800133c:	200001d8 	.word	0x200001d8
 8001340:	200001bc 	.word	0x200001bc
 8001344:	24924925 	.word	0x24924925

08001348 <Music_select_mode>:

}



void Music_select_mode(){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135a:	b672      	cpsid	i
}
 800135c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800135e:	e7fe      	b.n	800135e <Error_Handler+0x8>

08001360 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_RTC_Init+0xb0>)
 800137a:	4a26      	ldr	r2, [pc, #152]	; (8001414 <MX_RTC_Init+0xb4>)
 800137c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_RTC_Init+0xb0>)
 8001380:	2240      	movs	r2, #64	; 0x40
 8001382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_RTC_Init+0xb0>)
 8001386:	227f      	movs	r2, #127	; 0x7f
 8001388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_RTC_Init+0xb0>)
 800138c:	22ff      	movs	r2, #255	; 0xff
 800138e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_RTC_Init+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_RTC_Init+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_RTC_Init+0xb0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013a2:	481b      	ldr	r0, [pc, #108]	; (8001410 <MX_RTC_Init+0xb0>)
 80013a4:	f002 fdee 	bl	8003f84 <HAL_RTC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80013ae:	f7ff ffd2 	bl	8001356 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80013b2:	2312      	movs	r3, #18
 80013b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013be:	2300      	movs	r3, #0
 80013c0:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <MX_RTC_Init+0xb0>)
 80013d2:	f002 fe4d 	bl	8004070 <HAL_RTC_SetTime>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80013dc:	f7ff ffbb 	bl	8001356 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80013e0:	2304      	movs	r3, #4
 80013e2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80013e4:	2306      	movs	r3, #6
 80013e6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 80013e8:	2309      	movs	r3, #9
 80013ea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80013ec:	2322      	movs	r3, #34	; 0x22
 80013ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_RTC_Init+0xb0>)
 80013f8:	f002 ff32 	bl	8004260 <HAL_RTC_SetDate>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001402:	f7ff ffa8 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001ec 	.word	0x200001ec
 8001414:	40002800 	.word	0x40002800

08001418 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2230      	movs	r2, #48	; 0x30
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fd69 	bl	8005f00 <memset>
  if(rtcHandle->Instance==RTC)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RTC_MspInit+0x4c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d111      	bne.n	800145c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001438:	2320      	movs	r3, #32
 800143a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fbdc 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001452:	f7ff ff80 	bl	8001356 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_RTC_MspInit+0x50>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40002800 	.word	0x40002800
 8001468:	42470e3c 	.word	0x42470e3c

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 f9ca 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f003 f8eb 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000210 	.word	0x20000210

08001534 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <USART3_IRQHandler+0x10>)
 800153a:	f003 fd83 	bl	8005044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000258 	.word	0x20000258

08001548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800154c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001550:	f001 f8a4 	bl	800269c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f004 fc90 	bl	8005eac <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20030000 	.word	0x20030000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	2000020c 	.word	0x2000020c
 80015c0:	200002b0 	.word	0x200002b0

080015c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_TIM2_Init+0x98>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_TIM2_Init+0x98>)
 800160e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM2_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900-1;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_TIM2_Init+0x98>)
 800161c:	f240 3283 	movw	r2, #899	; 0x383
 8001620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_TIM2_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM2_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162e:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_TIM2_Init+0x98>)
 8001630:	f002 ffa6 	bl	8004580 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800163a:	f7ff fe8c 	bl	8001356 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_TIM2_Init+0x98>)
 800164c:	f003 f960 	bl	8004910 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001656:	f7ff fe7e 	bl	8001356 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165a:	2320      	movs	r3, #32
 800165c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_TIM2_Init+0x98>)
 8001668:	f003 fb7c 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001672:	f7ff fe70 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000210 	.word	0x20000210

08001684 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	d10d      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x3c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_TIM_Base_MspInit+0x3c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_TIM_Base_MspInit+0x3c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART3_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016fc:	f003 fbc2 	bl	8004e84 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f7ff fe26 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000258 	.word	0x20000258
 8001714:	40004800 	.word	0x40004800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_UART_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12c      	bne.n	8001794 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_UART_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_UART_MspInit+0x8c>)
 8001790:	f000 fdc0 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40004800 	.word	0x40004800
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff fef7 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f004 fb6f 	bl	8005eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff f995 	bl	8000b08 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017ec:	0800693c 	.word	0x0800693c
  ldr r2, =_sbss
 80017f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017f4:	200002b0 	.word	0x200002b0

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 fca1 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fe1c 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fcb9 	bl	80021d6 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 fc81 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000008 	.word	0x20000008
 8001898:	20000010 	.word	0x20000010
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000010 	.word	0x20000010
 80018c4:	2000029c 	.word	0x2000029c

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000029c 	.word	0x2000029c

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000010 	.word	0x20000010

08001928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e033      	b.n	80019a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe ffb8 	bl	80008bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fa2a 	bl	8001dd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
 8001996:	e001      	b.n	800199c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Start+0x1a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e0b2      	b.n	8001b30 <HAL_ADC_Start+0x180>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d018      	beq.n	8001a12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_ADC_Start+0x18c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_ADC_Start+0x190>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9a      	lsrs	r2, r3, #18
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d17a      	bne.n	8001b16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5e:	d106      	bne.n	8001a6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f023 0206 	bic.w	r2, r3, #6
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_ADC_Start+0x194>)
 8001a7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d12a      	bne.n	8001aec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_ADC_Start+0x198>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d015      	beq.n	8001acc <HAL_ADC_Start+0x11c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_ADC_Start+0x19c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_Start+0x106>
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_ADC_Start+0x194>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_ADC_Start+0x1a0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d136      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_ADC_Start+0x194>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d130      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d129      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	e020      	b.n	8001b2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <HAL_ADC_Start+0x198>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11b      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d114      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00b      	b.n	8001b2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	40012300 	.word	0x40012300
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40012100 	.word	0x40012100
 8001b50:	40012200 	.word	0x40012200

08001b54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e113      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x244>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d925      	bls.n	8001be8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68d9      	ldr	r1, [r3, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4403      	add	r3, r0
 8001bda:	3b1e      	subs	r3, #30
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	e022      	b.n	8001c2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4403      	add	r3, r0
 8001c24:	409a      	lsls	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d824      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b05      	subs	r3, #5
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	400a      	ands	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b05      	subs	r3, #5
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	e04c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d824      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b23      	subs	r3, #35	; 0x23
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b23      	subs	r3, #35	; 0x23
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd0:	e023      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b41      	subs	r3, #65	; 0x41
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b41      	subs	r3, #65	; 0x41
 8001d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_ADC_ConfigChannel+0x250>)
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <HAL_ADC_ConfigChannel+0x254>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10f      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1d8>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_ADC_ConfigChannel+0x254>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_ADC_ConfigChannel+0x258>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <HAL_ADC_ConfigChannel+0x1f4>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b11      	cmp	r3, #17
 8001d62:	d122      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_ADC_ConfigChannel+0x258>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_ADC_ConfigChannel+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_ADC_ConfigChannel+0x260>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	10000012 	.word	0x10000012
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <ADC_Init+0x1f0>)
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	021a      	lsls	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <ADC_Init+0x1f4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e00f      	b.n	8001ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0202 	bic.w	r2, r2, #2
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	035a      	lsls	r2, r3, #13
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e007      	b.n	8001f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	051a      	lsls	r2, r3, #20
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f8a:	025a      	lsls	r2, r3, #9
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	029a      	lsls	r2, r3, #10
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	0f000001 	.word	0x0f000001

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff29 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff3e 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff31 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fb64 	bl	80018c8 <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d008      	beq.n	8002220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e052      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0216 	bic.w	r2, r2, #22
 800222e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_DMA_Abort+0x62>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0208 	bic.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002270:	e013      	b.n	800229a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fb29 	bl	80018c8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d90c      	bls.n	800229a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e015      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e4      	bne.n	8002272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	223f      	movs	r2, #63	; 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d004      	beq.n	80022ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00c      	b.n	8002306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2205      	movs	r2, #5
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e177      	b.n	8002620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8166 	bne.w	800261a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80c0 	beq.w	800261a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_GPIO_Init+0x324>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_GPIO_Init+0x324>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_GPIO_Init+0x324>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a61      	ldr	r2, [pc, #388]	; (800263c <HAL_GPIO_Init+0x328>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_GPIO_Init+0x32c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d037      	beq.n	8002552 <HAL_GPIO_Init+0x23e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_GPIO_Init+0x330>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_GPIO_Init+0x23a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a56      	ldr	r2, [pc, #344]	; (8002648 <HAL_GPIO_Init+0x334>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02b      	beq.n	800254a <HAL_GPIO_Init+0x236>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_GPIO_Init+0x338>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d025      	beq.n	8002546 <HAL_GPIO_Init+0x232>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a54      	ldr	r2, [pc, #336]	; (8002650 <HAL_GPIO_Init+0x33c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01f      	beq.n	8002542 <HAL_GPIO_Init+0x22e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a53      	ldr	r2, [pc, #332]	; (8002654 <HAL_GPIO_Init+0x340>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d019      	beq.n	800253e <HAL_GPIO_Init+0x22a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_GPIO_Init+0x344>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0x226>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a51      	ldr	r2, [pc, #324]	; (800265c <HAL_GPIO_Init+0x348>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <HAL_GPIO_Init+0x222>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a50      	ldr	r2, [pc, #320]	; (8002660 <HAL_GPIO_Init+0x34c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <HAL_GPIO_Init+0x21e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4f      	ldr	r2, [pc, #316]	; (8002664 <HAL_GPIO_Init+0x350>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_GPIO_Init+0x21a>
 800252a:	2309      	movs	r3, #9
 800252c:	e012      	b.n	8002554 <HAL_GPIO_Init+0x240>
 800252e:	230a      	movs	r3, #10
 8002530:	e010      	b.n	8002554 <HAL_GPIO_Init+0x240>
 8002532:	2308      	movs	r3, #8
 8002534:	e00e      	b.n	8002554 <HAL_GPIO_Init+0x240>
 8002536:	2307      	movs	r3, #7
 8002538:	e00c      	b.n	8002554 <HAL_GPIO_Init+0x240>
 800253a:	2306      	movs	r3, #6
 800253c:	e00a      	b.n	8002554 <HAL_GPIO_Init+0x240>
 800253e:	2305      	movs	r3, #5
 8002540:	e008      	b.n	8002554 <HAL_GPIO_Init+0x240>
 8002542:	2304      	movs	r3, #4
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x240>
 8002546:	2303      	movs	r3, #3
 8002548:	e004      	b.n	8002554 <HAL_GPIO_Init+0x240>
 800254a:	2302      	movs	r3, #2
 800254c:	e002      	b.n	8002554 <HAL_GPIO_Init+0x240>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x240>
 8002552:	2300      	movs	r3, #0
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f002 0203 	and.w	r2, r2, #3
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	4093      	lsls	r3, r2
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002564:	4935      	ldr	r1, [pc, #212]	; (800263c <HAL_GPIO_Init+0x328>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_GPIO_Init+0x354>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_GPIO_Init+0x354>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_GPIO_Init+0x354>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c0:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_GPIO_Init+0x354>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_GPIO_Init+0x354>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_GPIO_Init+0x354>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_GPIO_Init+0x354>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_GPIO_Init+0x354>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	f67f ae84 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40021400 	.word	0x40021400
 8002658:	40021800 	.word	0x40021800
 800265c:	40021c00 	.word	0x40021c00
 8002660:	40022000 	.word	0x40022000
 8002664:	40022400 	.word	0x40022400
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe faf0 	bl	8000ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e12b      	b.n	8002936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe f9c0 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002730:	f001 fa40 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a81      	ldr	r2, [pc, #516]	; (8002940 <HAL_I2C_Init+0x274>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d807      	bhi.n	8002750 <HAL_I2C_Init+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a80      	ldr	r2, [pc, #512]	; (8002944 <HAL_I2C_Init+0x278>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e006      	b.n	800275e <HAL_I2C_Init+0x92>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_I2C_Init+0x27c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0e7      	b.n	8002936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_I2C_Init+0x280>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_I2C_Init+0x274>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d802      	bhi.n	80027a0 <HAL_I2C_Init+0xd4>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	e009      	b.n	80027b4 <HAL_I2C_Init+0xe8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_I2C_Init+0x284>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	495c      	ldr	r1, [pc, #368]	; (8002940 <HAL_I2C_Init+0x274>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d819      	bhi.n	8002808 <HAL_I2C_Init+0x13c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e59      	subs	r1, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_I2C_Init+0x138>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e59      	subs	r1, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	e051      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002804:	2304      	movs	r3, #4
 8002806:	e04f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_I2C_Init+0x168>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e012      	b.n	800285a <HAL_I2C_Init+0x18e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e58      	subs	r0, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Init+0x196>
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10e      	bne.n	8002888 <HAL_I2C_Init+0x1bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e58      	subs	r0, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	440b      	add	r3, r1
 8002878:	fbb0 f3f3 	udiv	r3, r0, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	6809      	ldr	r1, [r1, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6911      	ldr	r1, [r2, #16]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	000186a0 	.word	0x000186a0
 8002944:	001e847f 	.word	0x001e847f
 8002948:	003d08ff 	.word	0x003d08ff
 800294c:	431bde83 	.word	0x431bde83
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7fe ffae 	bl	80018c8 <HAL_GetTick>
 800296c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	f040 80e0 	bne.w	8002b3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2319      	movs	r3, #25
 8002982:	2201      	movs	r2, #1
 8002984:	4970      	ldr	r1, [pc, #448]	; (8002b48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa92 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	e0d3      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_I2C_Master_Transmit+0x50>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e0cc      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d007      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2210      	movs	r2, #16
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	893a      	ldrh	r2, [r7, #8]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a0c:	8979      	ldrh	r1, [r7, #10]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6a3a      	ldr	r2, [r7, #32]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f9ca 	bl	8002dac <I2C_MasterRequestWrite>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e08d      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a38:	e066      	b.n	8002b08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fb0c 	bl	800305c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06b      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d11b      	bne.n	8002adc <HAL_I2C_Master_Transmit+0x188>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d017      	beq.n	8002adc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6a39      	ldr	r1, [r7, #32]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fafc 	bl	80030de <I2C_WaitOnBTFFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e01a      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d194      	bne.n	8002a3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00100002 	.word	0x00100002
 8002b4c:	ffff0000 	.word	0xffff0000

08002b50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7fe feb2 	bl	80018c8 <HAL_GetTick>
 8002b64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 8111 	bne.w	8002d9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2319      	movs	r3, #25
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4988      	ldr	r1, [pc, #544]	; (8002da4 <HAL_I2C_IsDeviceReady+0x254>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f994 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e104      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2C_IsDeviceReady+0x50>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0fd      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d007      	beq.n	8002bc6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2224      	movs	r2, #36	; 0x24
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_I2C_IsDeviceReady+0x258>)
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f952 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c20:	d103      	bne.n	8002c2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0b6      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fe43 	bl	80018c8 <HAL_GetTick>
 8002c42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c72:	e025      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c74:	f7fe fe28 	bl	80018c8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d302      	bcc.n	8002c8a <HAL_I2C_IsDeviceReady+0x13a>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22a0      	movs	r2, #160	; 0xa0
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2ba0      	cmp	r3, #160	; 0xa0
 8002cca:	d005      	beq.n	8002cd8 <HAL_I2C_IsDeviceReady+0x188>
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_I2C_IsDeviceReady+0x188>
 8002cd2:	7dbb      	ldrb	r3, [r7, #22]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0cd      	beq.n	8002c74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d129      	bne.n	8002d42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2319      	movs	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4921      	ldr	r1, [pc, #132]	; (8002da4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8c6 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e036      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e02c      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	490f      	ldr	r1, [pc, #60]	; (8002da4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f8a2 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e012      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f4ff af32 	bcc.w	8002bea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	00100002 	.word	0x00100002
 8002da8:	ffff0000 	.word	0xffff0000

08002dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d006      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d003      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00b      	b.n	8002e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	2b12      	cmp	r3, #18
 8002dee:	d107      	bne.n	8002e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f84f 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e26:	d103      	bne.n	8002e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e035      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3c:	d108      	bne.n	8002e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	e01b      	b.n	8002e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	11db      	asrs	r3, r3, #7
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0306 	and.w	r3, r3, #6
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f063 030f 	orn	r3, r3, #15
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <I2C_MasterRequestWrite+0xfc>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f875 	bl	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e010      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <I2C_MasterRequestWrite+0x100>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f865 	bl	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00010008 	.word	0x00010008
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	e025      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d021      	beq.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe fcfd 	bl	80018c8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e023      	b.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10d      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	e00c      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf0c      	ite	eq
 8002f46:	2301      	moveq	r3, #1
 8002f48:	2300      	movne	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d0b6      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f6c:	e051      	b.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d123      	bne.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0204 	orr.w	r2, r3, #4
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e046      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d021      	beq.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7fe fc7b 	bl	80018c8 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d116      	bne.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e020      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10c      	bne.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e00b      	b.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	43da      	mvns	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d18d      	bne.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003068:	e02d      	b.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f878 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e02d      	b.n	80030d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d021      	beq.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fc21 	bl	80018c8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d1ca      	bne.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ea:	e02d      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f837 	bl	8003160 <I2C_IsAcknowledgeFailed>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e02d      	b.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d021      	beq.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fbe0 	bl	80018c8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d1ca      	bne.n	80030ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d11b      	bne.n	80031b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d129      	bne.n	8003228 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0210 	bic.w	r2, r2, #16
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d12a      	bne.n	80032a6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b29a      	uxth	r2, r3
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	4313      	orrs	r3, r2
 8003280:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	89fa      	ldrh	r2, [r7, #14]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_PWREx_EnableOverDrive+0x90>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_PWREx_EnableOverDrive+0x90>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_PWREx_EnableOverDrive+0x90>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_PWREx_EnableOverDrive+0x94>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e0:	f7fe faf2 	bl	80018c8 <HAL_GetTick>
 80032e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e6:	e009      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e8:	f7fe faee 	bl	80018c8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f6:	d901      	bls.n	80032fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e01f      	b.n	800333c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_PWREx_EnableOverDrive+0x98>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d1ee      	bne.n	80032e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003310:	f7fe fada 	bl	80018c8 <HAL_GetTick>
 8003314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003316:	e009      	b.n	800332c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003318:	f7fe fad6 	bl	80018c8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003326:	d901      	bls.n	800332c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e007      	b.n	800333c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_PWREx_EnableOverDrive+0x98>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003338:	d1ee      	bne.n	8003318 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	420e0040 	.word	0x420e0040
 800334c:	40007000 	.word	0x40007000
 8003350:	420e0044 	.word	0x420e0044

08003354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e267      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00c      	beq.n	8003398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d112      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05b      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e242      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x74>
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b70      	ldr	r3, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6f      	ldr	r2, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6c      	ldr	r2, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b66      	ldr	r3, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fa5c 	bl	80018c8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fa58 	bl	80018c8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e207      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xc0>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fa48 	bl	80018c8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fa44 	bl	80018c8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1f3      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b44      	ldr	r3, [pc, #272]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c7      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe f9fd 	bl	80018c8 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe f9f9 	bl	80018c8 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a8      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4925      	ldr	r1, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe f9dc 	bl	80018c8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe f9d8 	bl	80018c8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e187      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe f9bc 	bl	80018c8 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe f9b8 	bl	80018c8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e167      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x200>
 8003572:	e01b      	b.n	80035ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe f9a5 	bl	80018c8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00e      	b.n	80035a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe f9a1 	bl	80018c8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d907      	bls.n	80035a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e150      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ea      	bne.n	8003582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8097 	beq.w	80036e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b7d      	ldr	r3, [pc, #500]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a7c      	ldr	r2, [pc, #496]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b7a      	ldr	r3, [pc, #488]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b77      	ldr	r3, [pc, #476]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b74      	ldr	r3, [pc, #464]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a73      	ldr	r2, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe f961 	bl	80018c8 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe f95d 	bl	80018c8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e10c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x2ea>
 8003630:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a63      	ldr	r2, [pc, #396]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x30c>
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a5e      	ldr	r2, [pc, #376]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a5b      	ldr	r2, [pc, #364]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 8003660:	4b58      	ldr	r3, [pc, #352]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a57      	ldr	r2, [pc, #348]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a54      	ldr	r2, [pc, #336]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe f922 	bl	80018c8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe f91e 	bl	80018c8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0cb      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCC_OscConfig+0x334>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fe f90c 	bl	80018c8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe f908 	bl	80018c8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0b5      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ee      	bne.n	80036b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a1 	beq.w	8003834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d05c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d141      	bne.n	800378a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe f8dc 	bl	80018c8 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f8d8 	bl	80018c8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e087      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	491b      	ldr	r1, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fe f8b1 	bl	80018c8 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fe f8ad 	bl	80018c8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e05c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x416>
 8003788:	e054      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe f89a 	bl	80018c8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe f896 	bl	80018c8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e045      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
 80037b6:	e03d      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e038      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000
 80037cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4ec>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d028      	beq.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d121      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d11a      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	4293      	cmp	r3, r2
 800380a:	d111      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cc      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b68      	ldr	r3, [pc, #416]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d90c      	bls.n	8003880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	494d      	ldr	r1, [pc, #308]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d044      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e067      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4934      	ldr	r1, [pc, #208]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fd ffc8 	bl	80018c8 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fd ffc4 	bl	80018c8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d20c      	bcs.n	800398c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4916      	ldr	r1, [pc, #88]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490e      	ldr	r1, [pc, #56]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ca:	f000 f821 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd ff28 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00
 8003a00:	40023800 	.word	0x40023800
 8003a04:	080068e0 	.word	0x080068e0
 8003a08:	20000008 	.word	0x20000008
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b090      	sub	sp, #64	; 0x40
 8003a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a20:	2300      	movs	r3, #0
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d00d      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x40>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	f200 80a1 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a42:	e09b      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a48:	e09b      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a4e:	e098      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a50:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a5a:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	627a      	str	r2, [r7, #36]	; 0x24
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a7c:	fb03 f201 	mul.w	r2, r3, r1
 8003a80:	2300      	movs	r3, #0
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a90:	460a      	mov	r2, r1
 8003a92:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a96:	4413      	add	r3, r2
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aaa:	f7fc fbf9 	bl	80002a0 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab6:	e053      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	2200      	movs	r2, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	617a      	str	r2, [r7, #20]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aca:	f04f 0b00 	mov.w	fp, #0
 8003ace:	4652      	mov	r2, sl
 8003ad0:	465b      	mov	r3, fp
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aea:	eb63 090b 	sbc.w	r9, r3, fp
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b02:	ebb2 0408 	subs.w	r4, r2, r8
 8003b06:	eb63 0509 	sbc.w	r5, r3, r9
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	00eb      	lsls	r3, r5, #3
 8003b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b18:	00e2      	lsls	r2, r4, #3
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	eb14 030a 	adds.w	r3, r4, sl
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	eb45 030b 	adc.w	r3, r5, fp
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	60fa      	str	r2, [r7, #12]
 8003b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b54:	f7fc fba4 	bl	80002a0 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3740      	adds	r7, #64	; 0x40
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	017d7840 	.word	0x017d7840

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	080068f0 	.word	0x080068f0

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffdc 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	080068f0 	.word	0x080068f0

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d075      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c38:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fe43 	bl	80018c8 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c46:	f7fd fe3f 	bl	80018c8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e189      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c58:	4b8a      	ldr	r3, [pc, #552]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	019a      	lsls	r2, r3, #6
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	071b      	lsls	r3, r3, #28
 8003c7c:	4981      	ldr	r1, [pc, #516]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	431a      	orrs	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	071b      	lsls	r3, r3, #28
 8003cb0:	4974      	ldr	r1, [pc, #464]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cb8:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbe:	f023 021f 	bic.w	r2, r3, #31
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	496e      	ldr	r1, [pc, #440]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	061b      	lsls	r3, r3, #24
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	071b      	lsls	r3, r3, #28
 8003cf0:	4964      	ldr	r1, [pc, #400]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fde3 	bl	80018c8 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d06:	f7fd fddf 	bl	80018c8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e129      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d18:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d079      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d3c:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d42:	f7fd fdc1 	bl	80018c8 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d4a:	f7fd fdbd 	bl	80018c8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e107      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d5c:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d68:	d0ef      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	0f1b      	lsrs	r3, r3, #28
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	019a      	lsls	r2, r3, #6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	431a      	orrs	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	493b      	ldr	r1, [pc, #236]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	4934      	ldr	r1, [pc, #208]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01e      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	0e1b      	lsrs	r3, r3, #24
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	019a      	lsls	r2, r3, #6
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	071b      	lsls	r3, r3, #28
 8003de4:	4927      	ldr	r1, [pc, #156]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dec:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	4922      	ldr	r1, [pc, #136]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fd5e 	bl	80018c8 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e10:	f7fd fd5a 	bl	80018c8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0a4      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e2e:	d1ef      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 808b 	beq.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e66:	f7fd fd2f 	bl	80018c8 <HAL_GetTick>
 8003e6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e6c:	e010      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fd fd2b 	bl	80018c8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d909      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e075      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003e80:	42470068 	.word	0x42470068
 8003e84:	40023800 	.word	0x40023800
 8003e88:	42470070 	.word	0x42470070
 8003e8c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e90:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0e8      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9c:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eba:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ed0:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d114      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fcf1 	bl	80018c8 <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fced 	bl	80018c8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e035      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f18:	d10d      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	4912      	ldr	r1, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
 8003f34:	e005      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f40:	6093      	str	r3, [r2, #8]
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003f68:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40007000 	.word	0x40007000
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470e40 	.word	0x42470e40
 8003f80:	424711e0 	.word	0x424711e0

08003f84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e066      	b.n	8004068 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7f5b      	ldrb	r3, [r3, #29]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fa34 	bl	8001418 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	22ca      	movs	r2, #202	; 0xca
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2253      	movs	r2, #83	; 0x53
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa45 	bl	8004456 <RTC_EnterInitMode>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d12c      	bne.n	8004030 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68d2      	ldr	r2, [r2, #12]
 8004010:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6919      	ldr	r1, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	041a      	lsls	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa4c 	bl	80044c4 <RTC_ExitInitMode>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	22ff      	movs	r2, #255	; 0xff
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	7f1b      	ldrb	r3, [r3, #28]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_RTC_SetTime+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e087      	b.n	800419c <HAL_RTC_SetTime+0x12c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2202      	movs	r2, #2
 8004096:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d126      	bne.n	80040ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fa29 	bl	800450e <RTC_ByteToBcd2>
 80040bc:	4603      	mov	r3, r0
 80040be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa22 	bl	800450e <RTC_ByteToBcd2>
 80040ca:	4603      	mov	r3, r0
 80040cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa1a 	bl	800450e <RTC_ByteToBcd2>
 80040da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	78db      	ldrb	r3, [r3, #3]
 80040e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e018      	b.n	800411e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800410c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004112:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	78db      	ldrb	r3, [r3, #3]
 8004118:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	22ca      	movs	r2, #202	; 0xca
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2253      	movs	r2, #83	; 0x53
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f991 	bl	8004456 <RTC_EnterInitMode>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d120      	bne.n	8004180 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004148:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800414c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800415c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f9a4 	bl	80044c4 <RTC_ExitInitMode>
 800417c:	4603      	mov	r3, r0
 800417e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	771a      	strb	r2, [r3, #28]

  return status;
 800419a:	7cfb      	ldrb	r3, [r7, #19]
}
 800419c:	4618      	mov	r0, r3
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd90      	pop	{r4, r7, pc}

080041a4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	0d9b      	lsrs	r3, r3, #22
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11a      	bne.n	8004256 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f98f 	bl	8004548 <RTC_Bcd2ToByte>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f986 	bl	8004548 <RTC_Bcd2ToByte>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	789b      	ldrb	r3, [r3, #2]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f97d 	bl	8004548 <RTC_Bcd2ToByte>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	7f1b      	ldrb	r3, [r3, #28]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_RTC_SetDate+0x1c>
 8004278:	2302      	movs	r3, #2
 800427a:	e071      	b.n	8004360 <HAL_RTC_SetDate+0x100>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10e      	bne.n	80042ac <HAL_RTC_SetDate+0x4c>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	f023 0310 	bic.w	r3, r3, #16
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	330a      	adds	r3, #10
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11c      	bne.n	80042ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	78db      	ldrb	r3, [r3, #3]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f929 	bl	800450e <RTC_ByteToBcd2>
 80042bc:	4603      	mov	r3, r0
 80042be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f922 	bl	800450e <RTC_ByteToBcd2>
 80042ca:	4603      	mov	r3, r0
 80042cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	789b      	ldrb	r3, [r3, #2]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f91a 	bl	800450e <RTC_ByteToBcd2>
 80042da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e00e      	b.n	800430a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042f8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	22ca      	movs	r2, #202	; 0xca
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2253      	movs	r2, #83	; 0x53
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f89b 	bl	8004456 <RTC_EnterInitMode>
 8004320:	4603      	mov	r3, r0
 8004322:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004334:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004338:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8c2 	bl	80044c4 <RTC_ExitInitMode>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d102      	bne.n	8004350 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	771a      	strb	r2, [r3, #28]

  return status;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}

08004368 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004382:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004386:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11a      	bne.n	80043fc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	78db      	ldrb	r3, [r3, #3]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f8bc 	bl	8004548 <RTC_Bcd2ToByte>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f8b3 	bl	8004548 <RTC_Bcd2ToByte>
 80043e2:	4603      	mov	r3, r0
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	789b      	ldrb	r3, [r3, #2]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f8aa 	bl	8004548 <RTC_Bcd2ToByte>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004420:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004422:	f7fd fa51 	bl	80018c8 <HAL_GetTick>
 8004426:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004428:	e009      	b.n	800443e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800442a:	f7fd fa4d 	bl	80018c8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004438:	d901      	bls.n	800443e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e007      	b.n	800444e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d122      	bne.n	80044ba <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004482:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004484:	f7fd fa20 	bl	80018c8 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800448a:	e00c      	b.n	80044a6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800448c:	f7fd fa1c 	bl	80018c8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800449a:	d904      	bls.n	80044a6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2204      	movs	r2, #4
 80044a0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <RTC_EnterInitMode+0x64>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d1e8      	bne.n	800448c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ff89 	bl	8004406 <HAL_RTC_WaitForSynchro>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800451c:	e005      	b.n	800452a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	3301      	adds	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	3b0a      	subs	r3, #10
 8004528:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b09      	cmp	r3, #9
 800452e:	d8f6      	bhi.n	800451e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	b2da      	uxtb	r2, r3
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	4313      	orrs	r3, r2
 800453a:	b2db      	uxtb	r3, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	0092      	lsls	r2, r2, #2
 8004560:	4413      	add	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	4413      	add	r3, r2
 8004572:	b2db      	uxtb	r3, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e041      	b.n	8004616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd f86c 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fa96 	bl	8004af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d001      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e04e      	b.n	80046d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d022      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d01d      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x80>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_TIM_Base_Start_IT+0xdc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d010      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40001800 	.word	0x40001800

08004700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0202 	mvn.w	r2, #2
 800472c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9b5 	bl	8004ab2 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9a7 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f9b8 	bl	8004ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0204 	mvn.w	r2, #4
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f98b 	bl	8004ab2 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f97d 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f98e 	bl	8004ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d122      	bne.n	8004804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d11b      	bne.n	8004804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0208 	mvn.w	r2, #8
 80047d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2204      	movs	r2, #4
 80047da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f961 	bl	8004ab2 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f953 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f964 	bl	8004ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b10      	cmp	r3, #16
 8004810:	d122      	bne.n	8004858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b10      	cmp	r3, #16
 800481e:	d11b      	bne.n	8004858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0210 	mvn.w	r2, #16
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2208      	movs	r2, #8
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f937 	bl	8004ab2 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f929 	bl	8004a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f93a 	bl	8004ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0201 	mvn.w	r2, #1
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc faa4 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d10e      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d107      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fae0 	bl	8004e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d10e      	bne.n	80048dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8ff 	bl	8004ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0220 	mvn.w	r2, #32
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 faaa 	bl	8004e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIM_ConfigClockSource+0x1c>
 8004928:	2302      	movs	r3, #2
 800492a:	e0b4      	b.n	8004a96 <HAL_TIM_ConfigClockSource+0x186>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800494a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d03e      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496a:	f200 8087 	bhi.w	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	f000 8086 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x172>
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d87f      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b70      	cmp	r3, #112	; 0x70
 800497e:	d01a      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004980:	2b70      	cmp	r3, #112	; 0x70
 8004982:	d87b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b60      	cmp	r3, #96	; 0x60
 8004986:	d050      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x11a>
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d877      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b50      	cmp	r3, #80	; 0x50
 800498e:	d03c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xfa>
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d873      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d058      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x13a>
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d86f      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d064      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d86b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d060      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d867      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d05c      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d05a      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	e062      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f000 f9ad 	bl	8004d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]
      break;
 80049e2:	e04f      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6899      	ldr	r1, [r3, #8]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f000 f996 	bl	8004d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a06:	609a      	str	r2, [r3, #8]
      break;
 8004a08:	e03c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 f90a 	bl	8004c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2150      	movs	r1, #80	; 0x50
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f963 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004a28:	e02c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 f929 	bl	8004c8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2160      	movs	r1, #96	; 0x60
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f953 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004a48:	e01c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 f8ea 	bl	8004c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f943 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004a68:	e00c      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f000 f93a 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004a7a:	e003      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a80:	e000      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a40      	ldr	r2, [pc, #256]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d00f      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <TIM_Base_SetConfig+0x118>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <TIM_Base_SetConfig+0x11c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <TIM_Base_SetConfig+0x120>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3a      	ldr	r2, [pc, #232]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2f      	ldr	r2, [pc, #188]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d027      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <TIM_Base_SetConfig+0x118>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d023      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <TIM_Base_SetConfig+0x11c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <TIM_Base_SetConfig+0x120>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d017      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <TIM_Base_SetConfig+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <TIM_Base_SetConfig+0x12c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <TIM_Base_SetConfig+0x130>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <TIM_Base_SetConfig+0x134>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a24      	ldr	r2, [pc, #144]	; (8004c28 <TIM_Base_SetConfig+0x138>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <TIM_Base_SetConfig+0x13c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0xf8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800
 8004c24:	40001800 	.word	0x40001800
 8004c28:	40001c00 	.word	0x40001c00
 8004c2c:	40002000 	.word	0x40002000

08004c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 030a 	bic.w	r3, r3, #10
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0210 	bic.w	r2, r3, #16
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f043 0307 	orr.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e05a      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d022      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d01d      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40001800 	.word	0x40001800

08004e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e03f      	b.n	8004f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc fc34 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fd7b 	bl	80059c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b08a      	sub	sp, #40	; 0x28
 8004f22:	af02      	add	r7, sp, #8
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d17c      	bne.n	8005038 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_Transmit+0x2c>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e075      	b.n	800503a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_UART_Transmit+0x3e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e06e      	b.n	800503a <HAL_UART_Transmit+0x11c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f72:	f7fc fca9 	bl	80018c8 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x82>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fb0:	e02a      	b.n	8005008 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 faf9 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e036      	b.n	800503a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cf      	bne.n	8004fb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	; 0x40
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fac9 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b0ba      	sub	sp, #232	; 0xe8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_UART_IRQHandler+0x66>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fbd3 	bl	800584e <UART_Receive_IT>
      return;
 80050a8:	e256      	b.n	8005558 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80de 	beq.w	8005270 <HAL_UART_IRQHandler+0x22c>
 80050b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80d1 	beq.w	8005270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0xae>
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_UART_IRQHandler+0xd2>
 80050fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0202 	orr.w	r2, r3, #2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_UART_IRQHandler+0xf6>
 8005122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <HAL_UART_IRQHandler+0x126>
 8005146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0208 	orr.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 81ed 	beq.w	800554e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x14e>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fb5e 	bl	800584e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_UART_IRQHandler+0x17a>
 80051b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d04f      	beq.n	800525e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa66 	bl	8005690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d141      	bne.n	8005256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800520a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1d9      	bne.n	80051d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	d013      	beq.n	800524e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	4a7d      	ldr	r2, [pc, #500]	; (8005420 <HAL_UART_IRQHandler+0x3dc>)
 800522c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd f84b 	bl	80022ce <HAL_DMA_Abort_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	e00e      	b.n	800526c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f99a 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	e00a      	b.n	800526c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f996 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	e006      	b.n	800526c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f992 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800526a:	e170      	b.n	800554e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	bf00      	nop
    return;
 800526e:	e16e      	b.n	800554e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	2b01      	cmp	r3, #1
 8005276:	f040 814a 	bne.w	800550e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8143 	beq.w	800550e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 813c 	beq.w	800550e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	f040 80b4 	bne.w	8005424 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8140 	beq.w	8005552 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052da:	429a      	cmp	r2, r3
 80052dc:	f080 8139 	bcs.w	8005552 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f2:	f000 8088 	beq.w	8005406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800530c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800532e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800533a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1d9      	bne.n	80052f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3314      	adds	r3, #20
 8005348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3314      	adds	r3, #20
 8005362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800536a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800536e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e1      	bne.n	8005342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800538e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80053ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	4618      	mov	r0, r3
 8005402:	f7fc fef4 	bl	80021ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540e:	b29b      	uxth	r3, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8c0 	bl	800559c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800541c:	e099      	b.n	8005552 <HAL_UART_IRQHandler+0x50e>
 800541e:	bf00      	nop
 8005420:	08005757 	.word	0x08005757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800542c:	b29b      	uxth	r3, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 808b 	beq.w	8005556 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8086 	beq.w	8005556 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800546e:	647a      	str	r2, [r7, #68]	; 0x44
 8005470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e3      	bne.n	800544a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	623b      	str	r3, [r7, #32]
   return(result);
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054a6:	633a      	str	r2, [r7, #48]	; 0x30
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e3      	bne.n	8005482 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	617b      	str	r3, [r7, #20]
   return(result);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e3      	bne.n	80054c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f848 	bl	800559c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800550c:	e023      	b.n	8005556 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_UART_IRQHandler+0x4ea>
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f929 	bl	800577e <UART_Transmit_IT>
    return;
 800552c:	e014      	b.n	8005558 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <HAL_UART_IRQHandler+0x514>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f969 	bl	800581e <UART_EndTransmit_IT>
    return;
 800554c:	e004      	b.n	8005558 <HAL_UART_IRQHandler+0x514>
    return;
 800554e:	bf00      	nop
 8005550:	e002      	b.n	8005558 <HAL_UART_IRQHandler+0x514>
      return;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_UART_IRQHandler+0x514>
      return;
 8005556:	bf00      	nop
  }
}
 8005558:	37e8      	adds	r7, #232	; 0xe8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop

08005560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b090      	sub	sp, #64	; 0x40
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c4:	e050      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d04c      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d4:	f7fc f978 	bl	80018c8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d241      	bcs.n	8005668 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005604:	637a      	str	r2, [r7, #52]	; 0x34
 8005606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800560a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	613b      	str	r3, [r7, #16]
   return(result);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005638:	623a      	str	r2, [r7, #32]
 800563a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	69f9      	ldr	r1, [r7, #28]
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	61bb      	str	r3, [r7, #24]
   return(result);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e00f      	b.n	8005688 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	d09f      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3740      	adds	r7, #64	; 0x40
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b095      	sub	sp, #84	; 0x54
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b8:	643a      	str	r2, [r7, #64]	; 0x40
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	61fb      	str	r3, [r7, #28]
   return(result);
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d119      	bne.n	800573c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	60bb      	str	r3, [r7, #8]
   return(result);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f023 0310 	bic.w	r3, r3, #16
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005728:	61ba      	str	r2, [r7, #24]
 800572a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6979      	ldr	r1, [r7, #20]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	613b      	str	r3, [r7, #16]
   return(result);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
}
 800574a:	bf00      	nop
 800574c:	3754      	adds	r7, #84	; 0x54
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff ff09 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b21      	cmp	r3, #33	; 0x21
 8005790:	d13e      	bne.n	8005810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d114      	bne.n	80057c6 <UART_Transmit_IT+0x48>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	621a      	str	r2, [r3, #32]
 80057c4:	e008      	b.n	80057d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6211      	str	r1, [r2, #32]
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4619      	mov	r1, r3
 80057e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10f      	bne.n	800580c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800580a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fe8e 	bl	8005560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	; 0x30
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b22      	cmp	r3, #34	; 0x22
 8005860:	f040 80ab 	bne.w	80059ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d117      	bne.n	800589e <UART_Receive_IT+0x50>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d113      	bne.n	800589e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588c:	b29a      	uxth	r2, r3
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
 800589c:	e026      	b.n	80058ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b0:	d007      	beq.n	80058c2 <UART_Receive_IT+0x74>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <UART_Receive_IT+0x82>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	e008      	b.n	80058e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4619      	mov	r1, r3
 80058fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d15a      	bne.n	80059b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0220 	bic.w	r2, r2, #32
 800590e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800591e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	d135      	bne.n	80059ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	613b      	str	r3, [r7, #16]
   return(result);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005966:	623a      	str	r2, [r7, #32]
 8005968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	69f9      	ldr	r1, [r7, #28]
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	61bb      	str	r3, [r7, #24]
   return(result);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b10      	cmp	r3, #16
 8005986:	d10a      	bne.n	800599e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fdf9 	bl	800559c <HAL_UARTEx_RxEventCallback>
 80059aa:	e002      	b.n	80059b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff fde1 	bl	8005574 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e002      	b.n	80059bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c8:	b0c0      	sub	sp, #256	; 0x100
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	ea40 0301 	orr.w	r3, r0, r1
 80059ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a1c:	f021 010c 	bic.w	r1, r1, #12
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	6999      	ldr	r1, [r3, #24]
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	ea40 0301 	orr.w	r3, r0, r1
 8005a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b8f      	ldr	r3, [pc, #572]	; (8005c90 <UART_SetConfig+0x2cc>)
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d005      	beq.n	8005a64 <UART_SetConfig+0xa0>
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b8d      	ldr	r3, [pc, #564]	; (8005c94 <UART_SetConfig+0x2d0>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d104      	bne.n	8005a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a64:	f7fe f8ba 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8005a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a6c:	e003      	b.n	8005a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fe f8a1 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8005a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a80:	f040 810c 	bne.w	8005c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	eb12 0801 	adds.w	r8, r2, r1
 8005aac:	4629      	mov	r1, r5
 8005aae:	eb43 0901 	adc.w	r9, r3, r1
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ac6:	4690      	mov	r8, r2
 8005ac8:	4699      	mov	r9, r3
 8005aca:	4623      	mov	r3, r4
 8005acc:	eb18 0303 	adds.w	r3, r8, r3
 8005ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	eb49 0303 	adc.w	r3, r9, r3
 8005ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005af2:	460b      	mov	r3, r1
 8005af4:	18db      	adds	r3, r3, r3
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
 8005af8:	4613      	mov	r3, r2
 8005afa:	eb42 0303 	adc.w	r3, r2, r3
 8005afe:	657b      	str	r3, [r7, #84]	; 0x54
 8005b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b08:	f7fa fbca 	bl	80002a0 <__aeabi_uldivmod>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <UART_SetConfig+0x2d4>)
 8005b12:	fba3 2302 	umull	r2, r3, r3, r2
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	011c      	lsls	r4, r3, #4
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b34:	415b      	adcs	r3, r3
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b42:	4649      	mov	r1, r9
 8005b44:	eb43 0b01 	adc.w	fp, r3, r1
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b5c:	4692      	mov	sl, r2
 8005b5e:	469b      	mov	fp, r3
 8005b60:	4643      	mov	r3, r8
 8005b62:	eb1a 0303 	adds.w	r3, sl, r3
 8005b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	18db      	adds	r3, r3, r3
 8005b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b8e:	4613      	mov	r3, r2
 8005b90:	eb42 0303 	adc.w	r3, r2, r3
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
 8005b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b9e:	f7fa fb7f 	bl	80002a0 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <UART_SetConfig+0x2d4>)
 8005baa:	fba3 2301 	umull	r2, r3, r3, r1
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2264      	movs	r2, #100	; 0x64
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	1acb      	subs	r3, r1, r3
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bbe:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <UART_SetConfig+0x2d4>)
 8005bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bcc:	441c      	add	r4, r3
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005be8:	415b      	adcs	r3, r3
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	1851      	adds	r1, r2, r1
 8005bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	414b      	adcs	r3, r1
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c08:	4659      	mov	r1, fp
 8005c0a:	00cb      	lsls	r3, r1, #3
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c12:	4651      	mov	r1, sl
 8005c14:	00ca      	lsls	r2, r1, #3
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c24:	464b      	mov	r3, r9
 8005c26:	460a      	mov	r2, r1
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c44:	460b      	mov	r3, r1
 8005c46:	18db      	adds	r3, r3, r3
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c5a:	f7fa fb21 	bl	80002a0 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <UART_SetConfig+0x2d4>)
 8005c64:	fba3 1302 	umull	r1, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2164      	movs	r1, #100	; 0x64
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	3332      	adds	r3, #50	; 0x32
 8005c76:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <UART_SetConfig+0x2d4>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f003 0207 	and.w	r2, r3, #7
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4422      	add	r2, r4
 8005c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c8c:	e105      	b.n	8005e9a <UART_SetConfig+0x4d6>
 8005c8e:	bf00      	nop
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40011400 	.word	0x40011400
 8005c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cae:	4642      	mov	r2, r8
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	1891      	adds	r1, r2, r2
 8005cb4:	6239      	str	r1, [r7, #32]
 8005cb6:	415b      	adcs	r3, r3
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0501 	adc.w	r5, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	00eb      	lsls	r3, r5, #3
 8005cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd6:	00e2      	lsls	r2, r4, #3
 8005cd8:	4614      	mov	r4, r2
 8005cda:	461d      	mov	r5, r3
 8005cdc:	4643      	mov	r3, r8
 8005cde:	18e3      	adds	r3, r4, r3
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	eb45 0303 	adc.w	r3, r5, r3
 8005cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	008b      	lsls	r3, r1, #2
 8005d0e:	4621      	mov	r1, r4
 8005d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d14:	4621      	mov	r1, r4
 8005d16:	008a      	lsls	r2, r1, #2
 8005d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d1c:	f7fa fac0 	bl	80002a0 <__aeabi_uldivmod>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4b60      	ldr	r3, [pc, #384]	; (8005ea8 <UART_SetConfig+0x4e4>)
 8005d26:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	011c      	lsls	r4, r3, #4
 8005d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	1891      	adds	r1, r2, r2
 8005d46:	61b9      	str	r1, [r7, #24]
 8005d48:	415b      	adcs	r3, r3
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d50:	4641      	mov	r1, r8
 8005d52:	1851      	adds	r1, r2, r1
 8005d54:	6139      	str	r1, [r7, #16]
 8005d56:	4649      	mov	r1, r9
 8005d58:	414b      	adcs	r3, r1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	00cb      	lsls	r3, r1, #3
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d72:	4651      	mov	r1, sl
 8005d74:	00ca      	lsls	r2, r1, #3
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	189b      	adds	r3, r3, r2
 8005d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d84:	464b      	mov	r3, r9
 8005d86:	460a      	mov	r2, r1
 8005d88:	eb42 0303 	adc.w	r3, r2, r3
 8005d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005da8:	4649      	mov	r1, r9
 8005daa:	008b      	lsls	r3, r1, #2
 8005dac:	4641      	mov	r1, r8
 8005dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db2:	4641      	mov	r1, r8
 8005db4:	008a      	lsls	r2, r1, #2
 8005db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dba:	f7fa fa71 	bl	80002a0 <__aeabi_uldivmod>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4b39      	ldr	r3, [pc, #228]	; (8005ea8 <UART_SetConfig+0x4e4>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	; 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3332      	adds	r3, #50	; 0x32
 8005dd6:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <UART_SetConfig+0x4e4>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de2:	441c      	add	r4, r3
 8005de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de8:	2200      	movs	r2, #0
 8005dea:	673b      	str	r3, [r7, #112]	; 0x70
 8005dec:	677a      	str	r2, [r7, #116]	; 0x74
 8005dee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005df2:	4642      	mov	r2, r8
 8005df4:	464b      	mov	r3, r9
 8005df6:	1891      	adds	r1, r2, r2
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e02:	4641      	mov	r1, r8
 8005e04:	1851      	adds	r1, r2, r1
 8005e06:	6039      	str	r1, [r7, #0]
 8005e08:	4649      	mov	r1, r9
 8005e0a:	414b      	adcs	r3, r1
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e1a:	4659      	mov	r1, fp
 8005e1c:	00cb      	lsls	r3, r1, #3
 8005e1e:	4651      	mov	r1, sl
 8005e20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e24:	4651      	mov	r1, sl
 8005e26:	00ca      	lsls	r2, r1, #3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4642      	mov	r2, r8
 8005e30:	189b      	adds	r3, r3, r2
 8005e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e34:	464b      	mov	r3, r9
 8005e36:	460a      	mov	r2, r1
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	663b      	str	r3, [r7, #96]	; 0x60
 8005e48:	667a      	str	r2, [r7, #100]	; 0x64
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e56:	4649      	mov	r1, r9
 8005e58:	008b      	lsls	r3, r1, #2
 8005e5a:	4641      	mov	r1, r8
 8005e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e60:	4641      	mov	r1, r8
 8005e62:	008a      	lsls	r2, r1, #2
 8005e64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e68:	f7fa fa1a 	bl	80002a0 <__aeabi_uldivmod>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <UART_SetConfig+0x4e4>)
 8005e72:	fba3 1302 	umull	r1, r3, r3, r2
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	2164      	movs	r1, #100	; 0x64
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	3332      	adds	r3, #50	; 0x32
 8005e84:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <UART_SetConfig+0x4e4>)
 8005e86:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4422      	add	r2, r4
 8005e98:	609a      	str	r2, [r3, #8]
}
 8005e9a:	bf00      	nop
 8005e9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea6:	bf00      	nop
 8005ea8:	51eb851f 	.word	0x51eb851f

08005eac <__errno>:
 8005eac:	4b01      	ldr	r3, [pc, #4]	; (8005eb4 <__errno+0x8>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000014 	.word	0x20000014

08005eb8 <__libc_init_array>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	4d0d      	ldr	r5, [pc, #52]	; (8005ef0 <__libc_init_array+0x38>)
 8005ebc:	4c0d      	ldr	r4, [pc, #52]	; (8005ef4 <__libc_init_array+0x3c>)
 8005ebe:	1b64      	subs	r4, r4, r5
 8005ec0:	10a4      	asrs	r4, r4, #2
 8005ec2:	2600      	movs	r6, #0
 8005ec4:	42a6      	cmp	r6, r4
 8005ec6:	d109      	bne.n	8005edc <__libc_init_array+0x24>
 8005ec8:	4d0b      	ldr	r5, [pc, #44]	; (8005ef8 <__libc_init_array+0x40>)
 8005eca:	4c0c      	ldr	r4, [pc, #48]	; (8005efc <__libc_init_array+0x44>)
 8005ecc:	f000 fcc2 	bl	8006854 <_init>
 8005ed0:	1b64      	subs	r4, r4, r5
 8005ed2:	10a4      	asrs	r4, r4, #2
 8005ed4:	2600      	movs	r6, #0
 8005ed6:	42a6      	cmp	r6, r4
 8005ed8:	d105      	bne.n	8005ee6 <__libc_init_array+0x2e>
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee0:	4798      	blx	r3
 8005ee2:	3601      	adds	r6, #1
 8005ee4:	e7ee      	b.n	8005ec4 <__libc_init_array+0xc>
 8005ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eea:	4798      	blx	r3
 8005eec:	3601      	adds	r6, #1
 8005eee:	e7f2      	b.n	8005ed6 <__libc_init_array+0x1e>
 8005ef0:	08006934 	.word	0x08006934
 8005ef4:	08006934 	.word	0x08006934
 8005ef8:	08006934 	.word	0x08006934
 8005efc:	08006938 	.word	0x08006938

08005f00 <memset>:
 8005f00:	4402      	add	r2, r0
 8005f02:	4603      	mov	r3, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <sniprintf>:
 8005f10:	b40c      	push	{r2, r3}
 8005f12:	b530      	push	{r4, r5, lr}
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <sniprintf+0x64>)
 8005f16:	1e0c      	subs	r4, r1, #0
 8005f18:	681d      	ldr	r5, [r3, #0]
 8005f1a:	b09d      	sub	sp, #116	; 0x74
 8005f1c:	da08      	bge.n	8005f30 <sniprintf+0x20>
 8005f1e:	238b      	movs	r3, #139	; 0x8b
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	b01d      	add	sp, #116	; 0x74
 8005f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f2c:	b002      	add	sp, #8
 8005f2e:	4770      	bx	lr
 8005f30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f38:	bf14      	ite	ne
 8005f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f3e:	4623      	moveq	r3, r4
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	9307      	str	r3, [sp, #28]
 8005f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f52:	ab21      	add	r3, sp, #132	; 0x84
 8005f54:	a902      	add	r1, sp, #8
 8005f56:	4628      	mov	r0, r5
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	f000 f889 	bl	8006070 <_svfiprintf_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	bfbc      	itt	lt
 8005f62:	238b      	movlt	r3, #139	; 0x8b
 8005f64:	602b      	strlt	r3, [r5, #0]
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	d0dd      	beq.n	8005f26 <sniprintf+0x16>
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e7d9      	b.n	8005f26 <sniprintf+0x16>
 8005f72:	bf00      	nop
 8005f74:	20000014 	.word	0x20000014

08005f78 <siprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	b500      	push	{lr}
 8005f7c:	b09c      	sub	sp, #112	; 0x70
 8005f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9006      	str	r0, [sp, #24]
 8005f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f88:	4809      	ldr	r0, [pc, #36]	; (8005fb0 <siprintf+0x38>)
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	9104      	str	r1, [sp, #16]
 8005f8e:	4909      	ldr	r1, [pc, #36]	; (8005fb4 <siprintf+0x3c>)
 8005f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	a902      	add	r1, sp, #8
 8005f9c:	f000 f868 	bl	8006070 <_svfiprintf_r>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	b01c      	add	sp, #112	; 0x70
 8005fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fac:	b003      	add	sp, #12
 8005fae:	4770      	bx	lr
 8005fb0:	20000014 	.word	0x20000014
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <__ssputs_r>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	688e      	ldr	r6, [r1, #8]
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4690      	mov	r8, r2
 8005fc6:	461f      	mov	r7, r3
 8005fc8:	d838      	bhi.n	800603c <__ssputs_r+0x84>
 8005fca:	898a      	ldrh	r2, [r1, #12]
 8005fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd0:	d032      	beq.n	8006038 <__ssputs_r+0x80>
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	6909      	ldr	r1, [r1, #16]
 8005fd6:	eba5 0901 	sub.w	r9, r5, r1
 8005fda:	6965      	ldr	r5, [r4, #20]
 8005fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	444b      	add	r3, r9
 8005fe8:	106d      	asrs	r5, r5, #1
 8005fea:	429d      	cmp	r5, r3
 8005fec:	bf38      	it	cc
 8005fee:	461d      	movcc	r5, r3
 8005ff0:	0553      	lsls	r3, r2, #21
 8005ff2:	d531      	bpl.n	8006058 <__ssputs_r+0xa0>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f000 fb63 	bl	80066c0 <_malloc_r>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	b950      	cbnz	r0, 8006014 <__ssputs_r+0x5c>
 8005ffe:	230c      	movs	r3, #12
 8006000:	f8ca 3000 	str.w	r3, [sl]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	6921      	ldr	r1, [r4, #16]
 8006016:	464a      	mov	r2, r9
 8006018:	f000 fabe 	bl	8006598 <memcpy>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	6126      	str	r6, [r4, #16]
 800602a:	6165      	str	r5, [r4, #20]
 800602c:	444e      	add	r6, r9
 800602e:	eba5 0509 	sub.w	r5, r5, r9
 8006032:	6026      	str	r6, [r4, #0]
 8006034:	60a5      	str	r5, [r4, #8]
 8006036:	463e      	mov	r6, r7
 8006038:	42be      	cmp	r6, r7
 800603a:	d900      	bls.n	800603e <__ssputs_r+0x86>
 800603c:	463e      	mov	r6, r7
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	4632      	mov	r2, r6
 8006042:	4641      	mov	r1, r8
 8006044:	f000 fab6 	bl	80065b4 <memmove>
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	1b9b      	subs	r3, r3, r6
 800604c:	60a3      	str	r3, [r4, #8]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	4433      	add	r3, r6
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2000      	movs	r0, #0
 8006056:	e7db      	b.n	8006010 <__ssputs_r+0x58>
 8006058:	462a      	mov	r2, r5
 800605a:	f000 fba5 	bl	80067a8 <_realloc_r>
 800605e:	4606      	mov	r6, r0
 8006060:	2800      	cmp	r0, #0
 8006062:	d1e1      	bne.n	8006028 <__ssputs_r+0x70>
 8006064:	6921      	ldr	r1, [r4, #16]
 8006066:	4650      	mov	r0, sl
 8006068:	f000 fabe 	bl	80065e8 <_free_r>
 800606c:	e7c7      	b.n	8005ffe <__ssputs_r+0x46>
	...

08006070 <_svfiprintf_r>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	4698      	mov	r8, r3
 8006076:	898b      	ldrh	r3, [r1, #12]
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	b09d      	sub	sp, #116	; 0x74
 800607c:	4607      	mov	r7, r0
 800607e:	460d      	mov	r5, r1
 8006080:	4614      	mov	r4, r2
 8006082:	d50e      	bpl.n	80060a2 <_svfiprintf_r+0x32>
 8006084:	690b      	ldr	r3, [r1, #16]
 8006086:	b963      	cbnz	r3, 80060a2 <_svfiprintf_r+0x32>
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	f000 fb19 	bl	80066c0 <_malloc_r>
 800608e:	6028      	str	r0, [r5, #0]
 8006090:	6128      	str	r0, [r5, #16]
 8006092:	b920      	cbnz	r0, 800609e <_svfiprintf_r+0x2e>
 8006094:	230c      	movs	r3, #12
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e0d1      	b.n	8006242 <_svfiprintf_r+0x1d2>
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	616b      	str	r3, [r5, #20]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	2320      	movs	r3, #32
 80060a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b0:	2330      	movs	r3, #48	; 0x30
 80060b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800625c <_svfiprintf_r+0x1ec>
 80060b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ba:	f04f 0901 	mov.w	r9, #1
 80060be:	4623      	mov	r3, r4
 80060c0:	469a      	mov	sl, r3
 80060c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c6:	b10a      	cbz	r2, 80060cc <_svfiprintf_r+0x5c>
 80060c8:	2a25      	cmp	r2, #37	; 0x25
 80060ca:	d1f9      	bne.n	80060c0 <_svfiprintf_r+0x50>
 80060cc:	ebba 0b04 	subs.w	fp, sl, r4
 80060d0:	d00b      	beq.n	80060ea <_svfiprintf_r+0x7a>
 80060d2:	465b      	mov	r3, fp
 80060d4:	4622      	mov	r2, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ff6d 	bl	8005fb8 <__ssputs_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	f000 80aa 	beq.w	8006238 <_svfiprintf_r+0x1c8>
 80060e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e6:	445a      	add	r2, fp
 80060e8:	9209      	str	r2, [sp, #36]	; 0x24
 80060ea:	f89a 3000 	ldrb.w	r3, [sl]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80a2 	beq.w	8006238 <_svfiprintf_r+0x1c8>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fe:	f10a 0a01 	add.w	sl, sl, #1
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800610a:	931a      	str	r3, [sp, #104]	; 0x68
 800610c:	4654      	mov	r4, sl
 800610e:	2205      	movs	r2, #5
 8006110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006114:	4851      	ldr	r0, [pc, #324]	; (800625c <_svfiprintf_r+0x1ec>)
 8006116:	f7fa f873 	bl	8000200 <memchr>
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	b9d8      	cbnz	r0, 8006156 <_svfiprintf_r+0xe6>
 800611e:	06d0      	lsls	r0, r2, #27
 8006120:	bf44      	itt	mi
 8006122:	2320      	movmi	r3, #32
 8006124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006128:	0711      	lsls	r1, r2, #28
 800612a:	bf44      	itt	mi
 800612c:	232b      	movmi	r3, #43	; 0x2b
 800612e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006132:	f89a 3000 	ldrb.w	r3, [sl]
 8006136:	2b2a      	cmp	r3, #42	; 0x2a
 8006138:	d015      	beq.n	8006166 <_svfiprintf_r+0xf6>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	4654      	mov	r4, sl
 800613e:	2000      	movs	r0, #0
 8006140:	f04f 0c0a 	mov.w	ip, #10
 8006144:	4621      	mov	r1, r4
 8006146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800614a:	3b30      	subs	r3, #48	; 0x30
 800614c:	2b09      	cmp	r3, #9
 800614e:	d94e      	bls.n	80061ee <_svfiprintf_r+0x17e>
 8006150:	b1b0      	cbz	r0, 8006180 <_svfiprintf_r+0x110>
 8006152:	9207      	str	r2, [sp, #28]
 8006154:	e014      	b.n	8006180 <_svfiprintf_r+0x110>
 8006156:	eba0 0308 	sub.w	r3, r0, r8
 800615a:	fa09 f303 	lsl.w	r3, r9, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	9304      	str	r3, [sp, #16]
 8006162:	46a2      	mov	sl, r4
 8006164:	e7d2      	b.n	800610c <_svfiprintf_r+0x9c>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	9103      	str	r1, [sp, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfbb      	ittet	lt
 8006172:	425b      	neglt	r3, r3
 8006174:	f042 0202 	orrlt.w	r2, r2, #2
 8006178:	9307      	strge	r3, [sp, #28]
 800617a:	9307      	strlt	r3, [sp, #28]
 800617c:	bfb8      	it	lt
 800617e:	9204      	strlt	r2, [sp, #16]
 8006180:	7823      	ldrb	r3, [r4, #0]
 8006182:	2b2e      	cmp	r3, #46	; 0x2e
 8006184:	d10c      	bne.n	80061a0 <_svfiprintf_r+0x130>
 8006186:	7863      	ldrb	r3, [r4, #1]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d135      	bne.n	80061f8 <_svfiprintf_r+0x188>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfb8      	it	lt
 8006198:	f04f 33ff 	movlt.w	r3, #4294967295
 800619c:	3402      	adds	r4, #2
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800626c <_svfiprintf_r+0x1fc>
 80061a4:	7821      	ldrb	r1, [r4, #0]
 80061a6:	2203      	movs	r2, #3
 80061a8:	4650      	mov	r0, sl
 80061aa:	f7fa f829 	bl	8000200 <memchr>
 80061ae:	b140      	cbz	r0, 80061c2 <_svfiprintf_r+0x152>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	eba0 000a 	sub.w	r0, r0, sl
 80061b6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	4303      	orrs	r3, r0
 80061be:	3401      	adds	r4, #1
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c6:	4826      	ldr	r0, [pc, #152]	; (8006260 <_svfiprintf_r+0x1f0>)
 80061c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061cc:	2206      	movs	r2, #6
 80061ce:	f7fa f817 	bl	8000200 <memchr>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d038      	beq.n	8006248 <_svfiprintf_r+0x1d8>
 80061d6:	4b23      	ldr	r3, [pc, #140]	; (8006264 <_svfiprintf_r+0x1f4>)
 80061d8:	bb1b      	cbnz	r3, 8006222 <_svfiprintf_r+0x1b2>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	3307      	adds	r3, #7
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	3308      	adds	r3, #8
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	4433      	add	r3, r6
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	e767      	b.n	80060be <_svfiprintf_r+0x4e>
 80061ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f2:	460c      	mov	r4, r1
 80061f4:	2001      	movs	r0, #1
 80061f6:	e7a5      	b.n	8006144 <_svfiprintf_r+0xd4>
 80061f8:	2300      	movs	r3, #0
 80061fa:	3401      	adds	r4, #1
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	4619      	mov	r1, r3
 8006200:	f04f 0c0a 	mov.w	ip, #10
 8006204:	4620      	mov	r0, r4
 8006206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620a:	3a30      	subs	r2, #48	; 0x30
 800620c:	2a09      	cmp	r2, #9
 800620e:	d903      	bls.n	8006218 <_svfiprintf_r+0x1a8>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0c5      	beq.n	80061a0 <_svfiprintf_r+0x130>
 8006214:	9105      	str	r1, [sp, #20]
 8006216:	e7c3      	b.n	80061a0 <_svfiprintf_r+0x130>
 8006218:	fb0c 2101 	mla	r1, ip, r1, r2
 800621c:	4604      	mov	r4, r0
 800621e:	2301      	movs	r3, #1
 8006220:	e7f0      	b.n	8006204 <_svfiprintf_r+0x194>
 8006222:	ab03      	add	r3, sp, #12
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	462a      	mov	r2, r5
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <_svfiprintf_r+0x1f8>)
 800622a:	a904      	add	r1, sp, #16
 800622c:	4638      	mov	r0, r7
 800622e:	f3af 8000 	nop.w
 8006232:	1c42      	adds	r2, r0, #1
 8006234:	4606      	mov	r6, r0
 8006236:	d1d6      	bne.n	80061e6 <_svfiprintf_r+0x176>
 8006238:	89ab      	ldrh	r3, [r5, #12]
 800623a:	065b      	lsls	r3, r3, #25
 800623c:	f53f af2c 	bmi.w	8006098 <_svfiprintf_r+0x28>
 8006240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006242:	b01d      	add	sp, #116	; 0x74
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <_svfiprintf_r+0x1f8>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4638      	mov	r0, r7
 8006254:	f000 f87a 	bl	800634c <_printf_i>
 8006258:	e7eb      	b.n	8006232 <_svfiprintf_r+0x1c2>
 800625a:	bf00      	nop
 800625c:	080068f8 	.word	0x080068f8
 8006260:	08006902 	.word	0x08006902
 8006264:	00000000 	.word	0x00000000
 8006268:	08005fb9 	.word	0x08005fb9
 800626c:	080068fe 	.word	0x080068fe

08006270 <_printf_common>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	4616      	mov	r6, r2
 8006276:	4699      	mov	r9, r3
 8006278:	688a      	ldr	r2, [r1, #8]
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006280:	4293      	cmp	r3, r2
 8006282:	bfb8      	it	lt
 8006284:	4613      	movlt	r3, r2
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800628c:	4607      	mov	r7, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b10a      	cbz	r2, 8006296 <_printf_common+0x26>
 8006292:	3301      	adds	r3, #1
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	0699      	lsls	r1, r3, #26
 800629a:	bf42      	ittt	mi
 800629c:	6833      	ldrmi	r3, [r6, #0]
 800629e:	3302      	addmi	r3, #2
 80062a0:	6033      	strmi	r3, [r6, #0]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d106      	bne.n	80062b8 <_printf_common+0x48>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	6832      	ldr	r2, [r6, #0]
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dc26      	bgt.n	8006306 <_printf_common+0x96>
 80062b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062bc:	1e13      	subs	r3, r2, #0
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	bf18      	it	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	0692      	lsls	r2, r2, #26
 80062c6:	d42b      	bmi.n	8006320 <_printf_common+0xb0>
 80062c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062cc:	4649      	mov	r1, r9
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c0      	blx	r8
 80062d2:	3001      	adds	r0, #1
 80062d4:	d01e      	beq.n	8006314 <_printf_common+0xa4>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	68e5      	ldr	r5, [r4, #12]
 80062da:	6832      	ldr	r2, [r6, #0]
 80062dc:	f003 0306 	and.w	r3, r3, #6
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	bf08      	it	eq
 80062e4:	1aad      	subeq	r5, r5, r2
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	bf0c      	ite	eq
 80062ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f0:	2500      	movne	r5, #0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	bfc4      	itt	gt
 80062f6:	1a9b      	subgt	r3, r3, r2
 80062f8:	18ed      	addgt	r5, r5, r3
 80062fa:	2600      	movs	r6, #0
 80062fc:	341a      	adds	r4, #26
 80062fe:	42b5      	cmp	r5, r6
 8006300:	d11a      	bne.n	8006338 <_printf_common+0xc8>
 8006302:	2000      	movs	r0, #0
 8006304:	e008      	b.n	8006318 <_printf_common+0xa8>
 8006306:	2301      	movs	r3, #1
 8006308:	4652      	mov	r2, sl
 800630a:	4649      	mov	r1, r9
 800630c:	4638      	mov	r0, r7
 800630e:	47c0      	blx	r8
 8006310:	3001      	adds	r0, #1
 8006312:	d103      	bne.n	800631c <_printf_common+0xac>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631c:	3501      	adds	r5, #1
 800631e:	e7c6      	b.n	80062ae <_printf_common+0x3e>
 8006320:	18e1      	adds	r1, r4, r3
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	2030      	movs	r0, #48	; 0x30
 8006326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800632a:	4422      	add	r2, r4
 800632c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006334:	3302      	adds	r3, #2
 8006336:	e7c7      	b.n	80062c8 <_printf_common+0x58>
 8006338:	2301      	movs	r3, #1
 800633a:	4622      	mov	r2, r4
 800633c:	4649      	mov	r1, r9
 800633e:	4638      	mov	r0, r7
 8006340:	47c0      	blx	r8
 8006342:	3001      	adds	r0, #1
 8006344:	d0e6      	beq.n	8006314 <_printf_common+0xa4>
 8006346:	3601      	adds	r6, #1
 8006348:	e7d9      	b.n	80062fe <_printf_common+0x8e>
	...

0800634c <_printf_i>:
 800634c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	7e0f      	ldrb	r7, [r1, #24]
 8006352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006354:	2f78      	cmp	r7, #120	; 0x78
 8006356:	4691      	mov	r9, r2
 8006358:	4680      	mov	r8, r0
 800635a:	460c      	mov	r4, r1
 800635c:	469a      	mov	sl, r3
 800635e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006362:	d807      	bhi.n	8006374 <_printf_i+0x28>
 8006364:	2f62      	cmp	r7, #98	; 0x62
 8006366:	d80a      	bhi.n	800637e <_printf_i+0x32>
 8006368:	2f00      	cmp	r7, #0
 800636a:	f000 80d8 	beq.w	800651e <_printf_i+0x1d2>
 800636e:	2f58      	cmp	r7, #88	; 0x58
 8006370:	f000 80a3 	beq.w	80064ba <_printf_i+0x16e>
 8006374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800637c:	e03a      	b.n	80063f4 <_printf_i+0xa8>
 800637e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006382:	2b15      	cmp	r3, #21
 8006384:	d8f6      	bhi.n	8006374 <_printf_i+0x28>
 8006386:	a101      	add	r1, pc, #4	; (adr r1, 800638c <_printf_i+0x40>)
 8006388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063f9 	.word	0x080063f9
 8006394:	08006375 	.word	0x08006375
 8006398:	08006375 	.word	0x08006375
 800639c:	08006375 	.word	0x08006375
 80063a0:	08006375 	.word	0x08006375
 80063a4:	080063f9 	.word	0x080063f9
 80063a8:	08006375 	.word	0x08006375
 80063ac:	08006375 	.word	0x08006375
 80063b0:	08006375 	.word	0x08006375
 80063b4:	08006375 	.word	0x08006375
 80063b8:	08006505 	.word	0x08006505
 80063bc:	08006429 	.word	0x08006429
 80063c0:	080064e7 	.word	0x080064e7
 80063c4:	08006375 	.word	0x08006375
 80063c8:	08006375 	.word	0x08006375
 80063cc:	08006527 	.word	0x08006527
 80063d0:	08006375 	.word	0x08006375
 80063d4:	08006429 	.word	0x08006429
 80063d8:	08006375 	.word	0x08006375
 80063dc:	08006375 	.word	0x08006375
 80063e0:	080064ef 	.word	0x080064ef
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	602a      	str	r2, [r5, #0]
 80063ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0a3      	b.n	8006540 <_printf_i+0x1f4>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	6829      	ldr	r1, [r5, #0]
 80063fc:	0606      	lsls	r6, r0, #24
 80063fe:	f101 0304 	add.w	r3, r1, #4
 8006402:	d50a      	bpl.n	800641a <_printf_i+0xce>
 8006404:	680e      	ldr	r6, [r1, #0]
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	2e00      	cmp	r6, #0
 800640a:	da03      	bge.n	8006414 <_printf_i+0xc8>
 800640c:	232d      	movs	r3, #45	; 0x2d
 800640e:	4276      	negs	r6, r6
 8006410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006414:	485e      	ldr	r0, [pc, #376]	; (8006590 <_printf_i+0x244>)
 8006416:	230a      	movs	r3, #10
 8006418:	e019      	b.n	800644e <_printf_i+0x102>
 800641a:	680e      	ldr	r6, [r1, #0]
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006422:	bf18      	it	ne
 8006424:	b236      	sxthne	r6, r6
 8006426:	e7ef      	b.n	8006408 <_printf_i+0xbc>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	1d19      	adds	r1, r3, #4
 800642e:	6029      	str	r1, [r5, #0]
 8006430:	0601      	lsls	r1, r0, #24
 8006432:	d501      	bpl.n	8006438 <_printf_i+0xec>
 8006434:	681e      	ldr	r6, [r3, #0]
 8006436:	e002      	b.n	800643e <_printf_i+0xf2>
 8006438:	0646      	lsls	r6, r0, #25
 800643a:	d5fb      	bpl.n	8006434 <_printf_i+0xe8>
 800643c:	881e      	ldrh	r6, [r3, #0]
 800643e:	4854      	ldr	r0, [pc, #336]	; (8006590 <_printf_i+0x244>)
 8006440:	2f6f      	cmp	r7, #111	; 0x6f
 8006442:	bf0c      	ite	eq
 8006444:	2308      	moveq	r3, #8
 8006446:	230a      	movne	r3, #10
 8006448:	2100      	movs	r1, #0
 800644a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800644e:	6865      	ldr	r5, [r4, #4]
 8006450:	60a5      	str	r5, [r4, #8]
 8006452:	2d00      	cmp	r5, #0
 8006454:	bfa2      	ittt	ge
 8006456:	6821      	ldrge	r1, [r4, #0]
 8006458:	f021 0104 	bicge.w	r1, r1, #4
 800645c:	6021      	strge	r1, [r4, #0]
 800645e:	b90e      	cbnz	r6, 8006464 <_printf_i+0x118>
 8006460:	2d00      	cmp	r5, #0
 8006462:	d04d      	beq.n	8006500 <_printf_i+0x1b4>
 8006464:	4615      	mov	r5, r2
 8006466:	fbb6 f1f3 	udiv	r1, r6, r3
 800646a:	fb03 6711 	mls	r7, r3, r1, r6
 800646e:	5dc7      	ldrb	r7, [r0, r7]
 8006470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006474:	4637      	mov	r7, r6
 8006476:	42bb      	cmp	r3, r7
 8006478:	460e      	mov	r6, r1
 800647a:	d9f4      	bls.n	8006466 <_printf_i+0x11a>
 800647c:	2b08      	cmp	r3, #8
 800647e:	d10b      	bne.n	8006498 <_printf_i+0x14c>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	07de      	lsls	r6, r3, #31
 8006484:	d508      	bpl.n	8006498 <_printf_i+0x14c>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	4299      	cmp	r1, r3
 800648c:	bfde      	ittt	le
 800648e:	2330      	movle	r3, #48	; 0x30
 8006490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006494:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006498:	1b52      	subs	r2, r2, r5
 800649a:	6122      	str	r2, [r4, #16]
 800649c:	f8cd a000 	str.w	sl, [sp]
 80064a0:	464b      	mov	r3, r9
 80064a2:	aa03      	add	r2, sp, #12
 80064a4:	4621      	mov	r1, r4
 80064a6:	4640      	mov	r0, r8
 80064a8:	f7ff fee2 	bl	8006270 <_printf_common>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d14c      	bne.n	800654a <_printf_i+0x1fe>
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	b004      	add	sp, #16
 80064b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ba:	4835      	ldr	r0, [pc, #212]	; (8006590 <_printf_i+0x244>)
 80064bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064c0:	6829      	ldr	r1, [r5, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064c8:	6029      	str	r1, [r5, #0]
 80064ca:	061d      	lsls	r5, r3, #24
 80064cc:	d514      	bpl.n	80064f8 <_printf_i+0x1ac>
 80064ce:	07df      	lsls	r7, r3, #31
 80064d0:	bf44      	itt	mi
 80064d2:	f043 0320 	orrmi.w	r3, r3, #32
 80064d6:	6023      	strmi	r3, [r4, #0]
 80064d8:	b91e      	cbnz	r6, 80064e2 <_printf_i+0x196>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	f023 0320 	bic.w	r3, r3, #32
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	2310      	movs	r3, #16
 80064e4:	e7b0      	b.n	8006448 <_printf_i+0xfc>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f043 0320 	orr.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2378      	movs	r3, #120	; 0x78
 80064f0:	4828      	ldr	r0, [pc, #160]	; (8006594 <_printf_i+0x248>)
 80064f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064f6:	e7e3      	b.n	80064c0 <_printf_i+0x174>
 80064f8:	0659      	lsls	r1, r3, #25
 80064fa:	bf48      	it	mi
 80064fc:	b2b6      	uxthmi	r6, r6
 80064fe:	e7e6      	b.n	80064ce <_printf_i+0x182>
 8006500:	4615      	mov	r5, r2
 8006502:	e7bb      	b.n	800647c <_printf_i+0x130>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	6826      	ldr	r6, [r4, #0]
 8006508:	6961      	ldr	r1, [r4, #20]
 800650a:	1d18      	adds	r0, r3, #4
 800650c:	6028      	str	r0, [r5, #0]
 800650e:	0635      	lsls	r5, r6, #24
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	d501      	bpl.n	8006518 <_printf_i+0x1cc>
 8006514:	6019      	str	r1, [r3, #0]
 8006516:	e002      	b.n	800651e <_printf_i+0x1d2>
 8006518:	0670      	lsls	r0, r6, #25
 800651a:	d5fb      	bpl.n	8006514 <_printf_i+0x1c8>
 800651c:	8019      	strh	r1, [r3, #0]
 800651e:	2300      	movs	r3, #0
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	4615      	mov	r5, r2
 8006524:	e7ba      	b.n	800649c <_printf_i+0x150>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	1d1a      	adds	r2, r3, #4
 800652a:	602a      	str	r2, [r5, #0]
 800652c:	681d      	ldr	r5, [r3, #0]
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	2100      	movs	r1, #0
 8006532:	4628      	mov	r0, r5
 8006534:	f7f9 fe64 	bl	8000200 <memchr>
 8006538:	b108      	cbz	r0, 800653e <_printf_i+0x1f2>
 800653a:	1b40      	subs	r0, r0, r5
 800653c:	6060      	str	r0, [r4, #4]
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	6123      	str	r3, [r4, #16]
 8006542:	2300      	movs	r3, #0
 8006544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006548:	e7a8      	b.n	800649c <_printf_i+0x150>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	462a      	mov	r2, r5
 800654e:	4649      	mov	r1, r9
 8006550:	4640      	mov	r0, r8
 8006552:	47d0      	blx	sl
 8006554:	3001      	adds	r0, #1
 8006556:	d0ab      	beq.n	80064b0 <_printf_i+0x164>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	079b      	lsls	r3, r3, #30
 800655c:	d413      	bmi.n	8006586 <_printf_i+0x23a>
 800655e:	68e0      	ldr	r0, [r4, #12]
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	4298      	cmp	r0, r3
 8006564:	bfb8      	it	lt
 8006566:	4618      	movlt	r0, r3
 8006568:	e7a4      	b.n	80064b4 <_printf_i+0x168>
 800656a:	2301      	movs	r3, #1
 800656c:	4632      	mov	r2, r6
 800656e:	4649      	mov	r1, r9
 8006570:	4640      	mov	r0, r8
 8006572:	47d0      	blx	sl
 8006574:	3001      	adds	r0, #1
 8006576:	d09b      	beq.n	80064b0 <_printf_i+0x164>
 8006578:	3501      	adds	r5, #1
 800657a:	68e3      	ldr	r3, [r4, #12]
 800657c:	9903      	ldr	r1, [sp, #12]
 800657e:	1a5b      	subs	r3, r3, r1
 8006580:	42ab      	cmp	r3, r5
 8006582:	dcf2      	bgt.n	800656a <_printf_i+0x21e>
 8006584:	e7eb      	b.n	800655e <_printf_i+0x212>
 8006586:	2500      	movs	r5, #0
 8006588:	f104 0619 	add.w	r6, r4, #25
 800658c:	e7f5      	b.n	800657a <_printf_i+0x22e>
 800658e:	bf00      	nop
 8006590:	08006909 	.word	0x08006909
 8006594:	0800691a 	.word	0x0800691a

08006598 <memcpy>:
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	4770      	bx	lr
 80065a4:	b510      	push	{r4, lr}
 80065a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ae:	4291      	cmp	r1, r2
 80065b0:	d1f9      	bne.n	80065a6 <memcpy+0xe>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <memmove>:
 80065b4:	4288      	cmp	r0, r1
 80065b6:	b510      	push	{r4, lr}
 80065b8:	eb01 0402 	add.w	r4, r1, r2
 80065bc:	d902      	bls.n	80065c4 <memmove+0x10>
 80065be:	4284      	cmp	r4, r0
 80065c0:	4623      	mov	r3, r4
 80065c2:	d807      	bhi.n	80065d4 <memmove+0x20>
 80065c4:	1e43      	subs	r3, r0, #1
 80065c6:	42a1      	cmp	r1, r4
 80065c8:	d008      	beq.n	80065dc <memmove+0x28>
 80065ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065d2:	e7f8      	b.n	80065c6 <memmove+0x12>
 80065d4:	4402      	add	r2, r0
 80065d6:	4601      	mov	r1, r0
 80065d8:	428a      	cmp	r2, r1
 80065da:	d100      	bne.n	80065de <memmove+0x2a>
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065e6:	e7f7      	b.n	80065d8 <memmove+0x24>

080065e8 <_free_r>:
 80065e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ea:	2900      	cmp	r1, #0
 80065ec:	d044      	beq.n	8006678 <_free_r+0x90>
 80065ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f2:	9001      	str	r0, [sp, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f1a1 0404 	sub.w	r4, r1, #4
 80065fa:	bfb8      	it	lt
 80065fc:	18e4      	addlt	r4, r4, r3
 80065fe:	f000 f913 	bl	8006828 <__malloc_lock>
 8006602:	4a1e      	ldr	r2, [pc, #120]	; (800667c <_free_r+0x94>)
 8006604:	9801      	ldr	r0, [sp, #4]
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	b933      	cbnz	r3, 8006618 <_free_r+0x30>
 800660a:	6063      	str	r3, [r4, #4]
 800660c:	6014      	str	r4, [r2, #0]
 800660e:	b003      	add	sp, #12
 8006610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006614:	f000 b90e 	b.w	8006834 <__malloc_unlock>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d908      	bls.n	800662e <_free_r+0x46>
 800661c:	6825      	ldr	r5, [r4, #0]
 800661e:	1961      	adds	r1, r4, r5
 8006620:	428b      	cmp	r3, r1
 8006622:	bf01      	itttt	eq
 8006624:	6819      	ldreq	r1, [r3, #0]
 8006626:	685b      	ldreq	r3, [r3, #4]
 8006628:	1949      	addeq	r1, r1, r5
 800662a:	6021      	streq	r1, [r4, #0]
 800662c:	e7ed      	b.n	800660a <_free_r+0x22>
 800662e:	461a      	mov	r2, r3
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b10b      	cbz	r3, 8006638 <_free_r+0x50>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d9fa      	bls.n	800662e <_free_r+0x46>
 8006638:	6811      	ldr	r1, [r2, #0]
 800663a:	1855      	adds	r5, r2, r1
 800663c:	42a5      	cmp	r5, r4
 800663e:	d10b      	bne.n	8006658 <_free_r+0x70>
 8006640:	6824      	ldr	r4, [r4, #0]
 8006642:	4421      	add	r1, r4
 8006644:	1854      	adds	r4, r2, r1
 8006646:	42a3      	cmp	r3, r4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	d1e0      	bne.n	800660e <_free_r+0x26>
 800664c:	681c      	ldr	r4, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	6053      	str	r3, [r2, #4]
 8006652:	4421      	add	r1, r4
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	e7da      	b.n	800660e <_free_r+0x26>
 8006658:	d902      	bls.n	8006660 <_free_r+0x78>
 800665a:	230c      	movs	r3, #12
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	e7d6      	b.n	800660e <_free_r+0x26>
 8006660:	6825      	ldr	r5, [r4, #0]
 8006662:	1961      	adds	r1, r4, r5
 8006664:	428b      	cmp	r3, r1
 8006666:	bf04      	itt	eq
 8006668:	6819      	ldreq	r1, [r3, #0]
 800666a:	685b      	ldreq	r3, [r3, #4]
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	bf04      	itt	eq
 8006670:	1949      	addeq	r1, r1, r5
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	6054      	str	r4, [r2, #4]
 8006676:	e7ca      	b.n	800660e <_free_r+0x26>
 8006678:	b003      	add	sp, #12
 800667a:	bd30      	pop	{r4, r5, pc}
 800667c:	200002a0 	.word	0x200002a0

08006680 <sbrk_aligned>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4e0e      	ldr	r6, [pc, #56]	; (80066bc <sbrk_aligned+0x3c>)
 8006684:	460c      	mov	r4, r1
 8006686:	6831      	ldr	r1, [r6, #0]
 8006688:	4605      	mov	r5, r0
 800668a:	b911      	cbnz	r1, 8006692 <sbrk_aligned+0x12>
 800668c:	f000 f8bc 	bl	8006808 <_sbrk_r>
 8006690:	6030      	str	r0, [r6, #0]
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 f8b7 	bl	8006808 <_sbrk_r>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	d00a      	beq.n	80066b4 <sbrk_aligned+0x34>
 800669e:	1cc4      	adds	r4, r0, #3
 80066a0:	f024 0403 	bic.w	r4, r4, #3
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d007      	beq.n	80066b8 <sbrk_aligned+0x38>
 80066a8:	1a21      	subs	r1, r4, r0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f8ac 	bl	8006808 <_sbrk_r>
 80066b0:	3001      	adds	r0, #1
 80066b2:	d101      	bne.n	80066b8 <sbrk_aligned+0x38>
 80066b4:	f04f 34ff 	mov.w	r4, #4294967295
 80066b8:	4620      	mov	r0, r4
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	200002a4 	.word	0x200002a4

080066c0 <_malloc_r>:
 80066c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c4:	1ccd      	adds	r5, r1, #3
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	4607      	mov	r7, r0
 80066d6:	db01      	blt.n	80066dc <_malloc_r+0x1c>
 80066d8:	42a9      	cmp	r1, r5
 80066da:	d905      	bls.n	80066e8 <_malloc_r+0x28>
 80066dc:	230c      	movs	r3, #12
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	2600      	movs	r6, #0
 80066e2:	4630      	mov	r0, r6
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	4e2e      	ldr	r6, [pc, #184]	; (80067a4 <_malloc_r+0xe4>)
 80066ea:	f000 f89d 	bl	8006828 <__malloc_lock>
 80066ee:	6833      	ldr	r3, [r6, #0]
 80066f0:	461c      	mov	r4, r3
 80066f2:	bb34      	cbnz	r4, 8006742 <_malloc_r+0x82>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	f7ff ffc2 	bl	8006680 <sbrk_aligned>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	4604      	mov	r4, r0
 8006700:	d14d      	bne.n	800679e <_malloc_r+0xde>
 8006702:	6834      	ldr	r4, [r6, #0]
 8006704:	4626      	mov	r6, r4
 8006706:	2e00      	cmp	r6, #0
 8006708:	d140      	bne.n	800678c <_malloc_r+0xcc>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	4631      	mov	r1, r6
 800670e:	4638      	mov	r0, r7
 8006710:	eb04 0803 	add.w	r8, r4, r3
 8006714:	f000 f878 	bl	8006808 <_sbrk_r>
 8006718:	4580      	cmp	r8, r0
 800671a:	d13a      	bne.n	8006792 <_malloc_r+0xd2>
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	3503      	adds	r5, #3
 8006720:	1a6d      	subs	r5, r5, r1
 8006722:	f025 0503 	bic.w	r5, r5, #3
 8006726:	3508      	adds	r5, #8
 8006728:	2d0c      	cmp	r5, #12
 800672a:	bf38      	it	cc
 800672c:	250c      	movcc	r5, #12
 800672e:	4629      	mov	r1, r5
 8006730:	4638      	mov	r0, r7
 8006732:	f7ff ffa5 	bl	8006680 <sbrk_aligned>
 8006736:	3001      	adds	r0, #1
 8006738:	d02b      	beq.n	8006792 <_malloc_r+0xd2>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	442b      	add	r3, r5
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	e00e      	b.n	8006760 <_malloc_r+0xa0>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	1b52      	subs	r2, r2, r5
 8006746:	d41e      	bmi.n	8006786 <_malloc_r+0xc6>
 8006748:	2a0b      	cmp	r2, #11
 800674a:	d916      	bls.n	800677a <_malloc_r+0xba>
 800674c:	1961      	adds	r1, r4, r5
 800674e:	42a3      	cmp	r3, r4
 8006750:	6025      	str	r5, [r4, #0]
 8006752:	bf18      	it	ne
 8006754:	6059      	strne	r1, [r3, #4]
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	bf08      	it	eq
 800675a:	6031      	streq	r1, [r6, #0]
 800675c:	5162      	str	r2, [r4, r5]
 800675e:	604b      	str	r3, [r1, #4]
 8006760:	4638      	mov	r0, r7
 8006762:	f104 060b 	add.w	r6, r4, #11
 8006766:	f000 f865 	bl	8006834 <__malloc_unlock>
 800676a:	f026 0607 	bic.w	r6, r6, #7
 800676e:	1d23      	adds	r3, r4, #4
 8006770:	1af2      	subs	r2, r6, r3
 8006772:	d0b6      	beq.n	80066e2 <_malloc_r+0x22>
 8006774:	1b9b      	subs	r3, r3, r6
 8006776:	50a3      	str	r3, [r4, r2]
 8006778:	e7b3      	b.n	80066e2 <_malloc_r+0x22>
 800677a:	6862      	ldr	r2, [r4, #4]
 800677c:	42a3      	cmp	r3, r4
 800677e:	bf0c      	ite	eq
 8006780:	6032      	streq	r2, [r6, #0]
 8006782:	605a      	strne	r2, [r3, #4]
 8006784:	e7ec      	b.n	8006760 <_malloc_r+0xa0>
 8006786:	4623      	mov	r3, r4
 8006788:	6864      	ldr	r4, [r4, #4]
 800678a:	e7b2      	b.n	80066f2 <_malloc_r+0x32>
 800678c:	4634      	mov	r4, r6
 800678e:	6876      	ldr	r6, [r6, #4]
 8006790:	e7b9      	b.n	8006706 <_malloc_r+0x46>
 8006792:	230c      	movs	r3, #12
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4638      	mov	r0, r7
 8006798:	f000 f84c 	bl	8006834 <__malloc_unlock>
 800679c:	e7a1      	b.n	80066e2 <_malloc_r+0x22>
 800679e:	6025      	str	r5, [r4, #0]
 80067a0:	e7de      	b.n	8006760 <_malloc_r+0xa0>
 80067a2:	bf00      	nop
 80067a4:	200002a0 	.word	0x200002a0

080067a8 <_realloc_r>:
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ac:	4680      	mov	r8, r0
 80067ae:	4614      	mov	r4, r2
 80067b0:	460e      	mov	r6, r1
 80067b2:	b921      	cbnz	r1, 80067be <_realloc_r+0x16>
 80067b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	4611      	mov	r1, r2
 80067ba:	f7ff bf81 	b.w	80066c0 <_malloc_r>
 80067be:	b92a      	cbnz	r2, 80067cc <_realloc_r+0x24>
 80067c0:	f7ff ff12 	bl	80065e8 <_free_r>
 80067c4:	4625      	mov	r5, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	f000 f838 	bl	8006840 <_malloc_usable_size_r>
 80067d0:	4284      	cmp	r4, r0
 80067d2:	4607      	mov	r7, r0
 80067d4:	d802      	bhi.n	80067dc <_realloc_r+0x34>
 80067d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067da:	d812      	bhi.n	8006802 <_realloc_r+0x5a>
 80067dc:	4621      	mov	r1, r4
 80067de:	4640      	mov	r0, r8
 80067e0:	f7ff ff6e 	bl	80066c0 <_malloc_r>
 80067e4:	4605      	mov	r5, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d0ed      	beq.n	80067c6 <_realloc_r+0x1e>
 80067ea:	42bc      	cmp	r4, r7
 80067ec:	4622      	mov	r2, r4
 80067ee:	4631      	mov	r1, r6
 80067f0:	bf28      	it	cs
 80067f2:	463a      	movcs	r2, r7
 80067f4:	f7ff fed0 	bl	8006598 <memcpy>
 80067f8:	4631      	mov	r1, r6
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff fef4 	bl	80065e8 <_free_r>
 8006800:	e7e1      	b.n	80067c6 <_realloc_r+0x1e>
 8006802:	4635      	mov	r5, r6
 8006804:	e7df      	b.n	80067c6 <_realloc_r+0x1e>
	...

08006808 <_sbrk_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	; (8006824 <_sbrk_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fea0 	bl	8001558 <_sbrk>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_sbrk_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_sbrk_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200002a8 	.word	0x200002a8

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__malloc_lock+0x8>)
 800682a:	f000 b811 	b.w	8006850 <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	200002ac 	.word	0x200002ac

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__malloc_unlock+0x8>)
 8006836:	f000 b80c 	b.w	8006852 <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	200002ac 	.word	0x200002ac

08006840 <_malloc_usable_size_r>:
 8006840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006844:	1f18      	subs	r0, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	bfbc      	itt	lt
 800684a:	580b      	ldrlt	r3, [r1, r0]
 800684c:	18c0      	addlt	r0, r0, r3
 800684e:	4770      	bx	lr

08006850 <__retarget_lock_acquire_recursive>:
 8006850:	4770      	bx	lr

08006852 <__retarget_lock_release_recursive>:
 8006852:	4770      	bx	lr

08006854 <_init>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr

08006860 <_fini>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr
